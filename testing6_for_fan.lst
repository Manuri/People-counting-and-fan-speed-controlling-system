CCS PCM C Compiler, Version 4.013, 28193               10-Jul-12 11:14

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing6_for_fan.lst

               ROM used: 358 words (4%)
                         Largest free fragment is 2048
               RAM used: 29 (8%) at main() level
                         30 (8%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   115
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   034
001D:  BTFSS  0B.4
001E:  GOTO   021
001F:  BTFSC  0B.1
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   03A
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   059
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
0045:  MOVLW  37
0046:  MOVWF  04
0047:  BCF    03.7
0048:  MOVF   00,W
0049:  BTFSC  03.2
004A:  GOTO   058
004B:  MOVLW  06
004C:  MOVWF  78
004D:  CLRF   77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 78,F
0051:  GOTO   04D
0052:  MOVLW  7B
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  DECFSZ 00,F
0057:  GOTO   04B
0058:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 2000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 4    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
....................  output_bit(LCD_DB5, !!(nibble & 2));   
....................  output_bit(LCD_DB6, !!(nibble & 4));     
....................  output_bit(LCD_DB7, !!(nibble & 8));     
....................   
....................  delay_cycles(1);  
....................  output_high(LCD_E);  
....................  delay_us(2);  
....................  output_low(LCD_E);  
.................... }  
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
....................      
.................... output_high(LCD_E);  
.................... delay_cycles(1);  
....................  
.................... retval_0 = input(LCD_DB4);  
.................... retval_1 = input(LCD_DB5);  
.................... retval_2 = input(LCD_DB6);  
.................... retval_3 = input(LCD_DB7);  
....................    
.................... output_low(LCD_E);  
....................      
.................... return(retval);     
.................... }     
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
.................... delay_cycles(1);  
....................  
.................... high = lcd_read_nibble();  
....................  
.................... low = lcd_read_nibble();  
....................  
.................... return( (high<<4) | low);  
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
....................    output_high(LCD_RS);  
.................... else  
....................    output_low(LCD_RS);  
....................        
....................  delay_cycles(1);  
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
.................... delay_cycles(1);  
.................... #endif  
....................  
.................... output_low(LCD_E);  
....................  
.................... lcd_send_nibble(n >> 4);  
.................... lcd_send_nibble(n & 0xf);  
.................... }  
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
.................... #endif  
....................  
.................... output_low(LCD_E);  
....................  
.................... delay_ms(15);  
....................  
.................... for(i=0 ;i < 3; i++)  
....................    {  
....................     lcd_send_nibble(0x03);  
....................     delay_ms(5);  
....................    }  
....................  
.................... lcd_send_nibble(0x02);  
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
....................    address = lcd_line_two;  
.................... else  
....................    address=0;  
.................... address += x-1;  
.................... lcd_send_byte(0, 0x80 | address);  
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
....................     case '\f':  
....................       lcd_send_byte(0,1);  
....................       delay_ms(2);  
....................       break;  
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
....................        break;  
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
....................        break;  
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
....................        break;  
....................    }  
.................... }  
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void init_pic(); 
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... int convertToASCII(int16 number); 
.................... void lcd_display(int16 number, int x, int y); 
.................... void initialDisplay(); 
.................... int16 read_temperature(); 
.................... void lcd_display_temperature(); 
....................  
.................... int16 noOfPeople = 1;    // Number of people inside the room 
*
0128:  MOVLW  01
0129:  BCF    03.5
012A:  MOVWF  28
012B:  CLRF   29
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
012C:  BCF    2E.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
012D:  BCF    2E.1
....................  
.................... int16 mseconds =0; 
012E:  CLRF   2F
012F:  CLRF   30
....................  
.................... int16 temperature;     // The A/D conversion of the analog input 
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int16 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
....................  
.................... int y=1; 
0130:  MOVWF  35
....................  
.................... void main() 
.................... { 
*
0115:  CLRF   04
0116:  BCF    03.7
0117:  MOVLW  1F
0118:  ANDWF  03,F
0119:  MOVLW  81
011A:  BSF    03.5
011B:  MOVWF  19
011C:  MOVLW  A6
011D:  MOVWF  18
011E:  MOVLW  90
011F:  BCF    03.5
0120:  MOVWF  18
0121:  BSF    03.5
0122:  BSF    1F.0
0123:  BSF    1F.1
0124:  BSF    1F.2
0125:  BCF    1F.3
0126:  MOVLW  07
0127:  MOVWF  1C
....................    init_pic(); 
*
0133:  GOTO   0A3
....................  
....................  //    initialDisplay(); 
....................  
....................        while(1) 
....................        { 
....................           if(INPUT(PIN_C0)) 
*
0131:  MOVLW  FF
0132:  MOVWF  36
*
0134:  BSF    36.0
0135:  MOVF   36,W
0136:  BSF    03.5
0137:  MOVWF  07
0138:  BCF    03.5
0139:  BTFSS  07.0
013A:  GOTO   13D
....................           { 
....................              y=0; 
013B:  CLRF   35
....................           } 
....................           else if(INPUT(PIN_C1)) 
013C:  GOTO   164
013D:  BSF    36.1
013E:  MOVF   36,W
013F:  BSF    03.5
0140:  MOVWF  07
0141:  BCF    03.5
0142:  BTFSS  07.1
0143:  GOTO   147
....................           { 
....................              Y=1; 
0144:  MOVLW  01
0145:  MOVWF  35
....................           } 
....................           else if(INPUT(PIN_C2)) 
0146:  GOTO   164
0147:  BSF    36.2
0148:  MOVF   36,W
0149:  BSF    03.5
014A:  MOVWF  07
014B:  BCF    03.5
014C:  BTFSS  07.2
014D:  GOTO   151
....................           { 
....................              y=2; 
014E:  MOVLW  02
014F:  MOVWF  35
....................           } 
....................           else if(INPUT(PIN_C3)) 
0150:  GOTO   164
0151:  BSF    36.3
0152:  MOVF   36,W
0153:  BSF    03.5
0154:  MOVWF  07
0155:  BCF    03.5
0156:  BTFSS  07.3
0157:  GOTO   15B
....................           { 
....................              y=3; 
0158:  MOVLW  03
0159:  MOVWF  35
....................           } 
....................           else if(INPUT(PIN_C4)) 
015A:  GOTO   164
015B:  BSF    36.4
015C:  MOVF   36,W
015D:  BSF    03.5
015E:  MOVWF  07
015F:  BCF    03.5
0160:  BTFSS  07.4
0161:  GOTO   164
....................           { 
....................              y=4; 
0162:  MOVLW  04
0163:  MOVWF  35
....................           } 
....................        } 
0164:  GOTO   134
....................  
.................... } 
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
0165:  SLEEP
....................  
....................     if(--int_count==0) 
*
003A:  DECFSZ 2A,F
003B:  GOTO   041
....................     { 
....................       ++mseconds; 
003C:  INCF   2F,F
003D:  BTFSC  03.2
003E:  INCF   30,F
....................       int_count=INTS_PER_mS; 
003F:  MOVLW  13
0040:  MOVWF  2A
....................     } 
....................  
.................... } 
....................  
0041:  BCF    0B.2
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   021
.................... #int_EXT 
.................... void rayCrossed_isr() 
.................... { 
....................    switch(y) 
....................    { 
*
0059:  MOVF   35,W
005A:  ADDLW  FB
005B:  BTFSC  03.0
005C:  GOTO   096
005D:  ADDLW  05
005E:  GOTO   09A
....................    case 0: 
....................       OUTPUT_LOW(PIN_B7); 
005F:  BSF    03.5
0060:  BCF    06.7
0061:  BCF    03.5
0062:  BCF    06.7
....................       break; 
0063:  GOTO   096
....................  
....................    case 1: 
....................       delay_ms(8); 
0064:  MOVLW  08
0065:  MOVWF  37
0066:  CALL   045
....................       OUTPUT_HIGH(PIN_B7); 
0067:  BSF    03.5
0068:  BCF    06.7
0069:  BCF    03.5
006A:  BSF    06.7
....................       delay_ms(2); 
006B:  MOVLW  02
006C:  MOVWF  37
006D:  CALL   045
....................       OUTPUT_LOW(PIN_B7); 
006E:  BSF    03.5
006F:  BCF    06.7
0070:  BCF    03.5
0071:  BCF    06.7
....................       break; 
0072:  GOTO   096
....................  
....................    case 2: 
....................       delay_ms(5); 
0073:  MOVLW  05
0074:  MOVWF  37
0075:  CALL   045
....................       OUTPUT_HIGH(PIN_B7); 
0076:  BSF    03.5
0077:  BCF    06.7
0078:  BCF    03.5
0079:  BSF    06.7
....................       delay_ms(5); 
007A:  MOVLW  05
007B:  MOVWF  37
007C:  CALL   045
....................       OUTPUT_LOW(PIN_B7); 
007D:  BSF    03.5
007E:  BCF    06.7
007F:  BCF    03.5
0080:  BCF    06.7
....................       break; 
0081:  GOTO   096
....................  
....................    case 3: 
....................       delay_ms(2); 
0082:  MOVLW  02
0083:  MOVWF  37
0084:  CALL   045
....................       OUTPUT_HIGH(PIN_B7); 
0085:  BSF    03.5
0086:  BCF    06.7
0087:  BCF    03.5
0088:  BSF    06.7
....................       delay_ms(8); 
0089:  MOVLW  08
008A:  MOVWF  37
008B:  CALL   045
....................       OUTPUT_LOW(PIN_B7); 
008C:  BSF    03.5
008D:  BCF    06.7
008E:  BCF    03.5
008F:  BCF    06.7
....................       break; 
0090:  GOTO   096
....................  
....................    case 4: 
....................       OUTPUT_HIGH(PIN_B7); 
0091:  BSF    03.5
0092:  BCF    06.7
0093:  BCF    03.5
0094:  BSF    06.7
....................       break; 
0095:  GOTO   096
....................    } 
.................... } 
....................  
....................  
0096:  BCF    0B.1
0097:  BCF    0A.3
0098:  BCF    0A.4
0099:  GOTO   021
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
....................    set_timer0(0); 
....................    mseconds=0; 
.................... } 
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
....................    { 
....................       return 1; 
....................    } 
....................    else 
....................    { 
....................       return 0; 
....................    } 
.................... } 
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................           temperature =read_temperature(); 
....................           lcd_display(temperature,13,2); 
.................... } 
....................  
.................... int convertToASCII(int16 number) 
.................... { 
....................    return (number+48); 
.................... } 
....................  
.................... void lcd_display(int16 number, int x, int y) 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition =number % 10; 
....................        tensPosition = ((number - (number % 10))%100)/10; 
....................        hundredsPosition = ((number - (number%100))%1000)/100; 
....................  
....................        lcd_gotoxy(x,y); 
....................        lcd_putc(convertToASCII(hundredsPosition)); 
....................        lcd_putc(convertToASCII(tensPosition)); 
....................        lcd_putc(convertToASCII(unitsPosition)); 
.................... } 
....................  
.................... int16 read_temperature() 
.................... { 
....................     delay_ms(500);                  //a small delay is required after setting the channel 
....................     t = read_adc(); 
....................     return convertToCelsius(); 
.................... } 
....................  
.................... void initialDisplay() 
.................... { 
....................      delay_ms(25); 
....................      lcd_init(); 
....................     // delay_ms(6); 
....................  
....................      lcd_gotoxy(1,1); 
....................      lcd_putc("*****CSE'10*****"); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("||||||||||||||||"); 
....................      delay_ms(2000); 
....................      lcd_gotoxy(1,1); 
....................      lcd_putc("\fNumberInside:"); 
....................      lcd_display(noOfPeople,14,1); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("Temperature:   C"); 
....................  
.................... } 
....................  
.................... void init_pic() 
.................... { 
....................    setup_adc_ports(AN0); 
*
00A3:  BSF    03.5
00A4:  BCF    1F.0
00A5:  BSF    1F.1
00A6:  BSF    1F.2
00A7:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
00A8:  BCF    1F.6
00A9:  BCF    03.5
00AA:  BCF    1F.6
00AB:  BSF    1F.7
00AC:  BSF    03.5
00AD:  BSF    1F.7
00AE:  BCF    03.5
00AF:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
00B0:  BSF    03.5
00B1:  BCF    09.4
....................    setup_spi(FALSE); 
00B2:  BCF    03.5
00B3:  BCF    14.5
00B4:  BCF    36.5
00B5:  MOVF   36,W
00B6:  BSF    03.5
00B7:  MOVWF  07
00B8:  BCF    03.5
00B9:  BSF    36.4
00BA:  MOVF   36,W
00BB:  BSF    03.5
00BC:  MOVWF  07
00BD:  BCF    03.5
00BE:  BCF    36.3
00BF:  MOVF   36,W
00C0:  BSF    03.5
00C1:  MOVWF  07
00C2:  MOVLW  00
00C3:  BCF    03.5
00C4:  MOVWF  14
00C5:  BSF    03.5
00C6:  MOVWF  14
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
00C7:  MOVLW  08
00C8:  MOVWF  77
00C9:  BTFSS  77.3
00CA:  GOTO   0D6
00CB:  MOVLW  07
00CC:  BCF    03.5
00CD:  CLRF   01
00CE:  MOVLW  81
00CF:  MOVWF  04
00D0:  BCF    03.7
00D1:  MOVF   00,W
00D2:  ANDLW  C0
00D3:  IORLW  0F
00D4:  MOVWF  00
00D5:  BSF    03.5
00D6:  CLRWDT
00D7:  MOVLW  81
00D8:  MOVWF  04
00D9:  MOVF   00,W
00DA:  ANDLW  C0
00DB:  IORWF  77,W
00DC:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
00DD:  BCF    03.5
00DE:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
00DF:  MOVLW  00
00E0:  MOVWF  78
00E1:  MOVWF  12
00E2:  MOVLW  00
00E3:  BSF    03.5
00E4:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
00E5:  MOVLW  07
00E6:  MOVWF  1C
00E7:  MOVF   05,W
00E8:  MOVLW  10
00E9:  MOVWF  77
00EA:  DECFSZ 77,F
00EB:  GOTO   0EA
00EC:  NOP
00ED:  MOVF   1C,W
00EE:  BCF    03.5
00EF:  BCF    0D.6
....................    setup_vref(FALSE); 
00F0:  BSF    03.5
00F1:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
00F2:  BCF    03.5
00F3:  BSF    0B.5
....................    enable_interrupts(INT_EXT); 
00F4:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
00F5:  MOVLW  C0
00F6:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
00F7:  BSF    03.5
00F8:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
00F9:  CLRF   06
00FA:  BCF    03.5
00FB:  CLRF   06
....................    OUTPUT_C(0); 
00FC:  MOVLW  00
00FD:  MOVWF  36
00FE:  BSF    03.5
00FF:  CLRF   07
0100:  BCF    03.5
0101:  CLRF   07
....................  
....................    SET_TRIS_B(0b00000001);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
0102:  MOVLW  01
0103:  BSF    03.5
0104:  MOVWF  06
....................    SET_TRIS_C(0b00011111); 
0105:  MOVLW  1F
0106:  MOVWF  07
0107:  BCF    03.5
0108:  MOVWF  36
....................    SET_TRIS_D(0b00000000); 
0109:  MOVLW  00
010A:  BSF    03.5
010B:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
010C:  MOVWF  78
010D:  BCF    03.5
010E:  MOVF   1F,W
010F:  ANDLW  C7
0110:  IORWF  78,W
0111:  MOVWF  1F
.................... } 
0112:  BCF    0A.3
0113:  BCF    0A.4
0114:  GOTO   134 (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
