CCS PCM C Compiler, Version 4.013, 28193               22-Jun-12 09:01

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing2.lst

               ROM used: 1248 words (15%)
                         Largest free fragment is 2048
               RAM used: 33 (9%) at main() level
                         80 (22%) worst case
               Stack:    13 worst case (6 in main + 7 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   295
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   034
001D:  BTFSS  0B.4
001E:  GOTO   021
001F:  BTFSC  0B.1
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   057
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   256
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
0186:  MOVLW  57
0187:  MOVWF  04
0188:  BCF    03.7
0189:  MOVF   00,W
018A:  BTFSC  03.2
018B:  GOTO   199
018C:  MOVLW  06
018D:  MOVWF  78
018E:  CLRF   77
018F:  DECFSZ 77,F
0190:  GOTO   18F
0191:  DECFSZ 78,F
0192:  GOTO   18E
0193:  MOVLW  7B
0194:  MOVWF  77
0195:  DECFSZ 77,F
0196:  GOTO   195
0197:  DECFSZ 00,F
0198:  GOTO   18C
0199:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 3000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 1    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 300  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_E     PIN_D3 
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
*
011C:  BTFSC  5E.0
011D:  GOTO   120
011E:  BCF    08.4
011F:  GOTO   121
0120:  BSF    08.4
0121:  BSF    03.5
0122:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
0123:  BCF    03.5
0124:  BTFSC  5E.1
0125:  GOTO   128
0126:  BCF    08.5
0127:  GOTO   129
0128:  BSF    08.5
0129:  BSF    03.5
012A:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
012B:  BCF    03.5
012C:  BTFSC  5E.2
012D:  GOTO   130
012E:  BCF    08.6
012F:  GOTO   131
0130:  BSF    08.6
0131:  BSF    03.5
0132:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0133:  BCF    03.5
0134:  BTFSC  5E.3
0135:  GOTO   138
0136:  BCF    08.7
0137:  GOTO   139
0138:  BSF    08.7
0139:  BSF    03.5
013A:  BCF    08.7
....................   
....................  delay_cycles(1);  
013B:  NOP
....................  output_high(LCD_E);  
013C:  BCF    08.3
013D:  BCF    03.5
013E:  BSF    08.3
....................  delay_us(2);  
013F:  MOVLW  03
0140:  MOVWF  77
0141:  DECFSZ 77,F
0142:  GOTO   141
....................  output_low(LCD_E);  
0143:  BSF    03.5
0144:  BCF    08.3
0145:  BCF    03.5
0146:  BCF    08.3
.................... }  
0147:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
*
00E4:  CLRF   5F
....................      
.................... output_high(LCD_E);  
00E5:  BSF    03.5
00E6:  BCF    08.3
00E7:  BCF    03.5
00E8:  BSF    08.3
.................... delay_cycles(1);  
00E9:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
00EA:  BSF    03.5
00EB:  BSF    08.4
00EC:  BCF    03.5
00ED:  BCF    5F.0
00EE:  BTFSC  08.4
00EF:  BSF    5F.0
.................... retval_1 = input(LCD_DB5);  
00F0:  BSF    03.5
00F1:  BSF    08.5
00F2:  BCF    03.5
00F3:  BCF    5F.1
00F4:  BTFSC  08.5
00F5:  BSF    5F.1
.................... retval_2 = input(LCD_DB6);  
00F6:  BSF    03.5
00F7:  BSF    08.6
00F8:  BCF    03.5
00F9:  BCF    5F.2
00FA:  BTFSC  08.6
00FB:  BSF    5F.2
.................... retval_3 = input(LCD_DB7);  
00FC:  BSF    03.5
00FD:  BSF    08.7
00FE:  BCF    03.5
00FF:  BCF    5F.3
0100:  BTFSC  08.7
0101:  BSF    5F.3
....................    
.................... output_low(LCD_E);  
0102:  BSF    03.5
0103:  BCF    08.3
0104:  BCF    03.5
0105:  BCF    08.3
....................      
.................... return(retval);     
0106:  MOVF   5F,W
0107:  MOVWF  78
.................... }     
0108:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
0109:  BSF    03.5
010A:  BCF    08.2
010B:  BCF    03.5
010C:  BSF    08.2
.................... delay_cycles(1);  
010D:  NOP
....................  
.................... high = lcd_read_nibble();  
010E:  CALL   0E4
010F:  MOVF   78,W
0110:  MOVWF  5E
....................  
.................... low = lcd_read_nibble();  
0111:  CALL   0E4
0112:  MOVF   78,W
0113:  MOVWF  5D
....................  
.................... return( (high<<4) | low);  
0114:  SWAPF  5E,W
0115:  MOVWF  77
0116:  MOVLW  F0
0117:  ANDWF  77,F
0118:  MOVF   77,W
0119:  IORWF  5D,W
011A:  MOVWF  78
.................... }  
011B:  RETLW  00
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
0148:  BSF    03.5
0149:  BCF    08.1
014A:  BCF    03.5
014B:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
014C:  CALL   109
014D:  MOVF   78,W
014E:  MOVWF  5D
014F:  BTFSC  5D.7
0150:  GOTO   14C
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
0151:  MOVF   5B,F
0152:  BTFSC  03.2
0153:  GOTO   159
....................    output_high(LCD_RS);  
0154:  BSF    03.5
0155:  BCF    08.1
0156:  BCF    03.5
0157:  BSF    08.1
.................... else  
0158:  GOTO   15D
....................    output_low(LCD_RS);  
0159:  BSF    03.5
015A:  BCF    08.1
015B:  BCF    03.5
015C:  BCF    08.1
....................        
....................  delay_cycles(1);  
015D:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
015E:  BSF    03.5
015F:  BCF    08.2
0160:  BCF    03.5
0161:  BCF    08.2
.................... delay_cycles(1);  
0162:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
0163:  BSF    03.5
0164:  BCF    08.3
0165:  BCF    03.5
0166:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
0167:  SWAPF  5C,W
0168:  MOVWF  5D
0169:  MOVLW  0F
016A:  ANDWF  5D,F
016B:  MOVF   5D,W
016C:  MOVWF  5E
016D:  CALL   11C
.................... lcd_send_nibble(n & 0xf);  
016E:  MOVF   5C,W
016F:  ANDLW  0F
0170:  MOVWF  5D
0171:  MOVWF  5E
0172:  CALL   11C
.................... }  
0173:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
0326:  BSF    03.5
0327:  BCF    08.1
0328:  BCF    03.5
0329:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
032A:  BSF    03.5
032B:  BCF    08.2
032C:  BCF    03.5
032D:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
032E:  BSF    03.5
032F:  BCF    08.3
0330:  BCF    03.5
0331:  BCF    08.3
0332:  CLRF   28
0333:  BTFSC  0B.7
0334:  BSF    28.7
0335:  BCF    0B.7
....................  
.................... delay_ms(15);  
0336:  MOVLW  0F
0337:  MOVWF  57
0338:  CALL   186
0339:  BTFSC  28.7
033A:  BSF    0B.7
....................  
.................... for(i=0 ;i < 3; i++)  
033B:  CLRF   3A
033C:  MOVF   3A,W
033D:  SUBLW  02
033E:  BTFSS  03.0
033F:  GOTO   354
0340:  CLRF   28
0341:  BTFSC  0B.7
0342:  BSF    28.7
0343:  BCF    0B.7
....................    {  
....................     lcd_send_nibble(0x03);  
0344:  MOVLW  03
0345:  MOVWF  5E
0346:  CALL   11C
0347:  BTFSC  28.7
0348:  BSF    0B.7
0349:  CLRF   28
034A:  BTFSC  0B.7
034B:  BSF    28.7
034C:  BCF    0B.7
....................     delay_ms(5);  
034D:  MOVLW  05
034E:  MOVWF  57
034F:  CALL   186
0350:  BTFSC  28.7
0351:  BSF    0B.7
....................    }  
0352:  INCF   3A,F
0353:  GOTO   33C
0354:  CLRF   28
0355:  BTFSC  0B.7
0356:  BSF    28.7
0357:  BCF    0B.7
....................  
.................... lcd_send_nibble(0x02);  
0358:  MOVLW  02
0359:  MOVWF  5E
035A:  CALL   11C
035B:  BTFSC  28.7
035C:  BSF    0B.7
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
035D:  CLRF   3A
035E:  MOVF   3A,W
035F:  SUBLW  03
0360:  BTFSS  03.0
0361:  GOTO   371
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
0362:  MOVF   3A,W
0363:  CALL   03A
0364:  MOVWF  3B
0365:  CLRF   28
0366:  BTFSC  0B.7
0367:  BSF    28.7
0368:  BCF    0B.7
0369:  CLRF   5B
036A:  MOVF   3B,W
036B:  MOVWF  5C
036C:  CALL   148
036D:  BTFSC  28.7
036E:  BSF    0B.7
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
036F:  INCF   3A,F
0370:  GOTO   35E
0371:  CLRF   28
0372:  BTFSC  0B.7
0373:  BSF    28.7
0374:  BCF    0B.7
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
0174:  DECFSZ 58,W
0175:  GOTO   177
0176:  GOTO   17A
....................    address = lcd_line_two;  
0177:  MOVLW  40
0178:  MOVWF  59
.................... else  
0179:  GOTO   17B
....................    address=0;  
017A:  CLRF   59
.................... address += x-1;  
017B:  MOVLW  01
017C:  SUBWF  57,W
017D:  ADDWF  59,F
.................... lcd_send_byte(0, 0x80 | address);  
017E:  MOVF   59,W
017F:  IORLW  80
0180:  MOVWF  5A
0181:  CLRF   5B
0182:  MOVF   5A,W
0183:  MOVWF  5C
0184:  CALL   148
.................... }  
0185:  RETLW  00
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
*
019A:  MOVF   56,W
019B:  XORLW  0C
019C:  BTFSC  03.2
019D:  GOTO   1A5
019E:  XORLW  06
019F:  BTFSC  03.2
01A0:  GOTO   1AD
01A1:  XORLW  02
01A2:  BTFSC  03.2
01A3:  GOTO   1B3
01A4:  GOTO   1B8
....................     case '\f':  
....................       lcd_send_byte(0,1);  
01A5:  CLRF   5B
01A6:  MOVLW  01
01A7:  MOVWF  5C
01A8:  CALL   148
....................       delay_ms(2);  
01A9:  MOVLW  02
01AA:  MOVWF  57
01AB:  CALL   186
....................       break;  
01AC:  GOTO   1BE
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
01AD:  MOVLW  01
01AE:  MOVWF  57
01AF:  MOVLW  02
01B0:  MOVWF  58
01B1:  CALL   174
....................        break;  
01B2:  GOTO   1BE
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
01B3:  CLRF   5B
01B4:  MOVLW  10
01B5:  MOVWF  5C
01B6:  CALL   148
....................        break;  
01B7:  GOTO   1BE
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
01B8:  MOVLW  01
01B9:  MOVWF  5B
01BA:  MOVF   56,W
01BB:  MOVWF  5C
01BC:  CALL   148
....................        break;  
01BD:  GOTO   1BE
....................    }  
.................... }  
01BE:  RETLW  00
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void setTimer(); 
.................... int checkTimer(); 
.................... int check_delay_between_ints(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... void lcd_display_temperature(); 
.................... void lcd_display_no_of_people(); 
.................... void control_fan_speed(); 
.................... void display_mseconds(); //test function 
....................  
.................... //int1 first=1; 
.................... int noOfPeople = 0;    // Number of people inside the room 
*
02A8:  BCF    03.5
02A9:  CLRF   29
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
02AA:  BCF    2E.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
02AB:  BCF    2E.1
....................  
.................... int16 mseconds =0;// MIN_DELAY_BETWEEN_TWO_INTERRUPTS;    // A running miliseconds counter 
02AC:  CLRF   2F
02AD:  CLRF   30
....................  
.................... int32 temperature;     // The A/D conversion of the analog input 
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int32 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
....................  
.................... void main() 
.................... { 
*
0295:  CLRF   04
0296:  BCF    03.7
0297:  MOVLW  1F
0298:  ANDWF  03,F
0299:  MOVLW  81
029A:  BSF    03.5
029B:  MOVWF  19
029C:  MOVLW  A6
029D:  MOVWF  18
029E:  MOVLW  90
029F:  BCF    03.5
02A0:  MOVWF  18
02A1:  BSF    03.5
02A2:  BSF    1F.0
02A3:  BSF    1F.1
02A4:  BSF    1F.2
02A5:  BCF    1F.3
02A6:  MOVLW  07
02A7:  MOVWF  1C
....................  
....................    setup_adc_ports(AN0); 
*
02B0:  BSF    03.5
02B1:  BCF    1F.0
02B2:  BSF    1F.1
02B3:  BSF    1F.2
02B4:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
02B5:  BCF    1F.6
02B6:  BCF    03.5
02B7:  BCF    1F.6
02B8:  BSF    1F.7
02B9:  BSF    03.5
02BA:  BSF    1F.7
02BB:  BCF    03.5
02BC:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
02BD:  BSF    03.5
02BE:  BCF    09.4
....................    setup_spi(FALSE); 
*
02AE:  MOVLW  FF
02AF:  MOVWF  39
*
02BF:  BCF    03.5
02C0:  BCF    14.5
02C1:  BCF    39.5
02C2:  MOVF   39,W
02C3:  BSF    03.5
02C4:  MOVWF  07
02C5:  BCF    03.5
02C6:  BSF    39.4
02C7:  MOVF   39,W
02C8:  BSF    03.5
02C9:  MOVWF  07
02CA:  BCF    03.5
02CB:  BCF    39.3
02CC:  MOVF   39,W
02CD:  BSF    03.5
02CE:  MOVWF  07
02CF:  MOVLW  00
02D0:  BCF    03.5
02D1:  MOVWF  14
02D2:  BSF    03.5
02D3:  MOVWF  14
....................   // setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); 
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
02D4:  MOVLW  08
02D5:  MOVWF  77
02D6:  BTFSS  77.3
02D7:  GOTO   2E3
02D8:  MOVLW  07
02D9:  BCF    03.5
02DA:  CLRF   01
02DB:  MOVLW  81
02DC:  MOVWF  04
02DD:  BCF    03.7
02DE:  MOVF   00,W
02DF:  ANDLW  C0
02E0:  IORLW  0F
02E1:  MOVWF  00
02E2:  BSF    03.5
02E3:  CLRWDT
02E4:  MOVLW  81
02E5:  MOVWF  04
02E6:  MOVF   00,W
02E7:  ANDLW  C0
02E8:  IORWF  77,W
02E9:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
02EA:  BCF    03.5
02EB:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
02EC:  MOVLW  00
02ED:  MOVWF  78
02EE:  MOVWF  12
02EF:  MOVLW  00
02F0:  BSF    03.5
02F1:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
02F2:  MOVLW  07
02F3:  MOVWF  1C
02F4:  MOVF   05,W
02F5:  MOVLW  10
02F6:  MOVWF  77
02F7:  DECFSZ 77,F
02F8:  GOTO   2F7
02F9:  NOP
02FA:  MOVF   1C,W
02FB:  BCF    03.5
02FC:  BCF    0D.6
....................    setup_vref(FALSE); 
02FD:  BSF    03.5
02FE:  CLRF   1D
....................   // enable_interrupts(INT_RTCC); 
....................   // enable_interrupts(INT_RB); 
....................    enable_interrupts(INT_EXT); 
02FF:  BCF    03.5
0300:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
0301:  MOVLW  C0
0302:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
0303:  BSF    03.5
0304:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
0305:  CLRF   06
0306:  BCF    03.5
0307:  CLRF   06
....................    OUTPUT_C(0); 
0308:  MOVLW  00
0309:  MOVWF  39
030A:  BSF    03.5
030B:  CLRF   07
030C:  BCF    03.5
030D:  CLRF   07
....................  
....................    SET_TRIS_B(0b00000111);   //pins B0 and B4 are set to give inputs 
030E:  MOVLW  07
030F:  BSF    03.5
0310:  MOVWF  06
....................    SET_TRIS_C(0b00000000); 
0311:  MOVLW  00
0312:  MOVWF  07
0313:  BCF    03.5
0314:  MOVWF  39
....................    SET_TRIS_D(0b00000000); 
0315:  BSF    03.5
0316:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
0317:  MOVWF  78
0318:  BCF    03.5
0319:  MOVF   1F,W
031A:  ANDLW  C7
031B:  IORWF  78,W
031C:  MOVWF  1F
031D:  CLRF   28
031E:  BTFSC  0B.7
031F:  BSF    28.7
0320:  BCF    0B.7
....................  
....................      delay_ms(25); 
0321:  MOVLW  19
0322:  MOVWF  57
0323:  CALL   186
0324:  BTFSC  28.7
0325:  BSF    0B.7
....................      lcd_init(); 
....................      delay_ms(6); 
*
0375:  MOVLW  06
0376:  MOVWF  57
0377:  CALL   186
0378:  BTFSC  28.7
0379:  BSF    0B.7
037A:  CLRF   28
037B:  BTFSC  0B.7
037C:  BSF    28.7
037D:  BCF    0B.7
....................      lcd_gotoxy(1,1); 
037E:  MOVLW  01
037F:  MOVWF  57
0380:  MOVWF  58
0381:  CALL   174
0382:  BTFSC  28.7
0383:  BSF    0B.7
....................      lcd_putc("\fnumber:"); 
0384:  CLRF   3A
0385:  MOVF   3A,W
0386:  CALL   042
0387:  IORLW  00
0388:  BTFSC  03.2
0389:  GOTO   394
038A:  INCF   3A,F
038B:  CLRF   28
038C:  BTFSC  0B.7
038D:  BSF    28.7
038E:  BCF    0B.7
038F:  MOVWF  56
0390:  CALL   19A
0391:  BTFSC  28.7
0392:  BSF    0B.7
0393:  GOTO   385
0394:  CLRF   28
0395:  BTFSC  0B.7
0396:  BSF    28.7
0397:  BCF    0B.7
0398:  MOVWF  56
0399:  CALL   19A
039A:  BTFSC  28.7
039B:  BSF    0B.7
039C:  CLRF   28
039D:  BTFSC  0B.7
039E:  BSF    28.7
039F:  BCF    0B.7
....................      lcd_display_no_of_people(); 
03A0:  CALL   1BF
03A1:  BTFSC  28.7
03A2:  BSF    0B.7
03A3:  CLRF   28
03A4:  BTFSC  0B.7
03A5:  BSF    28.7
03A6:  BCF    0B.7
....................      lcd_gotoxy(1,2); 
03A7:  MOVLW  01
03A8:  MOVWF  57
03A9:  MOVLW  02
03AA:  MOVWF  58
03AB:  CALL   174
03AC:  BTFSC  28.7
03AD:  BSF    0B.7
....................      lcd_putc("ms:"); 
03AE:  CLRF   3A
03AF:  MOVF   3A,W
03B0:  CALL   04F
03B1:  IORLW  00
03B2:  BTFSC  03.2
03B3:  GOTO   3BE
03B4:  INCF   3A,F
03B5:  CLRF   28
03B6:  BTFSC  0B.7
03B7:  BSF    28.7
03B8:  BCF    0B.7
03B9:  MOVWF  56
03BA:  CALL   19A
03BB:  BTFSC  28.7
03BC:  BSF    0B.7
03BD:  GOTO   3AF
03BE:  CLRF   28
03BF:  BTFSC  0B.7
03C0:  BSF    28.7
03C1:  BCF    0B.7
03C2:  MOVWF  56
03C3:  CALL   19A
03C4:  BTFSC  28.7
03C5:  BSF    0B.7
....................  
....................       if(noOfPeople==0)OUTPUT_HIGH(PIN_C0); 
03C6:  MOVF   29,F
03C7:  BTFSS  03.2
03C8:  GOTO   3CF
03C9:  BCF    39.0
03CA:  MOVF   39,W
03CB:  BSF    03.5
03CC:  MOVWF  07
03CD:  BCF    03.5
03CE:  BSF    07.0
03CF:  CLRF   28
03D0:  BTFSC  0B.7
03D1:  BSF    28.7
03D2:  BCF    0B.7
....................  
....................        while(1)display_mseconds(); 
*
04DE:  GOTO   3CF
....................  
.................... } 
....................  
....................  
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
04DF:  SLEEP
....................  
....................     if(--int_count==0) 
*
0057:  DECFSZ 2A,F
0058:  GOTO   05E
....................     { 
....................       ++mseconds; 
0059:  INCF   2F,F
005A:  BTFSC  03.2
005B:  INCF   30,F
....................       int_count=INTS_PER_mS; 
005C:  MOVLW  13
005D:  MOVWF  2A
....................     } 
....................  
.................... } 
....................  
005E:  BCF    0B.2
005F:  BCF    0A.3
0060:  BCF    0A.4
0061:  GOTO   021
.................... #int_EXT 
.................... void rayCrossed_isr() 
.................... { 
.................... //  if(check_delay_between_ints()) 
.................... //  { 
....................    if(INPUT(PIN_B2)&& rayTwo!=1) 
*
0256:  BSF    03.5
0257:  BSF    06.2
0258:  BCF    03.5
0259:  BTFSS  06.2
025A:  GOTO   269
025B:  BTFSC  2E.1
025C:  GOTO   269
....................    { 
....................     //  setTimer(); 
....................       rayTwo = 1; 
025D:  BSF    2E.1
....................       if(rayOne == 1) 
025E:  BTFSS  2E.0
025F:  GOTO   267
....................       { 
....................          if(checkTimer() == 1) 
0260:  CALL   062
0261:  DECFSZ 78,W
0262:  GOTO   265
....................          { 
....................             noOfPeople++ ; 
0263:  INCF   29,F
....................             //setTimer(); 
....................             lcd_display_no_of_people(); 
0264:  CALL   1BF
....................          } 
....................          rayOne = 0; 
0265:  BCF    2E.0
....................          rayTwo = 0; 
0266:  BCF    2E.1
....................       } 
....................       setTimer(); 
0267:  CALL   251
....................    } 
....................   else  if(INPUT(PIN_B1)&& rayOne!=1) 
0268:  GOTO   27B
0269:  BSF    03.5
026A:  BSF    06.1
026B:  BCF    03.5
026C:  BTFSS  06.1
026D:  GOTO   27B
026E:  BTFSC  2E.0
026F:  GOTO   27B
....................    { 
....................      // setTimer(); 
....................       rayOne = 1; 
0270:  BSF    2E.0
....................       if(rayTwo == 1) 
0271:  BTFSS  2E.1
0272:  GOTO   27A
....................       { 
....................          if(checkTimer() == 1) 
0273:  CALL   062
0274:  DECFSZ 78,W
0275:  GOTO   278
....................          { 
....................             noOfPeople-- ; 
0276:  DECF   29,F
....................             //setTimer(); 
....................             lcd_display_no_of_people(); 
0277:  CALL   1BF
....................          } 
....................          rayOne = 0; 
0278:  BCF    2E.0
....................          rayTwo = 0; 
0279:  BCF    2E.1
....................       } 
....................       setTimer(); 
027A:  CALL   251
....................    } 
.................... //  } 
....................    delay_ms(500);OUTPUT_HIGH(PIN_B7); 
027B:  MOVLW  02
027C:  MOVWF  52
027D:  MOVLW  FA
027E:  MOVWF  57
027F:  CALL   186
0280:  DECFSZ 52,F
0281:  GOTO   27D
0282:  BSF    03.5
0283:  BCF    06.7
0284:  BCF    03.5
0285:  BSF    06.7
....................     delay_ms(500);OUTPUT_LOW(PIN_B7); 
0286:  MOVLW  02
0287:  MOVWF  52
0288:  MOVLW  FA
0289:  MOVWF  57
028A:  CALL   186
028B:  DECFSZ 52,F
028C:  GOTO   288
028D:  BSF    03.5
028E:  BCF    06.7
028F:  BCF    03.5
0290:  BCF    06.7
....................  } 
....................  
....................  
0291:  BCF    0B.1
0292:  BCF    0A.3
0293:  BCF    0A.4
0294:  GOTO   021
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
*
0251:  MOVLW  13
0252:  MOVWF  2A
....................  //  setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
....................    set_timer0(0); 
0253:  CLRF   01
....................    enable_interrupts(INT_RTCC); 
0254:  BSF    0B.5
.................... } 
0255:  RETLW  00
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    //display_mseconds(); 
....................    disable_interrupts(INT_RTCC); 
*
0062:  BCF    0B.5
....................  /*  if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
....................    { 
....................       mseconds = 0; 
....................       return 1; 
....................    } 
....................    else 
....................    { 
....................       mseconds = 0; 
....................       return 0; 
....................    }*/ 
....................    mseconds=0;return 1; 
0063:  CLRF   30
0064:  CLRF   2F
0065:  MOVLW  01
0066:  MOVWF  78
.................... } 
0067:  RETLW  00
....................  
.................... int check_delay_between_ints() 
.................... { 
....................    disable_interrupts(INT_RTCC); 
....................    if(mseconds > MIN_DELAY_BETWEEN_TWO_INTERRUPTS) 
....................    { 
....................  
....................       return 1; 
....................    } 
....................    else 
....................    { 
....................       enable_interrupts(INT_RTCC); 
....................       mseconds=0; 
....................       return 0; 
....................    } 
.................... } 
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*149)/1024+1; 
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition = temperature % 10 + 48; 
....................        tensPosition = ((temperature - (temperature % 10))%100)/10 +48; 
....................        hundredsPosition = (temperature - (temperature%100))/100 +48; 
....................  
....................        lcd_gotoxy(8,2); 
....................        lcd_putc(hundredsPosition); 
....................        lcd_putc(tensPosition); 
....................        lcd_putc(unitsPosition); 
....................  
.................... } 
....................  
.................... void lcd_display_no_of_people() 
.................... { 
....................     /* lcd_gotoxy(9,1); 
....................      lcd_putc(noOfPeople+48);*/ 
....................  
....................       int unitsPosition, tensPosition, hundredsPosition, thousandsPosition; 
....................  
....................        unitsPosition =noOfPeople % 10 + 48; 
*
01BF:  MOVF   29,W
01C0:  MOVWF  59
01C1:  MOVLW  0A
01C2:  MOVWF  5A
01C3:  CALL   068
01C4:  MOVLW  30
01C5:  ADDWF  77,W
01C6:  MOVWF  52
....................        tensPosition = ((noOfPeople - (noOfPeople % 10))%100)/10 +48; 
01C7:  MOVF   29,W
01C8:  MOVWF  59
01C9:  MOVLW  0A
01CA:  MOVWF  5A
01CB:  CALL   068
01CC:  MOVF   77,W
01CD:  SUBWF  29,W
01CE:  MOVWF  57
01CF:  MOVWF  59
01D0:  MOVLW  64
01D1:  MOVWF  5A
01D2:  CALL   068
01D3:  MOVF   77,W
01D4:  MOVWF  59
01D5:  MOVLW  0A
01D6:  MOVWF  5A
01D7:  CALL   068
01D8:  MOVLW  30
01D9:  ADDWF  78,W
01DA:  MOVWF  53
....................        hundredsPosition = ((noOfPeople - (noOfPeople%100))%1000)/100 +48; 
01DB:  MOVF   29,W
01DC:  MOVWF  59
01DD:  MOVLW  64
01DE:  MOVWF  5A
01DF:  CALL   068
01E0:  MOVF   77,W
01E1:  SUBWF  29,W
01E2:  MOVWF  57
01E3:  CLRF   5B
01E4:  MOVF   57,W
01E5:  MOVWF  5A
01E6:  MOVLW  03
01E7:  MOVWF  5D
01E8:  MOVLW  E8
01E9:  MOVWF  5C
01EA:  CALL   07D
01EB:  MOVF   77,W
01EC:  MOVWF  58
01ED:  MOVF   7A,W
01EE:  MOVWF  59
01EF:  MOVWF  5B
01F0:  MOVF   77,W
01F1:  MOVWF  5A
01F2:  CLRF   5D
01F3:  MOVLW  64
01F4:  MOVWF  5C
01F5:  CALL   07D
01F6:  MOVLW  30
01F7:  ADDWF  78,W
01F8:  MOVWF  54
....................        thousandsPosition = ((noOfPeople - (noOfPeople%1000))%100000)/1000 +48; 
01F9:  CLRF   5B
01FA:  MOVF   29,W
01FB:  MOVWF  5A
01FC:  MOVLW  03
01FD:  MOVWF  5D
01FE:  MOVLW  E8
01FF:  MOVWF  5C
0200:  CALL   07D
0201:  MOVF   77,W
0202:  SUBWF  29,W
0203:  MOVWF  56
0204:  CLRF   57
0205:  MOVF   7A,W
0206:  BTFSS  03.0
0207:  INCFSZ 7A,W
0208:  SUBWF  57,F
0209:  CLRF   60
020A:  CLRF   5F
020B:  MOVF   57,W
020C:  MOVWF  5E
020D:  MOVF   56,W
020E:  MOVWF  5D
020F:  CLRF   64
0210:  MOVLW  01
0211:  MOVWF  63
0212:  MOVLW  86
0213:  MOVWF  62
0214:  MOVLW  A0
0215:  MOVWF  61
0216:  CALL   0A2
0217:  MOVF   00,W
0218:  MOVWF  57
0219:  INCF   04,F
021A:  MOVF   00,W
021B:  MOVWF  58
021C:  INCF   04,F
021D:  MOVF   00,W
021E:  MOVWF  59
021F:  INCF   04,F
0220:  MOVF   00,W
0221:  MOVWF  5A
0222:  CLRF   5C
0223:  MOVF   04,W
0224:  MOVWF  5B
0225:  BCF    5C.0
0226:  BTFSC  03.7
0227:  BSF    5C.0
0228:  MOVF   5A,W
0229:  MOVWF  60
022A:  MOVF   59,W
022B:  MOVWF  5F
022C:  MOVF   58,W
022D:  MOVWF  5E
022E:  MOVF   57,W
022F:  MOVWF  5D
0230:  CLRF   64
0231:  CLRF   63
0232:  MOVLW  03
0233:  MOVWF  62
0234:  MOVLW  E8
0235:  MOVWF  61
0236:  CALL   0A2
0237:  MOVF   5B,W
0238:  MOVWF  04
0239:  BCF    03.7
023A:  BTFSC  5C.0
023B:  BSF    03.7
023C:  MOVLW  30
023D:  ADDWF  77,W
023E:  MOVWF  55
....................  
....................        lcd_gotoxy(9,1); 
023F:  MOVLW  09
0240:  MOVWF  57
0241:  MOVLW  01
0242:  MOVWF  58
0243:  CALL   174
....................        lcd_putc(thousandsPosition); 
0244:  MOVF   55,W
0245:  MOVWF  56
0246:  CALL   19A
....................        lcd_putc(hundredsPosition); 
0247:  MOVF   54,W
0248:  MOVWF  56
0249:  CALL   19A
....................        lcd_putc(tensPosition); 
024A:  MOVF   53,W
024B:  MOVWF  56
024C:  CALL   19A
....................        lcd_putc(unitsPosition); 
024D:  MOVF   52,W
024E:  MOVWF  56
024F:  CALL   19A
....................  
....................  
.................... } 
0250:  RETLW  00
....................  
.................... void control_fan_speed() 
.................... { 
....................     if(0<=t && t<205) 
....................        { 
....................          OUTPUT_C(0); 
....................          OUTPUT_HIGH(PIN_C0); 
....................        } 
....................        else if(t>=205 && t<410) 
....................        { 
....................          OUTPUT_C(0); 
....................          OUTPUT_HIGH(PIN_C1); 
....................        } 
....................         else if(t>=410 && t<614) 
....................        { 
....................          OUTPUT_C(0); 
....................          OUTPUT_HIGH(PIN_C2); 
....................        } 
....................         else if(t>=614 && t<818) 
....................        { 
....................          OUTPUT_C(0); 
....................          OUTPUT_HIGH(PIN_C3); 
....................        } 
....................         else 
....................        { 
....................          OUTPUT_C(0); 
....................          OUTPUT_HIGH(PIN_C4); 
....................        } 
.................... } 
....................  
.................... void display_mseconds() 
.................... { 
....................     int unitsPosition, tensPosition, hundredsPosition, thousandsPosition; 
....................  
....................        unitsPosition = mseconds % 10 + 48; 
*
03D3:  MOVF   30,W
03D4:  MOVWF  5B
03D5:  MOVF   2F,W
03D6:  MOVWF  5A
03D7:  CLRF   5D
03D8:  MOVLW  0A
03D9:  MOVWF  5C
03DA:  CALL   07D
03DB:  BTFSC  28.7
03DC:  BSF    0B.7
03DD:  MOVLW  30
03DE:  ADDWF  77,W
03DF:  MOVWF  3A
03E0:  CLRF   28
03E1:  BTFSC  0B.7
03E2:  BSF    28.7
03E3:  BCF    0B.7
....................        tensPosition = ((mseconds - (mseconds % 10))%100)/10 +48; 
03E4:  MOVF   30,W
03E5:  MOVWF  5B
03E6:  MOVF   2F,W
03E7:  MOVWF  5A
03E8:  CLRF   5D
03E9:  MOVLW  0A
03EA:  MOVWF  5C
03EB:  CALL   07D
03EC:  BTFSC  28.7
03ED:  BSF    0B.7
03EE:  MOVF   77,W
03EF:  SUBWF  2F,W
03F0:  MOVWF  3E
03F1:  MOVF   30,W
03F2:  MOVWF  3F
03F3:  MOVF   7A,W
03F4:  BTFSS  03.0
03F5:  INCFSZ 7A,W
03F6:  SUBWF  3F,F
03F7:  CLRF   28
03F8:  BTFSC  0B.7
03F9:  BSF    28.7
03FA:  BCF    0B.7
03FB:  MOVF   3F,W
03FC:  MOVWF  5B
03FD:  MOVF   3E,W
03FE:  MOVWF  5A
03FF:  CLRF   5D
0400:  MOVLW  64
0401:  MOVWF  5C
0402:  CALL   07D
0403:  BTFSC  28.7
0404:  BSF    0B.7
0405:  MOVF   77,W
0406:  MOVWF  3F
0407:  MOVF   7A,W
0408:  MOVWF  40
0409:  CLRF   28
040A:  BTFSC  0B.7
040B:  BSF    28.7
040C:  BCF    0B.7
040D:  MOVF   7A,W
040E:  MOVWF  5B
040F:  MOVF   77,W
0410:  MOVWF  5A
0411:  CLRF   5D
0412:  MOVLW  0A
0413:  MOVWF  5C
0414:  CALL   07D
0415:  BTFSC  28.7
0416:  BSF    0B.7
0417:  MOVLW  30
0418:  ADDWF  78,W
0419:  MOVWF  3B
041A:  CLRF   28
041B:  BTFSC  0B.7
041C:  BSF    28.7
041D:  BCF    0B.7
....................        hundredsPosition = ((mseconds - (mseconds%100))%1000)/100 +48; 
041E:  MOVF   30,W
041F:  MOVWF  5B
0420:  MOVF   2F,W
0421:  MOVWF  5A
0422:  CLRF   5D
0423:  MOVLW  64
0424:  MOVWF  5C
0425:  CALL   07D
0426:  BTFSC  28.7
0427:  BSF    0B.7
0428:  MOVF   77,W
0429:  SUBWF  2F,W
042A:  MOVWF  3E
042B:  MOVF   30,W
042C:  MOVWF  3F
042D:  MOVF   7A,W
042E:  BTFSS  03.0
042F:  INCFSZ 7A,W
0430:  SUBWF  3F,F
0431:  CLRF   28
0432:  BTFSC  0B.7
0433:  BSF    28.7
0434:  BCF    0B.7
0435:  MOVF   3F,W
0436:  MOVWF  5B
0437:  MOVF   3E,W
0438:  MOVWF  5A
0439:  MOVLW  03
043A:  MOVWF  5D
043B:  MOVLW  E8
043C:  MOVWF  5C
043D:  CALL   07D
043E:  BTFSC  28.7
043F:  BSF    0B.7
0440:  MOVF   77,W
0441:  MOVWF  3F
0442:  MOVF   7A,W
0443:  MOVWF  40
0444:  CLRF   28
0445:  BTFSC  0B.7
0446:  BSF    28.7
0447:  BCF    0B.7
0448:  MOVF   7A,W
0449:  MOVWF  5B
044A:  MOVF   77,W
044B:  MOVWF  5A
044C:  CLRF   5D
044D:  MOVLW  64
044E:  MOVWF  5C
044F:  CALL   07D
0450:  BTFSC  28.7
0451:  BSF    0B.7
0452:  MOVLW  30
0453:  ADDWF  78,W
0454:  MOVWF  3C
0455:  CLRF   28
0456:  BTFSC  0B.7
0457:  BSF    28.7
0458:  BCF    0B.7
....................        thousandsPosition = ((mseconds - (mseconds%1000))%100000)/1000 +48; 
0459:  MOVF   30,W
045A:  MOVWF  5B
045B:  MOVF   2F,W
045C:  MOVWF  5A
045D:  MOVLW  03
045E:  MOVWF  5D
045F:  MOVLW  E8
0460:  MOVWF  5C
0461:  CALL   07D
0462:  BTFSC  28.7
0463:  BSF    0B.7
0464:  MOVF   77,W
0465:  SUBWF  2F,W
0466:  MOVWF  3E
0467:  MOVF   30,W
0468:  MOVWF  3F
0469:  MOVF   7A,W
046A:  BTFSS  03.0
046B:  INCFSZ 7A,W
046C:  SUBWF  3F,F
046D:  CLRF   28
046E:  BTFSC  0B.7
046F:  BSF    28.7
0470:  BCF    0B.7
0471:  CLRF   60
0472:  CLRF   5F
0473:  MOVF   3F,W
0474:  MOVWF  5E
0475:  MOVF   3E,W
0476:  MOVWF  5D
0477:  CLRF   64
0478:  MOVLW  01
0479:  MOVWF  63
047A:  MOVLW  86
047B:  MOVWF  62
047C:  MOVLW  A0
047D:  MOVWF  61
047E:  CALL   0A2
047F:  BTFSC  28.7
0480:  BSF    0B.7
0481:  MOVF   00,W
0482:  MOVWF  3F
0483:  INCF   04,F
0484:  MOVF   00,W
0485:  MOVWF  40
0486:  INCF   04,F
0487:  MOVF   00,W
0488:  MOVWF  41
0489:  INCF   04,F
048A:  MOVF   00,W
048B:  MOVWF  42
048C:  CLRF   44
048D:  MOVF   04,W
048E:  MOVWF  43
048F:  BCF    44.0
0490:  BTFSC  03.7
0491:  BSF    44.0
0492:  CLRF   28
0493:  BTFSC  0B.7
0494:  BSF    28.7
0495:  BCF    0B.7
0496:  MOVF   42,W
0497:  MOVWF  60
0498:  MOVF   41,W
0499:  MOVWF  5F
049A:  MOVF   40,W
049B:  MOVWF  5E
049C:  MOVF   3F,W
049D:  MOVWF  5D
049E:  CLRF   64
049F:  CLRF   63
04A0:  MOVLW  03
04A1:  MOVWF  62
04A2:  MOVLW  E8
04A3:  MOVWF  61
04A4:  CALL   0A2
04A5:  BTFSC  28.7
04A6:  BSF    0B.7
04A7:  MOVF   43,W
04A8:  MOVWF  04
04A9:  BCF    03.7
04AA:  BTFSC  44.0
04AB:  BSF    03.7
04AC:  MOVLW  30
04AD:  ADDWF  77,W
04AE:  MOVWF  3D
04AF:  CLRF   28
04B0:  BTFSC  0B.7
04B1:  BSF    28.7
04B2:  BCF    0B.7
....................  
....................        lcd_gotoxy(4,2); 
04B3:  MOVLW  04
04B4:  MOVWF  57
04B5:  MOVLW  02
04B6:  MOVWF  58
04B7:  CALL   174
04B8:  BTFSC  28.7
04B9:  BSF    0B.7
04BA:  CLRF   28
04BB:  BTFSC  0B.7
04BC:  BSF    28.7
04BD:  BCF    0B.7
....................        lcd_putc(thousandsPosition); 
04BE:  MOVF   3D,W
04BF:  MOVWF  56
04C0:  CALL   19A
04C1:  BTFSC  28.7
04C2:  BSF    0B.7
04C3:  CLRF   28
04C4:  BTFSC  0B.7
04C5:  BSF    28.7
04C6:  BCF    0B.7
....................        lcd_putc(hundredsPosition); 
04C7:  MOVF   3C,W
04C8:  MOVWF  56
04C9:  CALL   19A
04CA:  BTFSC  28.7
04CB:  BSF    0B.7
04CC:  CLRF   28
04CD:  BTFSC  0B.7
04CE:  BSF    28.7
04CF:  BCF    0B.7
....................        lcd_putc(tensPosition); 
04D0:  MOVF   3B,W
04D1:  MOVWF  56
04D2:  CALL   19A
04D3:  BTFSC  28.7
04D4:  BSF    0B.7
04D5:  CLRF   28
04D6:  BTFSC  0B.7
04D7:  BSF    28.7
04D8:  BCF    0B.7
....................        lcd_putc(unitsPosition); 
04D9:  MOVF   3A,W
04DA:  MOVWF  56
04DB:  CALL   19A
04DC:  BTFSC  28.7
04DD:  BSF    0B.7
....................  
.................... } 
....................  

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
