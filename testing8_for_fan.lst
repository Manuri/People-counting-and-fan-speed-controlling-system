CCS PCM C Compiler, Version 4.013, 28193               12-Jul-12 14:49

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing8_for_fan.lst

               ROM used: 677 words (8%)
                         Largest free fragment is 2048
               RAM used: 30 (8%) at main() level
                         41 (11%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1F7
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   04F
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
00CA:  MOVLW  3A
00CB:  MOVWF  04
00CC:  BCF    03.7
00CD:  MOVF   00,W
00CE:  BTFSC  03.2
00CF:  GOTO   0DD
00D0:  MOVLW  06
00D1:  MOVWF  78
00D2:  CLRF   77
00D3:  DECFSZ 77,F
00D4:  GOTO   0D3
00D5:  DECFSZ 78,F
00D6:  GOTO   0D2
00D7:  MOVLW  7B
00D8:  MOVWF  77
00D9:  DECFSZ 77,F
00DA:  GOTO   0D9
00DB:  DECFSZ 00,F
00DC:  GOTO   0D0
00DD:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 2000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 4    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
00DE:  BTFSC  41.0
00DF:  GOTO   0E2
00E0:  BCF    08.4
00E1:  GOTO   0E3
00E2:  BSF    08.4
00E3:  BSF    03.5
00E4:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
00E5:  BCF    03.5
00E6:  BTFSC  41.1
00E7:  GOTO   0EA
00E8:  BCF    08.5
00E9:  GOTO   0EB
00EA:  BSF    08.5
00EB:  BSF    03.5
00EC:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
00ED:  BCF    03.5
00EE:  BTFSC  41.2
00EF:  GOTO   0F2
00F0:  BCF    08.6
00F1:  GOTO   0F3
00F2:  BSF    08.6
00F3:  BSF    03.5
00F4:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
00F5:  BCF    03.5
00F6:  BTFSC  41.3
00F7:  GOTO   0FA
00F8:  BCF    08.7
00F9:  GOTO   0FB
00FA:  BSF    08.7
00FB:  BSF    03.5
00FC:  BCF    08.7
....................   
....................  delay_cycles(1);  
00FD:  NOP
....................  output_high(LCD_E);  
00FE:  BCF    08.3
00FF:  BCF    03.5
0100:  BSF    08.3
....................  delay_us(2);  
0101:  MOVLW  03
0102:  MOVWF  77
0103:  DECFSZ 77,F
0104:  GOTO   103
....................  output_low(LCD_E);  
0105:  BSF    03.5
0106:  BCF    08.3
0107:  BCF    03.5
0108:  BCF    08.3
.................... }  
0109:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
010A:  CLRF   42
....................      
.................... output_high(LCD_E);  
010B:  BSF    03.5
010C:  BCF    08.3
010D:  BCF    03.5
010E:  BSF    08.3
.................... delay_cycles(1);  
010F:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
0110:  BSF    03.5
0111:  BSF    08.4
0112:  BCF    03.5
0113:  BCF    42.0
0114:  BTFSC  08.4
0115:  BSF    42.0
.................... retval_1 = input(LCD_DB5);  
0116:  BSF    03.5
0117:  BSF    08.5
0118:  BCF    03.5
0119:  BCF    42.1
011A:  BTFSC  08.5
011B:  BSF    42.1
.................... retval_2 = input(LCD_DB6);  
011C:  BSF    03.5
011D:  BSF    08.6
011E:  BCF    03.5
011F:  BCF    42.2
0120:  BTFSC  08.6
0121:  BSF    42.2
.................... retval_3 = input(LCD_DB7);  
0122:  BSF    03.5
0123:  BSF    08.7
0124:  BCF    03.5
0125:  BCF    42.3
0126:  BTFSC  08.7
0127:  BSF    42.3
....................    
.................... output_low(LCD_E);  
0128:  BSF    03.5
0129:  BCF    08.3
012A:  BCF    03.5
012B:  BCF    08.3
....................      
.................... return(retval);     
012C:  MOVF   42,W
012D:  MOVWF  78
.................... }     
012E:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
0133:  BSF    03.5
0134:  BCF    08.2
0135:  BCF    03.5
0136:  BSF    08.2
.................... delay_cycles(1);  
0137:  NOP
....................  
.................... high = lcd_read_nibble();  
0138:  CALL   10A
0139:  MOVF   78,W
013A:  MOVWF  41
....................  
.................... low = lcd_read_nibble();  
013B:  CALL   10A
013C:  MOVF   78,W
013D:  MOVWF  40
....................  
.................... return( (high<<4) | low);  
013E:  SWAPF  41,W
013F:  MOVWF  77
0140:  MOVLW  F0
0141:  ANDWF  77,F
0142:  MOVF   77,W
0143:  IORWF  40,W
0144:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
012F:  BSF    03.5
0130:  BCF    08.1
0131:  BCF    03.5
0132:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
0145:  MOVF   78,W
0146:  MOVWF  40
0147:  BTFSC  40.7
0148:  GOTO   133
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
0149:  MOVF   3E,F
014A:  BTFSC  03.2
014B:  GOTO   151
....................    output_high(LCD_RS);  
014C:  BSF    03.5
014D:  BCF    08.1
014E:  BCF    03.5
014F:  BSF    08.1
.................... else  
0150:  GOTO   155
....................    output_low(LCD_RS);  
0151:  BSF    03.5
0152:  BCF    08.1
0153:  BCF    03.5
0154:  BCF    08.1
....................        
....................  delay_cycles(1);  
0155:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
0156:  BSF    03.5
0157:  BCF    08.2
0158:  BCF    03.5
0159:  BCF    08.2
.................... delay_cycles(1);  
015A:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
015B:  BSF    03.5
015C:  BCF    08.3
015D:  BCF    03.5
015E:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
015F:  SWAPF  3F,W
0160:  MOVWF  40
0161:  MOVLW  0F
0162:  ANDWF  40,F
0163:  MOVF   40,W
0164:  MOVWF  41
0165:  CALL   0DE
.................... lcd_send_nibble(n & 0xf);  
0166:  MOVF   3F,W
0167:  ANDLW  0F
0168:  MOVWF  40
0169:  MOVWF  41
016A:  CALL   0DE
.................... }  
016B:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
01A6:  BSF    03.5
01A7:  BCF    08.1
01A8:  BCF    03.5
01A9:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
01AA:  BSF    03.5
01AB:  BCF    08.2
01AC:  BCF    03.5
01AD:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
01AE:  BSF    03.5
01AF:  BCF    08.3
01B0:  BCF    03.5
01B1:  BCF    08.3
....................  
.................... delay_ms(15);  
01B2:  MOVLW  0F
01B3:  MOVWF  3A
01B4:  CALL   0CA
....................  
.................... for(i=0 ;i < 3; i++)  
01B5:  CLRF   38
01B6:  MOVF   38,W
01B7:  SUBLW  02
01B8:  BTFSS  03.0
01B9:  GOTO   1C2
....................    {  
....................     lcd_send_nibble(0x03);  
01BA:  MOVLW  03
01BB:  MOVWF  41
01BC:  CALL   0DE
....................     delay_ms(5);  
01BD:  MOVLW  05
01BE:  MOVWF  3A
01BF:  CALL   0CA
....................    }  
01C0:  INCF   38,F
01C1:  GOTO   1B6
....................  
.................... lcd_send_nibble(0x02);  
01C2:  MOVLW  02
01C3:  MOVWF  41
01C4:  CALL   0DE
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
01C5:  CLRF   38
01C6:  MOVF   38,W
01C7:  SUBLW  03
01C8:  BTFSS  03.0
01C9:  GOTO   1D3
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
01CA:  MOVF   38,W
01CB:  CALL   033
01CC:  MOVWF  39
01CD:  CLRF   3E
01CE:  MOVF   39,W
01CF:  MOVWF  3F
01D0:  CALL   12F
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
01D1:  INCF   38,F
01D2:  GOTO   1C6
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
016C:  DECFSZ 3B,W
016D:  GOTO   16F
016E:  GOTO   172
....................    address = lcd_line_two;  
016F:  MOVLW  40
0170:  MOVWF  3C
.................... else  
0171:  GOTO   173
....................    address=0;  
0172:  CLRF   3C
.................... address += x-1;  
0173:  MOVLW  01
0174:  SUBWF  3A,W
0175:  ADDWF  3C,F
.................... lcd_send_byte(0, 0x80 | address);  
0176:  MOVF   3C,W
0177:  IORLW  80
0178:  MOVWF  3D
0179:  CLRF   3E
017A:  MOVF   3D,W
017B:  MOVWF  3F
017C:  CALL   12F
.................... }  
017D:  RETLW  00
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
017E:  MOVF   39,W
017F:  XORLW  0C
0180:  BTFSC  03.2
0181:  GOTO   189
0182:  XORLW  06
0183:  BTFSC  03.2
0184:  GOTO   191
0185:  XORLW  02
0186:  BTFSC  03.2
0187:  GOTO   197
0188:  GOTO   19C
....................     case '\f':  
....................       lcd_send_byte(0,1);  
0189:  CLRF   3E
018A:  MOVLW  01
018B:  MOVWF  3F
018C:  CALL   12F
....................       delay_ms(2);  
018D:  MOVLW  02
018E:  MOVWF  3A
018F:  CALL   0CA
....................       break;  
0190:  GOTO   1A2
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
0191:  MOVLW  01
0192:  MOVWF  3A
0193:  MOVLW  02
0194:  MOVWF  3B
0195:  CALL   16C
....................        break;  
0196:  GOTO   1A2
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
0197:  CLRF   3E
0198:  MOVLW  10
0199:  MOVWF  3F
019A:  CALL   12F
....................        break;  
019B:  GOTO   1A2
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
019C:  MOVLW  01
019D:  MOVWF  3E
019E:  MOVF   39,W
019F:  MOVWF  3F
01A0:  CALL   12F
....................        break;  
01A1:  GOTO   1A2
....................    }  
.................... }  
01A2:  RETLW  00
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void init_pic(); 
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... int convertToASCII(int16 number); 
.................... void lcd_display(int16 number, int x, int y); 
.................... void initialDisplay(); 
.................... int16 read_temperature(); 
.................... void lcd_display_temperature(); 
....................  
.................... int16 noOfPeople = 1;    // Number of people inside the room 
*
020A:  MOVLW  01
020B:  BCF    03.5
020C:  MOVWF  28
020D:  CLRF   29
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
020E:  BCF    2E.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
020F:  BCF    2E.1
....................  
.................... int16 mseconds =0; 
0210:  CLRF   2F
0211:  CLRF   30
....................  
.................... int16 temperature;     // The A/D conversion of the analog input 
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int16 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
.................... int1 yChanged = 0; 
0212:  BCF    2E.2
....................  
.................... int y=0; 
0213:  CLRF   35
.................... int x=0; 
0214:  CLRF   36
....................  
.................... void main() 
.................... { 
*
01F7:  CLRF   04
01F8:  BCF    03.7
01F9:  MOVLW  1F
01FA:  ANDWF  03,F
01FB:  MOVLW  81
01FC:  BSF    03.5
01FD:  MOVWF  19
01FE:  MOVLW  A6
01FF:  MOVWF  18
0200:  MOVLW  90
0201:  BCF    03.5
0202:  MOVWF  18
0203:  BSF    03.5
0204:  BSF    1F.0
0205:  BSF    1F.1
0206:  BSF    1F.2
0207:  BCF    1F.3
0208:  MOVLW  07
0209:  MOVWF  1C
....................    init_pic(); 
*
0217:  GOTO   05A
....................  
....................      initialDisplay(); 
0218:  GOTO   1A3
....................  
....................      OUTPUT_HIGH(PIN_C5); 
*
0215:  MOVLW  FF
0216:  MOVWF  37
*
0219:  BCF    37.5
021A:  MOVF   37,W
021B:  BSF    03.5
021C:  MOVWF  07
021D:  BCF    03.5
021E:  BSF    07.5
....................  
....................        while(1) 
....................        { 
.................... //          if(mseconds<=1000)lcd_display(x, 5, 2); 
....................  
....................           if(INPUT(PIN_C0)) 
021F:  BSF    37.0
0220:  MOVF   37,W
0221:  BSF    03.5
0222:  MOVWF  07
0223:  BCF    03.5
0224:  BTFSS  07.0
0225:  GOTO   229
....................           { 
....................              y=0; 
0226:  CLRF   35
....................              yChanged = 1; 
0227:  BSF    2E.2
....................             // lcd_display(y, 7, 1); 
....................           } 
....................           else if(INPUT(PIN_C1)) 
0228:  GOTO   254
0229:  BSF    37.1
022A:  MOVF   37,W
022B:  BSF    03.5
022C:  MOVWF  07
022D:  BCF    03.5
022E:  BTFSS  07.1
022F:  GOTO   234
....................           { 
....................              Y=1; 
0230:  MOVLW  01
0231:  MOVWF  35
....................               yChanged = 1; 
0232:  BSF    2E.2
....................             // lcd_display(y, 7, 1); 
....................           } 
....................           else if(INPUT(PIN_C2)) 
0233:  GOTO   254
0234:  BSF    37.2
0235:  MOVF   37,W
0236:  BSF    03.5
0237:  MOVWF  07
0238:  BCF    03.5
0239:  BTFSS  07.2
023A:  GOTO   23F
....................           { 
....................              y=2; 
023B:  MOVLW  02
023C:  MOVWF  35
....................               yChanged = 1; 
023D:  BSF    2E.2
....................             // lcd_display(y, 7, 1); 
....................           } 
....................           else if(INPUT(PIN_C3)) 
023E:  GOTO   254
023F:  BSF    37.3
0240:  MOVF   37,W
0241:  BSF    03.5
0242:  MOVWF  07
0243:  BCF    03.5
0244:  BTFSS  07.3
0245:  GOTO   24A
....................           { 
....................              y=3; 
0246:  MOVLW  03
0247:  MOVWF  35
....................               yChanged = 1; 
0248:  BSF    2E.2
....................             // lcd_display(y, 7, 1); 
....................           } 
....................           else if(INPUT(PIN_C4)) 
0249:  GOTO   254
024A:  BSF    37.4
024B:  MOVF   37,W
024C:  BSF    03.5
024D:  MOVWF  07
024E:  BCF    03.5
024F:  BTFSS  07.4
0250:  GOTO   254
....................           { 
....................              y=4; 
0251:  MOVLW  04
0252:  MOVWF  35
....................               yChanged = 1; 
0253:  BSF    2E.2
....................             // lcd_display(y, 7, 1); 
....................           } 
.................... if(INPUT(PIN_B0) && yChanged) 
0254:  BSF    03.5
0255:  BSF    06.0
0256:  BCF    03.5
0257:  BTFSS  06.0
0258:  GOTO   29A
0259:  BTFSS  2E.2
025A:  GOTO   29A
....................    { 
....................     yChanged = 0; 
025B:  BCF    2E.2
....................     x++; 
025C:  INCF   36,F
....................     switch(y) 
....................    { 
025D:  MOVF   35,W
025E:  ADDLW  FB
025F:  BTFSC  03.0
0260:  GOTO   29A
0261:  ADDLW  05
0262:  GOTO   29C
....................    case 0: 
....................      // OUTPUT_LOW(PIN_B7); 
....................       OUTPUT_HIGH(PIN_B2); 
0263:  BSF    03.5
0264:  BCF    06.2
0265:  BCF    03.5
0266:  BSF    06.2
....................       break; 
0267:  GOTO   29A
....................  
....................    case 1: 
....................       delay_ms(8); 
0268:  MOVLW  08
0269:  MOVWF  3A
026A:  CALL   0CA
....................      // OUTPUT_HIGH(PIN_B7); 
....................       OUTPUT_LOW(PIN_B2); 
026B:  BSF    03.5
026C:  BCF    06.2
026D:  BCF    03.5
026E:  BCF    06.2
....................       delay_ms(2); 
026F:  MOVLW  02
0270:  MOVWF  3A
0271:  CALL   0CA
....................     //  OUTPUT_LOW(PIN_B7); 
....................      OUTPUT_HIGH(PIN_B2); 
0272:  BSF    03.5
0273:  BCF    06.2
0274:  BCF    03.5
0275:  BSF    06.2
....................       break; 
0276:  GOTO   29A
....................  
....................    case 2: 
....................       delay_ms(5); 
0277:  MOVLW  05
0278:  MOVWF  3A
0279:  CALL   0CA
....................       //OUTPUT_HIGH(PIN_B7); 
....................       OUTPUT_LOW(PIN_B2); 
027A:  BSF    03.5
027B:  BCF    06.2
027C:  BCF    03.5
027D:  BCF    06.2
....................       delay_ms(5); 
027E:  MOVLW  05
027F:  MOVWF  3A
0280:  CALL   0CA
....................      // OUTPUT_LOW(PIN_B7); 
....................       OUTPUT_HIGH(PIN_B2); 
0281:  BSF    03.5
0282:  BCF    06.2
0283:  BCF    03.5
0284:  BSF    06.2
....................       break; 
0285:  GOTO   29A
....................  
....................    case 3: 
....................       delay_ms(2); 
0286:  MOVLW  02
0287:  MOVWF  3A
0288:  CALL   0CA
....................      // OUTPUT_HIGH(PIN_B7); 
....................      OUTPUT_LOW(PIN_B2); 
0289:  BSF    03.5
028A:  BCF    06.2
028B:  BCF    03.5
028C:  BCF    06.2
....................       delay_ms(8); 
028D:  MOVLW  08
028E:  MOVWF  3A
028F:  CALL   0CA
....................      // OUTPUT_LOW(PIN_B7); 
....................       OUTPUT_HIGH(PIN_B2); 
0290:  BSF    03.5
0291:  BCF    06.2
0292:  BCF    03.5
0293:  BSF    06.2
....................       break; 
0294:  GOTO   29A
....................  
....................    case 4: 
....................      // OUTPUT_HIGH(PIN_B7); 
....................       OUTPUT_LOW(PIN_B2); 
0295:  BSF    03.5
0296:  BCF    06.2
0297:  BCF    03.5
0298:  BCF    06.2
....................       break; 
0299:  GOTO   29A
....................    } 
....................    } 
....................  
....................        } 
029A:  GOTO   21F
....................  
.................... } 
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
029B:  SLEEP
....................  
....................     if(--int_count==0) 
*
004F:  DECFSZ 2A,F
0050:  GOTO   056
....................     { 
....................       ++mseconds; 
0051:  INCF   2F,F
0052:  BTFSC  03.2
0053:  INCF   30,F
....................       int_count=INTS_PER_mS; 
0054:  MOVLW  13
0055:  MOVWF  2A
....................     } 
....................  
.................... } 
....................  
.................... //#int_EXT 
0056:  BCF    0B.2
0057:  BCF    0A.3
0058:  BCF    0A.4
0059:  GOTO   01D
.................... void rayCrossed_isr() 
.................... { 
....................  /*  x++; 
....................    switch(y) 
....................    { 
....................    case 0: 
....................      // OUTPUT_LOW(PIN_B7); 
....................       OUTPUT_HIGH(PIN_B7); 
....................       break; 
....................  
....................    case 1: 
....................       delay_ms(8); 
....................      // OUTPUT_HIGH(PIN_B7); 
....................       OUTPUT_LOW(PIN_B7); 
....................       delay_ms(2); 
....................     //  OUTPUT_LOW(PIN_B7); 
....................      OUTPUT_HIGH(PIN_B7); 
....................       break; 
....................  
....................    case 2: 
....................       delay_ms(5); 
....................       //OUTPUT_HIGH(PIN_B7); 
....................       OUTPUT_LOW(PIN_B7); 
....................       delay_ms(5); 
....................      // OUTPUT_LOW(PIN_B7); 
....................       OUTPUT_HIGH(PIN_B7); 
....................       break; 
....................  
....................    case 3: 
....................       delay_ms(2); 
....................      // OUTPUT_HIGH(PIN_B7); 
....................      OUTPUT_LOW(PIN_B7); 
....................       delay_ms(8); 
....................      // OUTPUT_LOW(PIN_B7); 
....................       OUTPUT_HIGH(PIN_B7); 
....................       break; 
....................  
....................    case 4: 
....................      // OUTPUT_HIGH(PIN_B7); 
....................       OUTPUT_LOW(PIN_B7); 
....................       break; 
....................    }*/ 
.................... } 
....................  
....................  
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
....................    set_timer0(0); 
....................    mseconds=0; 
.................... } 
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
....................    { 
....................       return 1; 
....................    } 
....................    else 
....................    { 
....................       return 0; 
....................    } 
.................... } 
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................           temperature =read_temperature(); 
....................           lcd_display(temperature,13,2); 
.................... } 
....................  
.................... int convertToASCII(int16 number) 
.................... { 
....................    return (number+48); 
.................... } 
....................  
.................... void lcd_display(int16 number, int x, int y) 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition =number % 10; 
....................        tensPosition = ((number - (number % 10))%100)/10; 
....................        hundredsPosition = ((number - (number%100))%1000)/100; 
....................  
....................        lcd_gotoxy(x,y); 
....................        lcd_putc(convertToASCII(hundredsPosition)); 
....................        lcd_putc(convertToASCII(tensPosition)); 
....................        lcd_putc(convertToASCII(unitsPosition)); 
.................... } 
....................  
.................... int16 read_temperature() 
.................... { 
....................     delay_ms(500);                  //a small delay is required after setting the channel 
....................     t = read_adc(); 
....................     return convertToCelsius(); 
.................... } 
....................  
.................... void initialDisplay() 
.................... { 
....................      delay_ms(25); 
*
01A3:  MOVLW  19
01A4:  MOVWF  3A
01A5:  CALL   0CA
....................      lcd_init(); 
....................     // delay_ms(6); 
....................  
....................     lcd_gotoxy(1,1); 
*
01D3:  MOVLW  01
01D4:  MOVWF  3A
01D5:  MOVWF  3B
01D6:  CALL   16C
....................    lcd_putc("level:"); 
01D7:  CLRF   38
01D8:  MOVF   38,W
01D9:  CALL   03B
01DA:  IORLW  00
01DB:  BTFSC  03.2
01DC:  GOTO   1E1
01DD:  INCF   38,F
01DE:  MOVWF  39
01DF:  CALL   17E
01E0:  GOTO   1D8
01E1:  MOVWF  39
01E2:  CALL   17E
....................    lcd_gotoxy(1,2); 
01E3:  MOVLW  01
01E4:  MOVWF  3A
01E5:  MOVLW  02
01E6:  MOVWF  3B
01E7:  CALL   16C
....................    lcd_putc("int:"); 
01E8:  CLRF   38
01E9:  MOVF   38,W
01EA:  CALL   046
01EB:  IORLW  00
01EC:  BTFSC  03.2
01ED:  GOTO   1F2
01EE:  INCF   38,F
01EF:  MOVWF  39
01F0:  CALL   17E
01F1:  GOTO   1E9
01F2:  MOVWF  39
01F3:  CALL   17E
....................  
....................  /*    lcd_gotoxy(1,1); 
....................      lcd_putc("*****CSE'10*****"); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("||||||||||||||||"); 
....................      delay_ms(2000); 
....................      lcd_gotoxy(1,1); 
....................      lcd_putc("\fNumberInside:"); 
....................      lcd_display(noOfPeople,14,1); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("Temperature:   C");*/ 
....................  
.................... } 
01F4:  BCF    0A.3
01F5:  BCF    0A.4
01F6:  GOTO   219 (RETURN)
....................  
.................... void init_pic() 
.................... { 
....................    setup_adc_ports(AN0); 
*
005A:  BSF    03.5
005B:  BCF    1F.0
005C:  BSF    1F.1
005D:  BSF    1F.2
005E:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
005F:  BCF    1F.6
0060:  BCF    03.5
0061:  BCF    1F.6
0062:  BSF    1F.7
0063:  BSF    03.5
0064:  BSF    1F.7
0065:  BCF    03.5
0066:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0067:  BSF    03.5
0068:  BCF    09.4
....................    setup_spi(FALSE); 
0069:  BCF    03.5
006A:  BCF    14.5
006B:  BCF    37.5
006C:  MOVF   37,W
006D:  BSF    03.5
006E:  MOVWF  07
006F:  BCF    03.5
0070:  BSF    37.4
0071:  MOVF   37,W
0072:  BSF    03.5
0073:  MOVWF  07
0074:  BCF    03.5
0075:  BCF    37.3
0076:  MOVF   37,W
0077:  BSF    03.5
0078:  MOVWF  07
0079:  MOVLW  00
007A:  BCF    03.5
007B:  MOVWF  14
007C:  BSF    03.5
007D:  MOVWF  14
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
007E:  MOVLW  08
007F:  MOVWF  77
0080:  BTFSS  77.3
0081:  GOTO   08D
0082:  MOVLW  07
0083:  BCF    03.5
0084:  CLRF   01
0085:  MOVLW  81
0086:  MOVWF  04
0087:  BCF    03.7
0088:  MOVF   00,W
0089:  ANDLW  C0
008A:  IORLW  0F
008B:  MOVWF  00
008C:  BSF    03.5
008D:  CLRWDT
008E:  MOVLW  81
008F:  MOVWF  04
0090:  MOVF   00,W
0091:  ANDLW  C0
0092:  IORWF  77,W
0093:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
0094:  BCF    03.5
0095:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0096:  MOVLW  00
0097:  MOVWF  78
0098:  MOVWF  12
0099:  MOVLW  00
009A:  BSF    03.5
009B:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
009C:  MOVLW  07
009D:  MOVWF  1C
009E:  MOVF   05,W
009F:  MOVLW  10
00A0:  MOVWF  77
00A1:  DECFSZ 77,F
00A2:  GOTO   0A1
00A3:  NOP
00A4:  MOVF   1C,W
00A5:  BCF    03.5
00A6:  BCF    0D.6
....................    setup_vref(FALSE); 
00A7:  BSF    03.5
00A8:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
00A9:  BCF    03.5
00AA:  BSF    0B.5
....................   // enable_interrupts(INT_EXT); 
....................    enable_interrupts(GLOBAL); 
00AB:  MOVLW  C0
00AC:  IORWF  0B,F
....................  
....................   // EXT_INT_EDGE(L_TO_H); 
....................  
....................    OUTPUT_B(0); 
00AD:  BSF    03.5
00AE:  CLRF   06
00AF:  BCF    03.5
00B0:  CLRF   06
....................    OUTPUT_C(0); 
00B1:  MOVLW  00
00B2:  MOVWF  37
00B3:  BSF    03.5
00B4:  CLRF   07
00B5:  BCF    03.5
00B6:  CLRF   07
....................  
....................    SET_TRIS_B(0b00000001);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
00B7:  MOVLW  01
00B8:  BSF    03.5
00B9:  MOVWF  06
....................    SET_TRIS_C(0b00011111); 
00BA:  MOVLW  1F
00BB:  MOVWF  07
00BC:  BCF    03.5
00BD:  MOVWF  37
....................    SET_TRIS_D(0b00000000); 
00BE:  MOVLW  00
00BF:  BSF    03.5
00C0:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
00C1:  MOVWF  78
00C2:  BCF    03.5
00C3:  MOVF   1F,W
00C4:  ANDLW  C7
00C5:  IORWF  78,W
00C6:  MOVWF  1F
.................... } 
00C7:  BCF    0A.3
00C8:  BCF    0A.4
00C9:  GOTO   218 (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
