CCS PCM C Compiler, Version 4.013, 28193               11-Jul-12 15:20

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing8_for_fan-a.lst

               ROM used: 507 words (6%)
                         Largest free fragment is 2048
               RAM used: 30 (8%) at main() level
                         37 (10%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   18A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   03B
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
00B7:  MOVLW  39
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  MOVF   00,W
00BB:  BTFSC  03.2
00BC:  GOTO   0CA
00BD:  MOVLW  06
00BE:  MOVWF  78
00BF:  CLRF   77
00C0:  DECFSZ 77,F
00C1:  GOTO   0C0
00C2:  DECFSZ 78,F
00C3:  GOTO   0BF
00C4:  MOVLW  7B
00C5:  MOVWF  77
00C6:  DECFSZ 77,F
00C7:  GOTO   0C6
00C8:  DECFSZ 00,F
00C9:  GOTO   0BD
00CA:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 2000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 4    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
00CB:  BTFSC  3D.0
00CC:  GOTO   0CF
00CD:  BCF    08.4
00CE:  GOTO   0D0
00CF:  BSF    08.4
00D0:  BSF    03.5
00D1:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
00D2:  BCF    03.5
00D3:  BTFSC  3D.1
00D4:  GOTO   0D7
00D5:  BCF    08.5
00D6:  GOTO   0D8
00D7:  BSF    08.5
00D8:  BSF    03.5
00D9:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
00DA:  BCF    03.5
00DB:  BTFSC  3D.2
00DC:  GOTO   0DF
00DD:  BCF    08.6
00DE:  GOTO   0E0
00DF:  BSF    08.6
00E0:  BSF    03.5
00E1:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
00E2:  BCF    03.5
00E3:  BTFSC  3D.3
00E4:  GOTO   0E7
00E5:  BCF    08.7
00E6:  GOTO   0E8
00E7:  BSF    08.7
00E8:  BSF    03.5
00E9:  BCF    08.7
....................   
....................  delay_cycles(1);  
00EA:  NOP
....................  output_high(LCD_E);  
00EB:  BCF    08.3
00EC:  BCF    03.5
00ED:  BSF    08.3
....................  delay_us(2);  
00EE:  MOVLW  03
00EF:  MOVWF  77
00F0:  DECFSZ 77,F
00F1:  GOTO   0F0
....................  output_low(LCD_E);  
00F2:  BSF    03.5
00F3:  BCF    08.3
00F4:  BCF    03.5
00F5:  BCF    08.3
.................... }  
00F6:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
00F7:  CLRF   3E
....................      
.................... output_high(LCD_E);  
00F8:  BSF    03.5
00F9:  BCF    08.3
00FA:  BCF    03.5
00FB:  BSF    08.3
.................... delay_cycles(1);  
00FC:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
00FD:  BSF    03.5
00FE:  BSF    08.4
00FF:  BCF    03.5
0100:  BCF    3E.0
0101:  BTFSC  08.4
0102:  BSF    3E.0
.................... retval_1 = input(LCD_DB5);  
0103:  BSF    03.5
0104:  BSF    08.5
0105:  BCF    03.5
0106:  BCF    3E.1
0107:  BTFSC  08.5
0108:  BSF    3E.1
.................... retval_2 = input(LCD_DB6);  
0109:  BSF    03.5
010A:  BSF    08.6
010B:  BCF    03.5
010C:  BCF    3E.2
010D:  BTFSC  08.6
010E:  BSF    3E.2
.................... retval_3 = input(LCD_DB7);  
010F:  BSF    03.5
0110:  BSF    08.7
0111:  BCF    03.5
0112:  BCF    3E.3
0113:  BTFSC  08.7
0114:  BSF    3E.3
....................    
.................... output_low(LCD_E);  
0115:  BSF    03.5
0116:  BCF    08.3
0117:  BCF    03.5
0118:  BCF    08.3
....................      
.................... return(retval);     
0119:  MOVF   3E,W
011A:  MOVWF  78
.................... }     
011B:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
014D:  BSF    03.5
014E:  BCF    08.2
014F:  BCF    03.5
0150:  BSF    08.2
.................... delay_cycles(1);  
0151:  NOP
....................  
.................... high = lcd_read_nibble();  
0152:  CALL   0F7
0153:  MOVF   78,W
0154:  MOVWF  3D
....................  
.................... low = lcd_read_nibble();  
0155:  CALL   0F7
0156:  MOVF   78,W
0157:  MOVWF  3C
....................  
.................... return( (high<<4) | low);  
0158:  SWAPF  3D,W
0159:  MOVWF  77
015A:  MOVLW  F0
015B:  ANDWF  77,F
015C:  MOVF   77,W
015D:  IORWF  3C,W
015E:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
0149:  BSF    03.5
014A:  BCF    08.1
014B:  BCF    03.5
014C:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
015F:  MOVF   78,W
0160:  MOVWF  3C
0161:  BTFSC  3C.7
0162:  GOTO   14D
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
0163:  MOVF   3A,F
0164:  BTFSC  03.2
0165:  GOTO   16B
....................    output_high(LCD_RS);  
0166:  BSF    03.5
0167:  BCF    08.1
0168:  BCF    03.5
0169:  BSF    08.1
.................... else  
016A:  GOTO   16F
....................    output_low(LCD_RS);  
016B:  BSF    03.5
016C:  BCF    08.1
016D:  BCF    03.5
016E:  BCF    08.1
....................        
....................  delay_cycles(1);  
016F:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
0170:  BSF    03.5
0171:  BCF    08.2
0172:  BCF    03.5
0173:  BCF    08.2
.................... delay_cycles(1);  
0174:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
0175:  BSF    03.5
0176:  BCF    08.3
0177:  BCF    03.5
0178:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
0179:  SWAPF  3B,W
017A:  MOVWF  3C
017B:  MOVLW  0F
017C:  ANDWF  3C,F
017D:  MOVF   3C,W
017E:  MOVWF  3D
017F:  CALL   0CB
.................... lcd_send_nibble(n & 0xf);  
0180:  MOVF   3B,W
0181:  ANDLW  0F
0182:  MOVWF  3C
0183:  MOVWF  3D
0184:  CALL   0CB
.................... }  
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
011F:  BSF    03.5
0120:  BCF    08.1
0121:  BCF    03.5
0122:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
0123:  BSF    03.5
0124:  BCF    08.2
0125:  BCF    03.5
0126:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
0127:  BSF    03.5
0128:  BCF    08.3
0129:  BCF    03.5
012A:  BCF    08.3
....................  
.................... delay_ms(15);  
012B:  MOVLW  0F
012C:  MOVWF  39
012D:  CALL   0B7
....................  
.................... for(i=0 ;i < 3; i++)  
012E:  CLRF   38
012F:  MOVF   38,W
0130:  SUBLW  02
0131:  BTFSS  03.0
0132:  GOTO   13B
....................    {  
....................     lcd_send_nibble(0x03);  
0133:  MOVLW  03
0134:  MOVWF  3D
0135:  CALL   0CB
....................     delay_ms(5);  
0136:  MOVLW  05
0137:  MOVWF  39
0138:  CALL   0B7
....................    }  
0139:  INCF   38,F
013A:  GOTO   12F
....................  
.................... lcd_send_nibble(0x02);  
013B:  MOVLW  02
013C:  MOVWF  3D
013D:  CALL   0CB
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
013E:  CLRF   38
013F:  MOVF   38,W
0140:  SUBLW  03
0141:  BTFSS  03.0
0142:  GOTO   187
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
0143:  MOVF   38,W
0144:  CALL   033
0145:  MOVWF  39
0146:  CLRF   3A
0147:  MOVF   39,W
0148:  MOVWF  3B
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
*
0185:  INCF   38,F
0186:  GOTO   13F
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
....................    address = lcd_line_two;  
.................... else  
....................    address=0;  
.................... address += x-1;  
.................... lcd_send_byte(0, 0x80 | address);  
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
....................     case '\f':  
....................       lcd_send_byte(0,1);  
....................       delay_ms(2);  
....................       break;  
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
....................        break;  
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
....................        break;  
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
....................        break;  
....................    }  
.................... }  
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void init_pic(); 
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... int convertToASCII(int16 number); 
.................... void lcd_display(int16 number, int x, int y); 
.................... void initialDisplay(); 
.................... int16 read_temperature(); 
.................... void lcd_display_temperature(); 
....................  
.................... int16 noOfPeople = 1;    // Number of people inside the room 
*
019D:  MOVLW  01
019E:  BCF    03.5
019F:  MOVWF  28
01A0:  CLRF   29
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
01A1:  BCF    2E.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
01A2:  BCF    2E.1
....................  
.................... int16 mseconds =0; 
01A3:  CLRF   2F
01A4:  CLRF   30
....................  
.................... int16 temperature;     // The A/D conversion of the analog input 
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int16 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
.................... int1 yChanged = 1; 
01A5:  BSF    2E.2
....................  
.................... int y=1; 
01A6:  MOVWF  35
.................... int x=0; 
01A7:  CLRF   36
....................  
.................... void main() 
.................... { 
*
018A:  CLRF   04
018B:  BCF    03.7
018C:  MOVLW  1F
018D:  ANDWF  03,F
018E:  MOVLW  81
018F:  BSF    03.5
0190:  MOVWF  19
0191:  MOVLW  A6
0192:  MOVWF  18
0193:  MOVLW  90
0194:  BCF    03.5
0195:  MOVWF  18
0196:  BSF    03.5
0197:  BSF    1F.0
0198:  BSF    1F.1
0199:  BSF    1F.2
019A:  BCF    1F.3
019B:  MOVLW  07
019C:  MOVWF  1C
....................    init_pic(); 
*
01AA:  GOTO   046
....................  
....................      initialDisplay(); 
01AB:  GOTO   11C
....................  
....................        while(1) 
....................        { 
....................           if(INPUT(PIN_C0)) 
*
01A8:  MOVLW  FF
01A9:  MOVWF  37
*
01AC:  BSF    37.0
01AD:  MOVF   37,W
01AE:  BSF    03.5
01AF:  MOVWF  07
01B0:  BCF    03.5
01B1:  BTFSS  07.0
01B2:  GOTO   1B5
....................           { 
....................              y=0; 
01B3:  CLRF   35
....................           } 
....................           else if(INPUT(PIN_C1)) 
01B4:  GOTO   1C8
01B5:  BSF    37.1
01B6:  MOVF   37,W
01B7:  BSF    03.5
01B8:  MOVWF  07
01B9:  BCF    03.5
01BA:  BTFSS  07.1
01BB:  GOTO   1BF
....................           { 
....................              Y=1; 
01BC:  MOVLW  01
01BD:  MOVWF  35
....................           } 
....................           else if(INPUT(PIN_C2)) 
01BE:  GOTO   1C8
01BF:  BSF    37.2
01C0:  MOVF   37,W
01C1:  BSF    03.5
01C2:  MOVWF  07
01C3:  BCF    03.5
01C4:  BTFSS  07.2
01C5:  GOTO   1C8
....................           { 
....................              y=2; 
01C6:  MOVLW  02
01C7:  MOVWF  35
....................           } 
....................  
....................       if(INPUT(PIN_B0) && yChanged) 
01C8:  BSF    03.5
01C9:  BSF    06.0
01CA:  BCF    03.5
01CB:  BTFSS  06.0
01CC:  GOTO   1F3
01CD:  BTFSS  2E.2
01CE:  GOTO   1F3
....................       { 
....................           yChanged = 0; 
01CF:  BCF    2E.2
....................           switch(y) 
....................          { 
01D0:  MOVF   35,W
01D1:  BTFSC  03.2
01D2:  GOTO   1DA
01D3:  XORLW  01
01D4:  BTFSC  03.2
01D5:  GOTO   1DF
01D6:  XORLW  03
01D7:  BTFSC  03.2
01D8:  GOTO   1EE
01D9:  GOTO   1F3
....................             case 0: 
....................                 OUTPUT_HIGH(PIN_B7); 
01DA:  BSF    03.5
01DB:  BCF    06.7
01DC:  BCF    03.5
01DD:  BSF    06.7
....................                 break; 
01DE:  GOTO   1F3
....................  
....................             case 1: 
....................                delay_ms(5); 
01DF:  MOVLW  05
01E0:  MOVWF  39
01E1:  CALL   0B7
....................                OUTPUT_LOW(PIN_B7); 
01E2:  BSF    03.5
01E3:  BCF    06.7
01E4:  BCF    03.5
01E5:  BCF    06.7
....................                delay_ms(5); 
01E6:  MOVLW  05
01E7:  MOVWF  39
01E8:  CALL   0B7
....................                OUTPUT_HIGH(PIN_B7); 
01E9:  BSF    03.5
01EA:  BCF    06.7
01EB:  BCF    03.5
01EC:  BSF    06.7
....................                break; 
01ED:  GOTO   1F3
....................  
....................             case 2: 
....................                OUTPUT_LOW(PIN_B7); 
01EE:  BSF    03.5
01EF:  BCF    06.7
01F0:  BCF    03.5
01F1:  BCF    06.7
....................                break; 
01F2:  GOTO   1F3
....................          } 
....................       } 
....................  
....................        if(!INPUT(PIN_B0)) 
01F3:  BSF    03.5
01F4:  BSF    06.0
01F5:  BCF    03.5
01F6:  BTFSC  06.0
01F7:  GOTO   1F9
....................        { 
....................          yChanged = 1; 
01F8:  BSF    2E.2
....................        } 
....................  
....................        } 
01F9:  GOTO   1AC
....................  
.................... } 
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
01FA:  SLEEP
....................  
....................     if(--int_count==0) 
*
003B:  DECFSZ 2A,F
003C:  GOTO   042
....................     { 
....................       ++mseconds; 
003D:  INCF   2F,F
003E:  BTFSC  03.2
003F:  INCF   30,F
....................       int_count=INTS_PER_mS; 
0040:  MOVLW  13
0041:  MOVWF  2A
....................     } 
....................  
.................... } 
....................  
.................... /*#int_EXT 
.................... void rayCrossed_isr() 
.................... { 
.................... }*/ 
....................  
....................  
0042:  BCF    0B.2
0043:  BCF    0A.3
0044:  BCF    0A.4
0045:  GOTO   01D
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
....................    set_timer0(0); 
....................    mseconds=0; 
.................... } 
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
....................    { 
....................       return 1; 
....................    } 
....................    else 
....................    { 
....................       return 0; 
....................    } 
.................... } 
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................           temperature =read_temperature(); 
....................           lcd_display(temperature,13,2); 
.................... } 
....................  
.................... int convertToASCII(int16 number) 
.................... { 
....................    return (number+48); 
.................... } 
....................  
.................... void lcd_display(int16 number, int x, int y) 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition =number % 10; 
....................        tensPosition = ((number - (number % 10))%100)/10; 
....................        hundredsPosition = ((number - (number%100))%1000)/100; 
....................  
....................        lcd_gotoxy(x,y); 
....................        lcd_putc(convertToASCII(hundredsPosition)); 
....................        lcd_putc(convertToASCII(tensPosition)); 
....................        lcd_putc(convertToASCII(unitsPosition)); 
.................... } 
....................  
.................... int16 read_temperature() 
.................... { 
....................     delay_ms(500);                  //a small delay is required after setting the channel 
....................     t = read_adc(); 
....................     return convertToCelsius(); 
.................... } 
....................  
.................... void initialDisplay() 
.................... { 
....................      delay_ms(25); 
*
011C:  MOVLW  19
011D:  MOVWF  39
011E:  CALL   0B7
....................      lcd_init(); 
....................     // delay_ms(6); 
....................  
.................... /*    lcd_gotoxy(1,1); 
....................    lcd_putc("level:"); 
....................    lcd_gotoxy(1,2); 
....................    lcd_putc("int:");*/ 
....................  
....................  /*    lcd_gotoxy(1,1); 
....................      lcd_putc("*****CSE'10*****"); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("||||||||||||||||"); 
....................      delay_ms(2000); 
....................      lcd_gotoxy(1,1); 
....................      lcd_putc("\fNumberInside:"); 
....................      lcd_display(noOfPeople,14,1); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("Temperature:   C");*/ 
....................  
.................... } 
*
0187:  BCF    0A.3
0188:  BCF    0A.4
0189:  GOTO   1AC (RETURN)
....................  
.................... void init_pic() 
.................... { 
....................    setup_adc_ports(AN0); 
*
0046:  BSF    03.5
0047:  BCF    1F.0
0048:  BSF    1F.1
0049:  BSF    1F.2
004A:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
004B:  BCF    1F.6
004C:  BCF    03.5
004D:  BCF    1F.6
004E:  BSF    1F.7
004F:  BSF    03.5
0050:  BSF    1F.7
0051:  BCF    03.5
0052:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0053:  BSF    03.5
0054:  BCF    09.4
....................    setup_spi(FALSE); 
0055:  BCF    03.5
0056:  BCF    14.5
0057:  BCF    37.5
0058:  MOVF   37,W
0059:  BSF    03.5
005A:  MOVWF  07
005B:  BCF    03.5
005C:  BSF    37.4
005D:  MOVF   37,W
005E:  BSF    03.5
005F:  MOVWF  07
0060:  BCF    03.5
0061:  BCF    37.3
0062:  MOVF   37,W
0063:  BSF    03.5
0064:  MOVWF  07
0065:  MOVLW  00
0066:  BCF    03.5
0067:  MOVWF  14
0068:  BSF    03.5
0069:  MOVWF  14
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
006A:  MOVLW  08
006B:  MOVWF  77
006C:  BTFSS  77.3
006D:  GOTO   079
006E:  MOVLW  07
006F:  BCF    03.5
0070:  CLRF   01
0071:  MOVLW  81
0072:  MOVWF  04
0073:  BCF    03.7
0074:  MOVF   00,W
0075:  ANDLW  C0
0076:  IORLW  0F
0077:  MOVWF  00
0078:  BSF    03.5
0079:  CLRWDT
007A:  MOVLW  81
007B:  MOVWF  04
007C:  MOVF   00,W
007D:  ANDLW  C0
007E:  IORWF  77,W
007F:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
0080:  BCF    03.5
0081:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0082:  MOVLW  00
0083:  MOVWF  78
0084:  MOVWF  12
0085:  MOVLW  00
0086:  BSF    03.5
0087:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
0088:  MOVLW  07
0089:  MOVWF  1C
008A:  MOVF   05,W
008B:  MOVLW  10
008C:  MOVWF  77
008D:  DECFSZ 77,F
008E:  GOTO   08D
008F:  NOP
0090:  MOVF   1C,W
0091:  BCF    03.5
0092:  BCF    0D.6
....................    setup_vref(FALSE); 
0093:  BSF    03.5
0094:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
0095:  BCF    03.5
0096:  BSF    0B.5
....................  //  enable_interrupts(INT_EXT); 
....................    enable_interrupts(GLOBAL); 
0097:  MOVLW  C0
0098:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
0099:  BSF    03.5
009A:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
009B:  CLRF   06
009C:  BCF    03.5
009D:  CLRF   06
....................    OUTPUT_C(0); 
009E:  MOVLW  00
009F:  MOVWF  37
00A0:  BSF    03.5
00A1:  CLRF   07
00A2:  BCF    03.5
00A3:  CLRF   07
....................  
....................    SET_TRIS_B(0b00000001);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
00A4:  MOVLW  01
00A5:  BSF    03.5
00A6:  MOVWF  06
....................    SET_TRIS_C(0b00011111); 
00A7:  MOVLW  1F
00A8:  MOVWF  07
00A9:  BCF    03.5
00AA:  MOVWF  37
....................    SET_TRIS_D(0b00000000); 
00AB:  MOVLW  00
00AC:  BSF    03.5
00AD:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
00AE:  MOVWF  78
00AF:  BCF    03.5
00B0:  MOVF   1F,W
00B1:  ANDLW  C7
00B2:  IORWF  78,W
00B3:  MOVWF  1F
.................... } 
00B4:  BCF    0A.3
00B5:  BCF    0A.4
00B6:  GOTO   1AB (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
