CCS PCM C Compiler, Version 4.013, 28193               11-Jul-12 16:28

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing7_for_fan-a.lst

               ROM used: 523 words (6%)
                         Largest free fragment is 2048
               RAM used: 31 (8%) at main() level
                         39 (11%) worst case
               Stack:    4 worst case (2 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1CC
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   034
001D:  BTFSS  0B.4
001E:  GOTO   021
001F:  BTFSC  0B.1
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   042
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   061
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
004D:  MOVLW  40
004E:  MOVWF  04
004F:  BCF    03.7
0050:  MOVF   00,W
0051:  BTFSC  03.2
0052:  GOTO   060
0053:  MOVLW  06
0054:  MOVWF  78
0055:  CLRF   77
0056:  DECFSZ 77,F
0057:  GOTO   056
0058:  DECFSZ 78,F
0059:  GOTO   055
005A:  MOVLW  7B
005B:  MOVWF  77
005C:  DECFSZ 77,F
005D:  GOTO   05C
005E:  DECFSZ 00,F
005F:  GOTO   053
0060:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 2000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 4    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
*
00FB:  BTFSC  3E.0
00FC:  GOTO   0FF
00FD:  BCF    08.4
00FE:  GOTO   100
00FF:  BSF    08.4
0100:  BSF    03.5
0101:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
0102:  BCF    03.5
0103:  BTFSC  3E.1
0104:  GOTO   107
0105:  BCF    08.5
0106:  GOTO   108
0107:  BSF    08.5
0108:  BSF    03.5
0109:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
010A:  BCF    03.5
010B:  BTFSC  3E.2
010C:  GOTO   10F
010D:  BCF    08.6
010E:  GOTO   110
010F:  BSF    08.6
0110:  BSF    03.5
0111:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0112:  BCF    03.5
0113:  BTFSC  3E.3
0114:  GOTO   117
0115:  BCF    08.7
0116:  GOTO   118
0117:  BSF    08.7
0118:  BSF    03.5
0119:  BCF    08.7
....................   
....................  delay_cycles(1);  
011A:  NOP
....................  output_high(LCD_E);  
011B:  BCF    08.3
011C:  BCF    03.5
011D:  BSF    08.3
....................  delay_us(2);  
011E:  MOVLW  03
011F:  MOVWF  77
0120:  DECFSZ 77,F
0121:  GOTO   120
....................  output_low(LCD_E);  
0122:  BSF    03.5
0123:  BCF    08.3
0124:  BCF    03.5
0125:  BCF    08.3
.................... }  
0126:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
0127:  CLRF   3F
....................      
.................... output_high(LCD_E);  
0128:  BSF    03.5
0129:  BCF    08.3
012A:  BCF    03.5
012B:  BSF    08.3
.................... delay_cycles(1);  
012C:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
012D:  BSF    03.5
012E:  BSF    08.4
012F:  BCF    03.5
0130:  BCF    3F.0
0131:  BTFSC  08.4
0132:  BSF    3F.0
.................... retval_1 = input(LCD_DB5);  
0133:  BSF    03.5
0134:  BSF    08.5
0135:  BCF    03.5
0136:  BCF    3F.1
0137:  BTFSC  08.5
0138:  BSF    3F.1
.................... retval_2 = input(LCD_DB6);  
0139:  BSF    03.5
013A:  BSF    08.6
013B:  BCF    03.5
013C:  BCF    3F.2
013D:  BTFSC  08.6
013E:  BSF    3F.2
.................... retval_3 = input(LCD_DB7);  
013F:  BSF    03.5
0140:  BSF    08.7
0141:  BCF    03.5
0142:  BCF    3F.3
0143:  BTFSC  08.7
0144:  BSF    3F.3
....................    
.................... output_low(LCD_E);  
0145:  BSF    03.5
0146:  BCF    08.3
0147:  BCF    03.5
0148:  BCF    08.3
....................      
.................... return(retval);     
0149:  MOVF   3F,W
014A:  MOVWF  78
.................... }     
014B:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
018F:  BSF    03.5
0190:  BCF    08.2
0191:  BCF    03.5
0192:  BSF    08.2
.................... delay_cycles(1);  
0193:  NOP
....................  
.................... high = lcd_read_nibble();  
0194:  CALL   127
0195:  MOVF   78,W
0196:  MOVWF  3E
....................  
.................... low = lcd_read_nibble();  
0197:  CALL   127
0198:  MOVF   78,W
0199:  MOVWF  3D
....................  
.................... return( (high<<4) | low);  
019A:  SWAPF  3E,W
019B:  MOVWF  77
019C:  MOVLW  F0
019D:  ANDWF  77,F
019E:  MOVF   77,W
019F:  IORWF  3D,W
01A0:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
018B:  BSF    03.5
018C:  BCF    08.1
018D:  BCF    03.5
018E:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
01A1:  MOVF   78,W
01A2:  MOVWF  3D
01A3:  BTFSC  3D.7
01A4:  GOTO   18F
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
01A5:  MOVF   3B,F
01A6:  BTFSC  03.2
01A7:  GOTO   1AD
....................    output_high(LCD_RS);  
01A8:  BSF    03.5
01A9:  BCF    08.1
01AA:  BCF    03.5
01AB:  BSF    08.1
.................... else  
01AC:  GOTO   1B1
....................    output_low(LCD_RS);  
01AD:  BSF    03.5
01AE:  BCF    08.1
01AF:  BCF    03.5
01B0:  BCF    08.1
....................        
....................  delay_cycles(1);  
01B1:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
01B2:  BSF    03.5
01B3:  BCF    08.2
01B4:  BCF    03.5
01B5:  BCF    08.2
.................... delay_cycles(1);  
01B6:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
01B7:  BSF    03.5
01B8:  BCF    08.3
01B9:  BCF    03.5
01BA:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
01BB:  SWAPF  3C,W
01BC:  MOVWF  3D
01BD:  MOVLW  0F
01BE:  ANDWF  3D,F
01BF:  MOVF   3D,W
01C0:  MOVWF  3E
01C1:  CALL   0FB
.................... lcd_send_nibble(n & 0xf);  
01C2:  MOVF   3C,W
01C3:  ANDLW  0F
01C4:  MOVWF  3D
01C5:  MOVWF  3E
01C6:  CALL   0FB
.................... }  
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
0155:  BSF    03.5
0156:  BCF    08.1
0157:  BCF    03.5
0158:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
0159:  BSF    03.5
015A:  BCF    08.2
015B:  BCF    03.5
015C:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
015D:  BSF    03.5
015E:  BCF    08.3
015F:  BCF    03.5
0160:  BCF    08.3
0161:  CLRF   28
0162:  BTFSC  0B.7
0163:  BSF    28.7
0164:  BCF    0B.7
....................  
.................... delay_ms(15);  
0165:  MOVLW  0F
0166:  MOVWF  40
0167:  CALL   04D
0168:  BTFSC  28.7
0169:  BSF    0B.7
....................  
.................... for(i=0 ;i < 3; i++)  
016A:  CLRF   39
016B:  MOVF   39,W
016C:  SUBLW  02
016D:  BTFSS  03.0
016E:  GOTO   17D
....................    {  
....................     lcd_send_nibble(0x03);  
016F:  MOVLW  03
0170:  MOVWF  3E
0171:  CALL   0FB
0172:  CLRF   28
0173:  BTFSC  0B.7
0174:  BSF    28.7
0175:  BCF    0B.7
....................     delay_ms(5);  
0176:  MOVLW  05
0177:  MOVWF  40
0178:  CALL   04D
0179:  BTFSC  28.7
017A:  BSF    0B.7
....................    }  
017B:  INCF   39,F
017C:  GOTO   16B
....................  
.................... lcd_send_nibble(0x02);  
017D:  MOVLW  02
017E:  MOVWF  3E
017F:  CALL   0FB
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
0180:  CLRF   39
0181:  MOVF   39,W
0182:  SUBLW  03
0183:  BTFSS  03.0
0184:  GOTO   1C9
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
0185:  MOVF   39,W
0186:  CALL   03A
0187:  MOVWF  3A
0188:  CLRF   3B
0189:  MOVF   3A,W
018A:  MOVWF  3C
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
*
01C7:  INCF   39,F
01C8:  GOTO   181
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
....................    address = lcd_line_two;  
.................... else  
....................    address=0;  
.................... address += x-1;  
.................... lcd_send_byte(0, 0x80 | address);  
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
....................     case '\f':  
....................       lcd_send_byte(0,1);  
....................       delay_ms(2);  
....................       break;  
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
....................        break;  
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
....................        break;  
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
....................        break;  
....................    }  
.................... }  
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void init_pic(); 
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... int convertToASCII(int16 number); 
.................... void lcd_display(int16 number, int x, int y); 
.................... void initialDisplay(); 
.................... int16 read_temperature(); 
.................... void lcd_display_temperature(); 
....................  
.................... int16 noOfPeople = 1;    // Number of people inside the room 
*
01DF:  MOVLW  01
01E0:  BCF    03.5
01E1:  MOVWF  29
01E2:  CLRF   2A
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
01E3:  BCF    2F.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
01E4:  BCF    2F.1
....................  
.................... int16 mseconds =0; 
01E5:  CLRF   30
01E6:  CLRF   31
....................  
.................... int16 temperature;     // The A/D conversion of the analog input 
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int16 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
....................  
.................... int y=1; 
01E7:  MOVWF  36
.................... int x=0; 
01E8:  CLRF   37
....................  
.................... void main() 
.................... { 
*
01CC:  CLRF   04
01CD:  BCF    03.7
01CE:  MOVLW  1F
01CF:  ANDWF  03,F
01D0:  MOVLW  81
01D1:  BSF    03.5
01D2:  MOVWF  19
01D3:  MOVLW  A6
01D4:  MOVWF  18
01D5:  MOVLW  90
01D6:  BCF    03.5
01D7:  MOVWF  18
01D8:  BSF    03.5
01D9:  BSF    1F.0
01DA:  BSF    1F.1
01DB:  BSF    1F.2
01DC:  BCF    1F.3
01DD:  MOVLW  07
01DE:  MOVWF  1C
....................    init_pic(); 
*
01EB:  GOTO   089
....................  
....................      initialDisplay(); 
01EC:  GOTO   14C
....................  
....................        while(1) 
....................        { 
....................           if(INPUT(PIN_C0)) 
*
01E9:  MOVLW  FF
01EA:  MOVWF  38
*
01ED:  BSF    38.0
01EE:  MOVF   38,W
01EF:  BSF    03.5
01F0:  MOVWF  07
01F1:  BCF    03.5
01F2:  BTFSS  07.0
01F3:  GOTO   1F6
....................           { 
....................              y=0; 
01F4:  CLRF   36
....................           } 
....................           else if(INPUT(PIN_C1)) 
01F5:  GOTO   209
01F6:  BSF    38.1
01F7:  MOVF   38,W
01F8:  BSF    03.5
01F9:  MOVWF  07
01FA:  BCF    03.5
01FB:  BTFSS  07.1
01FC:  GOTO   200
....................           { 
....................              Y=1; 
01FD:  MOVLW  01
01FE:  MOVWF  36
....................           } 
....................           else if(INPUT(PIN_C2)) 
01FF:  GOTO   209
0200:  BSF    38.2
0201:  MOVF   38,W
0202:  BSF    03.5
0203:  MOVWF  07
0204:  BCF    03.5
0205:  BTFSS  07.2
0206:  GOTO   209
....................           { 
....................              y=2; 
0207:  MOVLW  02
0208:  MOVWF  36
....................           } 
....................        } 
0209:  GOTO   1ED
....................  
.................... } 
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
020A:  SLEEP
....................  
....................     if(--int_count==0) 
*
0042:  DECFSZ 2B,F
0043:  GOTO   049
....................     { 
....................       ++mseconds; 
0044:  INCF   30,F
0045:  BTFSC  03.2
0046:  INCF   31,F
....................       int_count=INTS_PER_mS; 
0047:  MOVLW  13
0048:  MOVWF  2B
....................     } 
....................  
.................... } 
....................  
0049:  BCF    0B.2
004A:  BCF    0A.3
004B:  BCF    0A.4
004C:  GOTO   021
.................... #int_EXT 
.................... void rayCrossed_isr() 
.................... { 
....................    switch(y) 
....................    { 
*
0061:  MOVF   36,W
0062:  XORLW  00
0063:  BTFSC  03.2
0064:  GOTO   06C
0065:  XORLW  01
0066:  BTFSC  03.2
0067:  GOTO   071
0068:  XORLW  03
0069:  BTFSC  03.2
006A:  GOTO   080
006B:  GOTO   085
....................    case 0: 
....................       OUTPUT_HIGH(PIN_B7); 
006C:  BSF    03.5
006D:  BCF    06.7
006E:  BCF    03.5
006F:  BSF    06.7
....................       break; 
0070:  GOTO   085
....................  
....................    case 1: 
....................       delay_ms(5); 
0071:  MOVLW  05
0072:  MOVWF  40
0073:  CALL   04D
....................       OUTPUT_LOW(PIN_B7); 
0074:  BSF    03.5
0075:  BCF    06.7
0076:  BCF    03.5
0077:  BCF    06.7
....................       delay_ms(5); 
0078:  MOVLW  05
0079:  MOVWF  40
007A:  CALL   04D
....................       OUTPUT_HIGH(PIN_B7); 
007B:  BSF    03.5
007C:  BCF    06.7
007D:  BCF    03.5
007E:  BSF    06.7
....................       break; 
007F:  GOTO   085
....................  
....................    case 2: 
....................       OUTPUT_LOW(PIN_B7); 
0080:  BSF    03.5
0081:  BCF    06.7
0082:  BCF    03.5
0083:  BCF    06.7
....................       break; 
0084:  GOTO   085
....................    } 
.................... } 
....................  
....................  
0085:  BCF    0B.1
0086:  BCF    0A.3
0087:  BCF    0A.4
0088:  GOTO   021
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
....................    set_timer0(0); 
....................    mseconds=0; 
.................... } 
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
....................    { 
....................       return 1; 
....................    } 
....................    else 
....................    { 
....................       return 0; 
....................    } 
.................... } 
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................           temperature =read_temperature(); 
....................           lcd_display(temperature,13,2); 
.................... } 
....................  
.................... int convertToASCII(int16 number) 
.................... { 
....................    return (number+48); 
.................... } 
....................  
.................... void lcd_display(int16 number, int x, int y) 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition =number % 10; 
....................        tensPosition = ((number - (number % 10))%100)/10; 
....................        hundredsPosition = ((number - (number%100))%1000)/100; 
....................  
....................        lcd_gotoxy(x,y); 
....................        lcd_putc(convertToASCII(hundredsPosition)); 
....................        lcd_putc(convertToASCII(tensPosition)); 
....................        lcd_putc(convertToASCII(unitsPosition)); 
.................... } 
....................  
.................... int16 read_temperature() 
.................... { 
....................     delay_ms(500);                  //a small delay is required after setting the channel 
....................     t = read_adc(); 
....................     return convertToCelsius(); 
.................... } 
....................  
.................... void initialDisplay() 
.................... { 
*
014C:  CLRF   28
014D:  BTFSC  0B.7
014E:  BSF    28.7
014F:  BCF    0B.7
....................      delay_ms(25); 
0150:  MOVLW  19
0151:  MOVWF  40
0152:  CALL   04D
0153:  BTFSC  28.7
0154:  BSF    0B.7
....................      lcd_init(); 
....................     // delay_ms(6); 
....................  
....................  /*   lcd_gotoxy(1,1); 
....................    lcd_putc("level:"); 
....................    lcd_gotoxy(1,2); 
....................    lcd_putc("int:");*/ 
....................  
....................  /*    lcd_gotoxy(1,1); 
....................      lcd_putc("*****CSE'10*****"); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("||||||||||||||||"); 
....................      delay_ms(2000); 
....................      lcd_gotoxy(1,1); 
....................      lcd_putc("\fNumberInside:"); 
....................      lcd_display(noOfPeople,14,1); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("Temperature:   C");*/ 
....................  
.................... } 
*
01C9:  BCF    0A.3
01CA:  BCF    0A.4
01CB:  GOTO   1ED (RETURN)
....................  
.................... void init_pic() 
.................... { 
....................    setup_adc_ports(AN0); 
*
0089:  BSF    03.5
008A:  BCF    1F.0
008B:  BSF    1F.1
008C:  BSF    1F.2
008D:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
008E:  BCF    1F.6
008F:  BCF    03.5
0090:  BCF    1F.6
0091:  BSF    1F.7
0092:  BSF    03.5
0093:  BSF    1F.7
0094:  BCF    03.5
0095:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0096:  BSF    03.5
0097:  BCF    09.4
....................    setup_spi(FALSE); 
0098:  BCF    03.5
0099:  BCF    14.5
009A:  BCF    38.5
009B:  MOVF   38,W
009C:  BSF    03.5
009D:  MOVWF  07
009E:  BCF    03.5
009F:  BSF    38.4
00A0:  MOVF   38,W
00A1:  BSF    03.5
00A2:  MOVWF  07
00A3:  BCF    03.5
00A4:  BCF    38.3
00A5:  MOVF   38,W
00A6:  BSF    03.5
00A7:  MOVWF  07
00A8:  MOVLW  00
00A9:  BCF    03.5
00AA:  MOVWF  14
00AB:  BSF    03.5
00AC:  MOVWF  14
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
00AD:  MOVLW  08
00AE:  MOVWF  77
00AF:  BTFSS  77.3
00B0:  GOTO   0BC
00B1:  MOVLW  07
00B2:  BCF    03.5
00B3:  CLRF   01
00B4:  MOVLW  81
00B5:  MOVWF  04
00B6:  BCF    03.7
00B7:  MOVF   00,W
00B8:  ANDLW  C0
00B9:  IORLW  0F
00BA:  MOVWF  00
00BB:  BSF    03.5
00BC:  CLRWDT
00BD:  MOVLW  81
00BE:  MOVWF  04
00BF:  MOVF   00,W
00C0:  ANDLW  C0
00C1:  IORWF  77,W
00C2:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
00C3:  BCF    03.5
00C4:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
00C5:  MOVLW  00
00C6:  MOVWF  78
00C7:  MOVWF  12
00C8:  MOVLW  00
00C9:  BSF    03.5
00CA:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
00CB:  MOVLW  07
00CC:  MOVWF  1C
00CD:  MOVF   05,W
00CE:  MOVLW  10
00CF:  MOVWF  77
00D0:  DECFSZ 77,F
00D1:  GOTO   0D0
00D2:  NOP
00D3:  MOVF   1C,W
00D4:  BCF    03.5
00D5:  BCF    0D.6
....................    setup_vref(FALSE); 
00D6:  BSF    03.5
00D7:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
00D8:  BCF    03.5
00D9:  BSF    0B.5
....................    enable_interrupts(INT_EXT); 
00DA:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
00DB:  MOVLW  C0
00DC:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
00DD:  BSF    03.5
00DE:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
00DF:  CLRF   06
00E0:  BCF    03.5
00E1:  CLRF   06
....................    OUTPUT_C(0); 
00E2:  MOVLW  00
00E3:  MOVWF  38
00E4:  BSF    03.5
00E5:  CLRF   07
00E6:  BCF    03.5
00E7:  CLRF   07
....................  
....................    SET_TRIS_B(0b00000001);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
00E8:  MOVLW  01
00E9:  BSF    03.5
00EA:  MOVWF  06
....................    SET_TRIS_C(0b00011111); 
00EB:  MOVLW  1F
00EC:  MOVWF  07
00ED:  BCF    03.5
00EE:  MOVWF  38
....................    SET_TRIS_D(0b00000000); 
00EF:  MOVLW  00
00F0:  BSF    03.5
00F1:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
00F2:  MOVWF  78
00F3:  BCF    03.5
00F4:  MOVF   1F,W
00F5:  ANDLW  C7
00F6:  IORWF  78,W
00F7:  MOVWF  1F
.................... } 
00F8:  BCF    0A.3
00F9:  BCF    0A.4
00FA:  GOTO   1EC (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
