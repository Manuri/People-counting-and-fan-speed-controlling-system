CCS PCM C Compiler, Version 4.013, 28193               13-Jul-12 19:38

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing3+adc_a.lst

               ROM used: 1190 words (15%)
                         Largest free fragment is 2048
               RAM used: 30 (8%) at main() level
                         49 (13%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   395
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   034
001D:  BTFSS  0B.4
001E:  GOTO   021
001F:  BTFSC  0B.1
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   094
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   0BE
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
015D:  MOVLW  41
015E:  MOVWF  04
015F:  BCF    03.7
0160:  MOVF   00,W
0161:  BTFSC  03.2
0162:  GOTO   170
0163:  MOVLW  06
0164:  MOVWF  78
0165:  CLRF   77
0166:  DECFSZ 77,F
0167:  GOTO   166
0168:  DECFSZ 78,F
0169:  GOTO   165
016A:  MOVLW  7B
016B:  MOVWF  77
016C:  DECFSZ 77,F
016D:  GOTO   16C
016E:  DECFSZ 00,F
016F:  GOTO   163
0170:  RETLW  00
*
02D9:  MOVLW  03
02DA:  SUBWF  39,F
02DB:  BTFSS  03.0
02DC:  GOTO   2E7
02DD:  MOVLW  39
02DE:  MOVWF  04
02DF:  BCF    03.7
02E0:  MOVF   00,W
02E1:  BTFSC  03.2
02E2:  GOTO   2E7
02E3:  GOTO   2E5
02E4:  GOTO   2E5
02E5:  DECFSZ 00,F
02E6:  GOTO   2E4
02E7:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 2000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 4    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
*
0171:  BTFSC  48.0
0172:  GOTO   175
0173:  BCF    08.4
0174:  GOTO   176
0175:  BSF    08.4
0176:  BSF    03.5
0177:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
0178:  BCF    03.5
0179:  BTFSC  48.1
017A:  GOTO   17D
017B:  BCF    08.5
017C:  GOTO   17E
017D:  BSF    08.5
017E:  BSF    03.5
017F:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0180:  BCF    03.5
0181:  BTFSC  48.2
0182:  GOTO   185
0183:  BCF    08.6
0184:  GOTO   186
0185:  BSF    08.6
0186:  BSF    03.5
0187:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0188:  BCF    03.5
0189:  BTFSC  48.3
018A:  GOTO   18D
018B:  BCF    08.7
018C:  GOTO   18E
018D:  BSF    08.7
018E:  BSF    03.5
018F:  BCF    08.7
....................   
....................  delay_cycles(1);  
0190:  NOP
....................  output_high(LCD_E);  
0191:  BCF    08.3
0192:  BCF    03.5
0193:  BSF    08.3
....................  delay_us(2);  
0194:  MOVLW  03
0195:  MOVWF  77
0196:  DECFSZ 77,F
0197:  GOTO   196
....................  output_low(LCD_E);  
0198:  BSF    03.5
0199:  BCF    08.3
019A:  BCF    03.5
019B:  BCF    08.3
.................... }  
019C:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
019D:  CLRF   49
....................      
.................... output_high(LCD_E);  
019E:  BSF    03.5
019F:  BCF    08.3
01A0:  BCF    03.5
01A1:  BSF    08.3
.................... delay_cycles(1);  
01A2:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
01A3:  BSF    03.5
01A4:  BSF    08.4
01A5:  BCF    03.5
01A6:  BCF    49.0
01A7:  BTFSC  08.4
01A8:  BSF    49.0
.................... retval_1 = input(LCD_DB5);  
01A9:  BSF    03.5
01AA:  BSF    08.5
01AB:  BCF    03.5
01AC:  BCF    49.1
01AD:  BTFSC  08.5
01AE:  BSF    49.1
.................... retval_2 = input(LCD_DB6);  
01AF:  BSF    03.5
01B0:  BSF    08.6
01B1:  BCF    03.5
01B2:  BCF    49.2
01B3:  BTFSC  08.6
01B4:  BSF    49.2
.................... retval_3 = input(LCD_DB7);  
01B5:  BSF    03.5
01B6:  BSF    08.7
01B7:  BCF    03.5
01B8:  BCF    49.3
01B9:  BTFSC  08.7
01BA:  BSF    49.3
....................    
.................... output_low(LCD_E);  
01BB:  BSF    03.5
01BC:  BCF    08.3
01BD:  BCF    03.5
01BE:  BCF    08.3
....................      
.................... return(retval);     
01BF:  MOVF   49,W
01C0:  MOVWF  78
.................... }     
01C1:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
01C6:  BSF    03.5
01C7:  BCF    08.2
01C8:  BCF    03.5
01C9:  BSF    08.2
.................... delay_cycles(1);  
01CA:  NOP
....................  
.................... high = lcd_read_nibble();  
01CB:  CALL   19D
01CC:  MOVF   78,W
01CD:  MOVWF  48
....................  
.................... low = lcd_read_nibble();  
01CE:  CALL   19D
01CF:  MOVF   78,W
01D0:  MOVWF  47
....................  
.................... return( (high<<4) | low);  
01D1:  SWAPF  48,W
01D2:  MOVWF  77
01D3:  MOVLW  F0
01D4:  ANDWF  77,F
01D5:  MOVF   77,W
01D6:  IORWF  47,W
01D7:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
01C2:  BSF    03.5
01C3:  BCF    08.1
01C4:  BCF    03.5
01C5:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
01D8:  MOVF   78,W
01D9:  MOVWF  47
01DA:  BTFSC  47.7
01DB:  GOTO   1C6
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
01DC:  MOVF   45,F
01DD:  BTFSC  03.2
01DE:  GOTO   1E4
....................    output_high(LCD_RS);  
01DF:  BSF    03.5
01E0:  BCF    08.1
01E1:  BCF    03.5
01E2:  BSF    08.1
.................... else  
01E3:  GOTO   1E8
....................    output_low(LCD_RS);  
01E4:  BSF    03.5
01E5:  BCF    08.1
01E6:  BCF    03.5
01E7:  BCF    08.1
....................        
....................  delay_cycles(1);  
01E8:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
01E9:  BSF    03.5
01EA:  BCF    08.2
01EB:  BCF    03.5
01EC:  BCF    08.2
.................... delay_cycles(1);  
01ED:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
01EE:  BSF    03.5
01EF:  BCF    08.3
01F0:  BCF    03.5
01F1:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
01F2:  SWAPF  46,W
01F3:  MOVWF  47
01F4:  MOVLW  0F
01F5:  ANDWF  47,F
01F6:  MOVF   47,W
01F7:  MOVWF  48
01F8:  CALL   171
.................... lcd_send_nibble(n & 0xf);  
01F9:  MOVF   46,W
01FA:  ANDLW  0F
01FB:  MOVWF  47
01FC:  MOVWF  48
01FD:  CALL   171
.................... }  
01FE:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
03BD:  BSF    03.5
03BE:  BCF    08.1
03BF:  BCF    03.5
03C0:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
03C1:  BSF    03.5
03C2:  BCF    08.2
03C3:  BCF    03.5
03C4:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
03C5:  BSF    03.5
03C6:  BCF    08.3
03C7:  BCF    03.5
03C8:  BCF    08.3
....................  
.................... delay_ms(15);  
03C9:  MOVLW  0F
03CA:  MOVWF  41
03CB:  CALL   15D
....................  
.................... for(i=0 ;i < 3; i++)  
03CC:  CLRF   38
03CD:  MOVF   38,W
03CE:  SUBLW  02
03CF:  BTFSS  03.0
03D0:  GOTO   3D9
....................    {  
....................     lcd_send_nibble(0x03);  
03D1:  MOVLW  03
03D2:  MOVWF  48
03D3:  CALL   171
....................     delay_ms(5);  
03D4:  MOVLW  05
03D5:  MOVWF  41
03D6:  CALL   15D
....................    }  
03D7:  INCF   38,F
03D8:  GOTO   3CD
....................  
.................... lcd_send_nibble(0x02);  
03D9:  MOVLW  02
03DA:  MOVWF  48
03DB:  CALL   171
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
03DC:  CLRF   38
03DD:  MOVF   38,W
03DE:  SUBLW  03
03DF:  BTFSS  03.0
03E0:  GOTO   3EA
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
03E1:  MOVF   38,W
03E2:  CALL   03A
03E3:  MOVWF  39
03E4:  CLRF   45
03E5:  MOVF   39,W
03E6:  MOVWF  46
03E7:  CALL   1C2
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
03E8:  INCF   38,F
03E9:  GOTO   3DD
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
01FF:  DECFSZ 42,W
0200:  GOTO   202
0201:  GOTO   205
....................    address = lcd_line_two;  
0202:  MOVLW  40
0203:  MOVWF  43
.................... else  
0204:  GOTO   206
....................    address=0;  
0205:  CLRF   43
.................... address += x-1;  
0206:  MOVLW  01
0207:  SUBWF  41,W
0208:  ADDWF  43,F
.................... lcd_send_byte(0, 0x80 | address);  
0209:  MOVF   43,W
020A:  IORLW  80
020B:  MOVWF  44
020C:  CLRF   45
020D:  MOVF   44,W
020E:  MOVWF  46
020F:  CALL   1C2
.................... }  
0210:  RETLW  00
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
0211:  MOVF   40,W
0212:  XORLW  0C
0213:  BTFSC  03.2
0214:  GOTO   21C
0215:  XORLW  06
0216:  BTFSC  03.2
0217:  GOTO   224
0218:  XORLW  02
0219:  BTFSC  03.2
021A:  GOTO   22A
021B:  GOTO   22F
....................     case '\f':  
....................       lcd_send_byte(0,1);  
021C:  CLRF   45
021D:  MOVLW  01
021E:  MOVWF  46
021F:  CALL   1C2
....................       delay_ms(2);  
0220:  MOVLW  02
0221:  MOVWF  41
0222:  CALL   15D
....................       break;  
0223:  GOTO   235
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
0224:  MOVLW  01
0225:  MOVWF  41
0226:  MOVLW  02
0227:  MOVWF  42
0228:  CALL   1FF
....................        break;  
0229:  GOTO   235
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
022A:  CLRF   45
022B:  MOVLW  10
022C:  MOVWF  46
022D:  CALL   1C2
....................        break;  
022E:  GOTO   235
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
022F:  MOVLW  01
0230:  MOVWF  45
0231:  MOVF   40,W
0232:  MOVWF  46
0233:  CALL   1C2
....................        break;  
0234:  GOTO   235
....................    }  
.................... }  
0235:  RETLW  00
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void init_pic(); 
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... int convertToASCII(int16 number); 
.................... void lcd_display(int16 number, int x, int y); 
.................... void initialDisplay(); 
.................... int16 read_temperature(); 
.................... void lcd_display_temperature(); 
.................... void phaseControl(); 
....................  
.................... int16 noOfPeople = 1;    // Number of people inside the room 
*
03A8:  MOVLW  01
03A9:  BCF    03.5
03AA:  MOVWF  28
03AB:  CLRF   29
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
03AC:  BCF    2E.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
03AD:  BCF    2E.1
.................... int1 pin_changed = 1; 
03AE:  BSF    2E.2
.................... int1 number_changed = 1; 
03AF:  BSF    2E.3
....................  
.................... int16 mseconds =0; 
03B0:  CLRF   2F
03B1:  CLRF   30
.................... int16 counter_for_temp=0 ; 
03B2:  CLRF   31
03B3:  CLRF   32
....................  
.................... int16 temperature=31;     // The A/D conversion of the analog input 
03B4:  MOVLW  1F
03B5:  MOVWF  33
03B6:  CLRF   34
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int16 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
....................  
.................... void main() 
.................... { 
*
0395:  CLRF   04
0396:  BCF    03.7
0397:  MOVLW  1F
0398:  ANDWF  03,F
0399:  MOVLW  81
039A:  BSF    03.5
039B:  MOVWF  19
039C:  MOVLW  A6
039D:  MOVWF  18
039E:  MOVLW  90
039F:  BCF    03.5
03A0:  MOVWF  18
03A1:  BSF    03.5
03A2:  BSF    1F.0
03A3:  BSF    1F.1
03A4:  BSF    1F.2
03A5:  BCF    1F.3
03A6:  MOVLW  07
03A7:  MOVWF  1C
....................  
....................  /*  setup_adc_ports(AN0); 
....................    setup_adc(ADC_CLOCK_DIV_32); 
....................    setup_psp(PSP_DISABLED); 
....................    setup_spi(FALSE); 
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
....................    setup_timer_1(T1_DISABLED); 
....................    setup_timer_2(T2_DISABLED,0,1); 
....................    setup_comparator(NC_NC_NC_NC); 
....................    setup_vref(FALSE); 
....................    enable_interrupts(INT_RTCC); 
....................    enable_interrupts(INT_EXT); 
....................    enable_interrupts(GLOBAL); 
....................  
....................    EXT_INT_EDGE(L_TO_H); 
....................  
....................    OUTPUT_B(0); 
....................    OUTPUT_C(0); 
....................  
....................    SET_TRIS_B(0b00000111);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
....................    SET_TRIS_C(0b00000000); 
....................    SET_TRIS_D(0b00000000); 
....................  
....................    set_adc_channel(0); */           //the next read_adc call will read channel 0 
....................  
....................    init_pic(); 
*
03B9:  GOTO   0EC
....................  
....................      initialDisplay(); 
....................     // OUTPUT_HIGH(PIN_C0); 
....................     // OUTPUT_LOW(PIN_C1); 
....................  
....................    OUTPUT_HIGH(PIN_C0); 
*
03B7:  MOVLW  FF
03B8:  MOVWF  37
*
043C:  BCF    37.0
043D:  MOVF   37,W
043E:  BSF    03.5
043F:  MOVWF  07
0440:  BCF    03.5
0441:  BSF    07.0
....................    OUTPUT_HIGH(PIN_C2); 
0442:  BCF    37.2
0443:  MOVF   37,W
0444:  BSF    03.5
0445:  MOVWF  07
0446:  BCF    03.5
0447:  BSF    07.2
....................    OUTPUT_LOW(PIN_C3); 
0448:  BCF    37.3
0449:  MOVF   37,W
044A:  BSF    03.5
044B:  MOVWF  07
044C:  BCF    03.5
044D:  BCF    07.3
....................  
....................        while(1) 
....................        { 
....................            phaseControl(); 
044E:  GOTO   2E8
....................          if(number_changed) 
044F:  BTFSS  2E.3
0450:  GOTO   45B
....................          { 
....................             lcd_display(noOfPeople,14,1); 
0451:  MOVF   29,W
0452:  MOVWF  39
0453:  MOVF   28,W
0454:  MOVWF  38
0455:  MOVLW  0E
0456:  MOVWF  3A
0457:  MOVLW  01
0458:  MOVWF  3B
0459:  CALL   264
....................             number_changed = 0; 
045A:  BCF    2E.3
....................          } 
....................  
....................          if(counter_for_temp == 10000) 
045B:  MOVF   31,W
045C:  SUBLW  10
045D:  BTFSS  03.2
045E:  GOTO   4A1
045F:  MOVF   32,W
0460:  SUBLW  27
0461:  BTFSS  03.2
0462:  GOTO   4A1
....................          { 
....................             lcd_display_temperature(); 
....................             counter_for_temp=0; 
*
049F:  CLRF   32
04A0:  CLRF   31
....................          } 
....................          counter_for_temp++; 
04A1:  INCF   31,F
04A2:  BTFSC  03.2
04A3:  INCF   32,F
....................  
....................        } 
04A4:  GOTO   44E
....................  
.................... } 
....................  
....................  
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
04A5:  SLEEP
....................  
....................     if(--int_count==0) 
*
0094:  DECFSZ 2A,F
0095:  GOTO   09B
....................     { 
....................       ++mseconds; 
0096:  INCF   2F,F
0097:  BTFSC  03.2
0098:  INCF   30,F
....................       int_count=INTS_PER_mS; 
0099:  MOVLW  13
009A:  MOVWF  2A
....................     } 
....................  
.................... } 
....................  
009B:  BCF    0B.2
009C:  BCF    0A.3
009D:  BCF    0A.4
009E:  GOTO   021
.................... #int_EXT 
.................... void rayCrossed_isr() 
.................... { 
....................    if(INPUT(PIN_B2)&& rayTwo!=1) 
*
00BE:  BSF    03.5
00BF:  BSF    06.2
00C0:  BCF    03.5
00C1:  BTFSS  06.2
00C2:  GOTO   0D3
00C3:  BTFSC  2E.1
00C4:  GOTO   0D3
....................    { 
....................       rayTwo = 1; 
00C5:  BSF    2E.1
....................       if(rayOne == 1) 
00C6:  BTFSS  2E.0
00C7:  GOTO   0D1
....................       { 
....................          if(checkTimer() == 1) 
00C8:  CALL   09F
00C9:  DECFSZ 78,W
00CA:  GOTO   0CF
....................          { 
....................             noOfPeople++ ; 
00CB:  INCF   28,F
00CC:  BTFSC  03.2
00CD:  INCF   29,F
....................             number_changed = 1; 
00CE:  BSF    2E.3
....................          } 
....................          rayOne = 0; 
00CF:  BCF    2E.0
....................          rayTwo = 0; 
00D0:  BCF    2E.1
....................       } 
....................       setTimer(); 
00D1:  CALL   0B8
....................    } 
....................   else  if(INPUT(PIN_B1)&& rayOne!=1) 
00D2:  GOTO   0E8
00D3:  BSF    03.5
00D4:  BSF    06.1
00D5:  BCF    03.5
00D6:  BTFSS  06.1
00D7:  GOTO   0E8
00D8:  BTFSC  2E.0
00D9:  GOTO   0E8
....................    { 
....................       rayOne = 1; 
00DA:  BSF    2E.0
....................       if(rayTwo == 1) 
00DB:  BTFSS  2E.1
00DC:  GOTO   0E7
....................       { 
....................          if(checkTimer() == 1) 
00DD:  CALL   09F
00DE:  DECFSZ 78,W
00DF:  GOTO   0E5
....................          { 
....................             noOfPeople-- ; 
00E0:  MOVF   28,W
00E1:  BTFSC  03.2
00E2:  DECF   29,F
00E3:  DECF   28,F
....................             number_changed = 1; 
00E4:  BSF    2E.3
....................          } 
....................          rayOne = 0; 
00E5:  BCF    2E.0
....................          rayTwo = 0; 
00E6:  BCF    2E.1
....................       } 
....................       setTimer(); 
00E7:  CALL   0B8
....................    } 
....................    delay_ms(MIN_DELAY_BETWEEN_TWO_INTERRUPTS/2); 
....................    //OUTPUT_HIGH(PIN_B7); 
....................    delay_ms(MIN_DELAY_BETWEEN_TWO_INTERRUPTS/2); 
....................    //OUTPUT_LOW(PIN_B7); 
....................  } 
....................  
....................  
00E8:  BCF    0B.1
00E9:  BCF    0A.3
00EA:  BCF    0A.4
00EB:  GOTO   021
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
*
00B8:  MOVLW  13
00B9:  MOVWF  2A
....................    set_timer0(0); 
00BA:  CLRF   01
....................    mseconds=0; 
00BB:  CLRF   30
00BC:  CLRF   2F
.................... } 
00BD:  RETLW  00
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
*
009F:  MOVF   30,W
00A0:  SUBLW  07
00A1:  BTFSS  03.0
00A2:  GOTO   0B4
00A3:  BTFSS  03.2
00A4:  GOTO   0A9
00A5:  MOVF   2F,W
00A6:  SUBLW  D0
00A7:  BTFSS  03.0
00A8:  GOTO   0B4
00A9:  MOVF   30,F
00AA:  BTFSS  03.2
00AB:  GOTO   0B0
00AC:  MOVF   2F,W
00AD:  SUBLW  03
00AE:  BTFSC  03.0
00AF:  GOTO   0B4
....................    { 
....................       return 1; 
00B0:  MOVLW  01
00B1:  MOVWF  78
00B2:  GOTO   0B7
....................    } 
....................    else 
00B3:  GOTO   0B7
....................    { 
....................       return 0; 
00B4:  MOVLW  00
00B5:  MOVWF  78
00B6:  GOTO   0B7
....................    } 
.................... } 
00B7:  RETLW  00
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
*
0471:  MOVF   36,W
0472:  MOVWF  39
0473:  MOVF   35,W
0474:  MOVWF  38
0475:  CLRF   3B
0476:  MOVLW  96
0477:  MOVWF  3A
0478:  GOTO   37E
0479:  MOVF   79,W
047A:  MOVWF  39
047B:  MOVF   78,W
047C:  MOVWF  38
047D:  MOVF   79,W
047E:  MOVWF  43
047F:  MOVF   78,W
0480:  MOVWF  42
0481:  MOVLW  01
0482:  MOVWF  45
0483:  MOVLW  33
0484:  MOVWF  44
0485:  CALL   236
0486:  MOVF   79,W
0487:  MOVWF  7A
0488:  MOVF   78,W
0489:  MOVWF  77
048A:  MOVF   79,W
048B:  MOVWF  78
048C:  CLRF   79
048D:  CLRF   7A
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................           temperature =read_temperature(); 
*
0492:  MOVF   79,W
0493:  MOVWF  34
0494:  MOVF   78,W
0495:  MOVWF  33
....................           lcd_display(temperature,13,2); 
0496:  MOVF   34,W
0497:  MOVWF  39
0498:  MOVF   33,W
0499:  MOVWF  38
049A:  MOVLW  0D
049B:  MOVWF  3A
049C:  MOVLW  02
049D:  MOVWF  3B
049E:  CALL   264
.................... } 
....................  
.................... int convertToASCII(int16 number) 
.................... { 
....................    return (number+48); 
*
025B:  MOVLW  30
025C:  ADDWF  3F,W
025D:  MOVWF  78
025E:  MOVF   40,W
025F:  MOVWF  7A
0260:  BTFSC  03.0
0261:  INCF   7A,F
0262:  MOVF   78,W
.................... } 
0263:  RETLW  00
....................  
.................... void lcd_display(int16 number, int x, int y) 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition =number % 10; 
0264:  MOVF   39,W
0265:  MOVWF  43
0266:  MOVF   38,W
0267:  MOVWF  42
0268:  CLRF   45
0269:  MOVLW  0A
026A:  MOVWF  44
026B:  CALL   236
026C:  MOVF   77,W
026D:  MOVWF  3C
....................        tensPosition = ((number - (number % 10))%100)/10; 
026E:  MOVF   39,W
026F:  MOVWF  43
0270:  MOVF   38,W
0271:  MOVWF  42
0272:  CLRF   45
0273:  MOVLW  0A
0274:  MOVWF  44
0275:  CALL   236
0276:  MOVF   77,W
0277:  SUBWF  38,W
0278:  MOVWF  3F
0279:  MOVF   39,W
027A:  MOVWF  40
027B:  MOVF   7A,W
027C:  BTFSS  03.0
027D:  INCFSZ 7A,W
027E:  SUBWF  40,F
027F:  MOVF   40,W
0280:  MOVWF  43
0281:  MOVF   3F,W
0282:  MOVWF  42
0283:  CLRF   45
0284:  MOVLW  64
0285:  MOVWF  44
0286:  CALL   236
0287:  MOVF   77,W
0288:  MOVWF  40
0289:  MOVF   7A,W
028A:  MOVWF  41
028B:  MOVWF  43
028C:  MOVF   77,W
028D:  MOVWF  42
028E:  CLRF   45
028F:  MOVLW  0A
0290:  MOVWF  44
0291:  CALL   236
0292:  MOVF   78,W
0293:  MOVWF  3D
....................        hundredsPosition = ((number - (number%100))%1000)/100; 
0294:  MOVF   39,W
0295:  MOVWF  43
0296:  MOVF   38,W
0297:  MOVWF  42
0298:  CLRF   45
0299:  MOVLW  64
029A:  MOVWF  44
029B:  CALL   236
029C:  MOVF   77,W
029D:  SUBWF  38,W
029E:  MOVWF  3F
029F:  MOVF   39,W
02A0:  MOVWF  40
02A1:  MOVF   7A,W
02A2:  BTFSS  03.0
02A3:  INCFSZ 7A,W
02A4:  SUBWF  40,F
02A5:  MOVF   40,W
02A6:  MOVWF  43
02A7:  MOVF   3F,W
02A8:  MOVWF  42
02A9:  MOVLW  03
02AA:  MOVWF  45
02AB:  MOVLW  E8
02AC:  MOVWF  44
02AD:  CALL   236
02AE:  MOVF   77,W
02AF:  MOVWF  40
02B0:  MOVF   7A,W
02B1:  MOVWF  41
02B2:  MOVWF  43
02B3:  MOVF   77,W
02B4:  MOVWF  42
02B5:  CLRF   45
02B6:  MOVLW  64
02B7:  MOVWF  44
02B8:  CALL   236
02B9:  MOVF   78,W
02BA:  MOVWF  3E
....................  
....................        lcd_gotoxy(x,y); 
02BB:  MOVF   3A,W
02BC:  MOVWF  41
02BD:  MOVF   3B,W
02BE:  MOVWF  42
02BF:  CALL   1FF
....................        lcd_putc(convertToASCII(hundredsPosition)); 
02C0:  CLRF   40
02C1:  MOVF   3E,W
02C2:  MOVWF  3F
02C3:  CALL   25B
02C4:  MOVF   78,W
02C5:  MOVWF  3F
02C6:  MOVWF  40
02C7:  CALL   211
....................        lcd_putc(convertToASCII(tensPosition)); 
02C8:  CLRF   40
02C9:  MOVF   3D,W
02CA:  MOVWF  3F
02CB:  CALL   25B
02CC:  MOVF   78,W
02CD:  MOVWF  3F
02CE:  MOVWF  40
02CF:  CALL   211
....................        lcd_putc(convertToASCII(unitsPosition)); 
02D0:  CLRF   40
02D1:  MOVF   3C,W
02D2:  MOVWF  3F
02D3:  CALL   25B
02D4:  MOVF   78,W
02D5:  MOVWF  3F
02D6:  MOVWF  40
02D7:  CALL   211
.................... } 
02D8:  RETLW  00
....................  
.................... int16 read_temperature() 
.................... { 
....................     delay_us(12);                  //a small delay is required after setting the channel 
*
0463:  MOVLW  13
0464:  MOVWF  77
0465:  DECFSZ 77,F
0466:  GOTO   465
0467:  GOTO   468
....................     t = read_adc(); 
0468:  BSF    1F.2
0469:  BTFSC  1F.2
046A:  GOTO   469
046B:  BSF    03.5
046C:  MOVF   1E,W
046D:  BCF    03.5
046E:  MOVWF  35
046F:  MOVF   1E,W
0470:  MOVWF  36
....................     return convertToCelsius(); 
*
048E:  MOVF   78,W
048F:  MOVWF  79
0490:  MOVF   77,W
0491:  MOVWF  78
.................... } 
....................  
.................... void initialDisplay() 
.................... { 
....................      delay_ms(25); 
*
03BA:  MOVLW  19
03BB:  MOVWF  41
03BC:  CALL   15D
....................      lcd_init(); 
....................     // delay_ms(6); 
....................  
....................      lcd_gotoxy(1,1); 
*
03EA:  MOVLW  01
03EB:  MOVWF  41
03EC:  MOVWF  42
03ED:  CALL   1FF
....................      lcd_putc("*****CSE'10*****"); 
03EE:  CLRF   38
03EF:  MOVF   38,W
03F0:  CALL   042
03F1:  IORLW  00
03F2:  BTFSC  03.2
03F3:  GOTO   3F8
03F4:  INCF   38,F
03F5:  MOVWF  40
03F6:  CALL   211
03F7:  GOTO   3EF
03F8:  MOVWF  40
03F9:  CALL   211
....................      lcd_gotoxy(1,2); 
03FA:  MOVLW  01
03FB:  MOVWF  41
03FC:  MOVLW  02
03FD:  MOVWF  42
03FE:  CALL   1FF
....................      lcd_putc("||||||||||||||||"); 
03FF:  CLRF   38
0400:  MOVF   38,W
0401:  CALL   057
0402:  IORLW  00
0403:  BTFSC  03.2
0404:  GOTO   409
0405:  INCF   38,F
0406:  MOVWF  40
0407:  CALL   211
0408:  GOTO   400
0409:  MOVWF  40
040A:  CALL   211
....................      delay_ms(2000); 
040B:  MOVLW  08
040C:  MOVWF  38
040D:  MOVLW  FA
040E:  MOVWF  41
040F:  CALL   15D
0410:  DECFSZ 38,F
0411:  GOTO   40D
....................      lcd_gotoxy(1,1); 
0412:  MOVLW  01
0413:  MOVWF  41
0414:  MOVWF  42
0415:  CALL   1FF
....................      lcd_putc("\fNumberInside:"); 
0416:  CLRF   38
0417:  MOVF   38,W
0418:  CALL   06C
0419:  IORLW  00
041A:  BTFSC  03.2
041B:  GOTO   420
041C:  INCF   38,F
041D:  MOVWF  40
041E:  CALL   211
041F:  GOTO   417
0420:  MOVWF  40
0421:  CALL   211
....................      lcd_display(noOfPeople,14,1); 
0422:  MOVF   29,W
0423:  MOVWF  39
0424:  MOVF   28,W
0425:  MOVWF  38
0426:  MOVLW  0E
0427:  MOVWF  3A
0428:  MOVLW  01
0429:  MOVWF  3B
042A:  CALL   264
....................      lcd_gotoxy(1,2); 
042B:  MOVLW  01
042C:  MOVWF  41
042D:  MOVLW  02
042E:  MOVWF  42
042F:  CALL   1FF
....................      lcd_putc("Temperature:   C"); 
0430:  CLRF   38
0431:  MOVF   38,W
0432:  CALL   07F
0433:  IORLW  00
0434:  BTFSC  03.2
0435:  GOTO   43A
0436:  INCF   38,F
0437:  MOVWF  40
0438:  CALL   211
0439:  GOTO   431
043A:  MOVWF  40
043B:  CALL   211
....................  
.................... } 
....................  
.................... void init_pic() 
.................... { 
....................    setup_adc_ports(AN0); 
*
00EC:  BSF    03.5
00ED:  BCF    1F.0
00EE:  BSF    1F.1
00EF:  BSF    1F.2
00F0:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
00F1:  BCF    1F.6
00F2:  BCF    03.5
00F3:  BCF    1F.6
00F4:  BSF    1F.7
00F5:  BSF    03.5
00F6:  BSF    1F.7
00F7:  BCF    03.5
00F8:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
00F9:  BSF    03.5
00FA:  BCF    09.4
....................    setup_spi(FALSE); 
00FB:  BCF    03.5
00FC:  BCF    14.5
00FD:  BCF    37.5
00FE:  MOVF   37,W
00FF:  BSF    03.5
0100:  MOVWF  07
0101:  BCF    03.5
0102:  BSF    37.4
0103:  MOVF   37,W
0104:  BSF    03.5
0105:  MOVWF  07
0106:  BCF    03.5
0107:  BCF    37.3
0108:  MOVF   37,W
0109:  BSF    03.5
010A:  MOVWF  07
010B:  MOVLW  00
010C:  BCF    03.5
010D:  MOVWF  14
010E:  BSF    03.5
010F:  MOVWF  14
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
0110:  MOVLW  08
0111:  MOVWF  77
0112:  BTFSS  77.3
0113:  GOTO   11F
0114:  MOVLW  07
0115:  BCF    03.5
0116:  CLRF   01
0117:  MOVLW  81
0118:  MOVWF  04
0119:  BCF    03.7
011A:  MOVF   00,W
011B:  ANDLW  C0
011C:  IORLW  0F
011D:  MOVWF  00
011E:  BSF    03.5
011F:  CLRWDT
0120:  MOVLW  81
0121:  MOVWF  04
0122:  MOVF   00,W
0123:  ANDLW  C0
0124:  IORWF  77,W
0125:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
0126:  BCF    03.5
0127:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0128:  MOVLW  00
0129:  MOVWF  78
012A:  MOVWF  12
012B:  MOVLW  00
012C:  BSF    03.5
012D:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
012E:  MOVLW  07
012F:  MOVWF  1C
0130:  MOVF   05,W
0131:  MOVLW  10
0132:  MOVWF  77
0133:  DECFSZ 77,F
0134:  GOTO   133
0135:  NOP
0136:  MOVF   1C,W
0137:  BCF    03.5
0138:  BCF    0D.6
....................    setup_vref(FALSE); 
0139:  BSF    03.5
013A:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
013B:  BCF    03.5
013C:  BSF    0B.5
....................    enable_interrupts(INT_EXT); 
013D:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
013E:  MOVLW  C0
013F:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
0140:  BSF    03.5
0141:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
0142:  CLRF   06
0143:  BCF    03.5
0144:  CLRF   06
....................    OUTPUT_C(0); 
0145:  MOVLW  00
0146:  MOVWF  37
0147:  BSF    03.5
0148:  CLRF   07
0149:  BCF    03.5
014A:  CLRF   07
....................  
....................    SET_TRIS_B(0b01000111);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
014B:  MOVLW  47
014C:  BSF    03.5
014D:  MOVWF  06
....................    SET_TRIS_C(0b00000000); 
014E:  MOVLW  00
014F:  MOVWF  07
0150:  BCF    03.5
0151:  MOVWF  37
....................    SET_TRIS_D(0b00000000); 
0152:  BSF    03.5
0153:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
0154:  MOVWF  78
0155:  BCF    03.5
0156:  MOVF   1F,W
0157:  ANDLW  C7
0158:  IORWF  78,W
0159:  MOVWF  1F
.................... } 
015A:  BCF    0A.3
015B:  BCF    0A.4
015C:  GOTO   3BA (RETURN)
....................  
.................... void phaseControl() 
.................... { 
....................  
....................  /*  switch(noOfPeople) 
....................    { 
....................  
....................    case 0 : OUTPUT_HIGH(PIN_B7); 
....................             break; 
....................  
....................    default : 
....................    if(INPUT(PIN_B6) && pin_changed == 1) 
....................    { 
....................          pin_changed = 0; 
....................          if(0<=temperature && temperature<20) 
....................          { 
....................             OUTPUT_HIGH(PIN_B7); 
....................          } 
....................        else if(temperature>=20&& temperature<35) 
....................        { 
....................            delay_ms(5); 
....................            OUTPUT_HIGH(PIN_B7); 
....................             delay_ms(5); 
....................             OUTPUT_LOW(PIN_B7); 
....................  
....................        } 
....................        else if(temperature>=35) 
....................        { 
....................             OUTPUT_LOW(PIN_B7); 
....................        } 
....................    } 
....................    //else if(!INPUT(PIN_B6) && pin_changed==0) pin_changed = 1; 
....................    if(!INPUT(PIN_B6)) pin_changed = 1; 
....................    }*/ 
....................  
....................     if(noOfPeople<1) 
*
02E8:  MOVF   28,F
02E9:  BTFSS  03.2
02EA:  GOTO   2F3
02EB:  MOVF   29,F
02EC:  BTFSS  03.2
02ED:  GOTO   2F3
....................    { 
....................       OUTPUT_HIGH(PIN_B7); 
02EE:  BSF    03.5
02EF:  BCF    06.7
02F0:  BCF    03.5
02F1:  BSF    06.7
....................       //OUTPUT_LOW(PIN_B7); 
....................    } 
....................    else 
02F2:  GOTO   37B
....................    { 
....................      // OUTPUT_LOW(PIN_B7); 
....................       if(INPUT(PIN_B6) && pin_changed == 1) 
02F3:  BSF    03.5
02F4:  BSF    06.6
02F5:  BCF    03.5
02F6:  BTFSS  06.6
02F7:  GOTO   375
02F8:  BTFSS  2E.2
02F9:  GOTO   375
....................       { 
....................  
....................          if(0<=temperature && temperature<20) 
02FA:  MOVF   34,F
02FB:  BTFSS  03.2
02FC:  GOTO   306
02FD:  MOVF   33,W
02FE:  SUBLW  13
02FF:  BTFSS  03.0
0300:  GOTO   306
....................          { 
....................             OUTPUT_HIGH(PIN_B7); 
0301:  BSF    03.5
0302:  BCF    06.7
0303:  BCF    03.5
0304:  BSF    06.7
....................          } 
....................        else if(temperature>=20&& temperature<25) 
0305:  GOTO   374
0306:  MOVF   34,F
0307:  BTFSS  03.2
0308:  GOTO   30D
0309:  MOVF   33,W
030A:  SUBLW  13
030B:  BTFSC  03.0
030C:  GOTO   327
030D:  MOVF   34,F
030E:  BTFSS  03.2
030F:  GOTO   327
0310:  MOVF   33,W
0311:  SUBLW  18
0312:  BTFSS  03.0
0313:  GOTO   327
....................        { 
....................             delay_us(7000); 
0314:  MOVLW  07
0315:  MOVWF  41
0316:  CALL   15D
....................             OUTPUT_LOW(PIN_B7); 
0317:  BSF    03.5
0318:  BCF    06.7
0319:  BCF    03.5
031A:  BCF    06.7
....................             delay_us(500); 
031B:  MOVLW  02
031C:  MOVWF  38
031D:  MOVLW  F9
031E:  MOVWF  39
031F:  CALL   2D9
0320:  DECFSZ 38,F
0321:  GOTO   31D
....................             OUTPUT_HIGH(PIN_B7); 
0322:  BSF    03.5
0323:  BCF    06.7
0324:  BCF    03.5
0325:  BSF    06.7
....................  
....................        } 
....................  
....................        else if(temperature>=25&& temperature<28) 
0326:  GOTO   374
0327:  MOVF   34,F
0328:  BTFSS  03.2
0329:  GOTO   32E
032A:  MOVF   33,W
032B:  SUBLW  18
032C:  BTFSC  03.0
032D:  GOTO   348
032E:  MOVF   34,F
032F:  BTFSS  03.2
0330:  GOTO   348
0331:  MOVF   33,W
0332:  SUBLW  1B
0333:  BTFSS  03.0
0334:  GOTO   348
....................        { 
....................            delay_us(6000); 
0335:  MOVLW  06
0336:  MOVWF  41
0337:  CALL   15D
....................             OUTPUT_LOW(PIN_B7); 
0338:  BSF    03.5
0339:  BCF    06.7
033A:  BCF    03.5
033B:  BCF    06.7
....................             delay_us(500); 
033C:  MOVLW  02
033D:  MOVWF  38
033E:  MOVLW  F9
033F:  MOVWF  39
0340:  CALL   2D9
0341:  DECFSZ 38,F
0342:  GOTO   33E
....................             OUTPUT_HIGH(PIN_B7); 
0343:  BSF    03.5
0344:  BCF    06.7
0345:  BCF    03.5
0346:  BSF    06.7
....................        } 
....................       else if(temperature>=28&& temperature<35) 
0347:  GOTO   374
0348:  MOVF   34,F
0349:  BTFSS  03.2
034A:  GOTO   34F
034B:  MOVF   33,W
034C:  SUBLW  1B
034D:  BTFSC  03.0
034E:  GOTO   369
034F:  MOVF   34,F
0350:  BTFSS  03.2
0351:  GOTO   369
0352:  MOVF   33,W
0353:  SUBLW  22
0354:  BTFSS  03.0
0355:  GOTO   369
....................        { 
....................            delay_us(5000); 
0356:  MOVLW  05
0357:  MOVWF  41
0358:  CALL   15D
....................             OUTPUT_LOW(PIN_B7); 
0359:  BSF    03.5
035A:  BCF    06.7
035B:  BCF    03.5
035C:  BCF    06.7
....................             delay_us(500); 
035D:  MOVLW  02
035E:  MOVWF  38
035F:  MOVLW  F9
0360:  MOVWF  39
0361:  CALL   2D9
0362:  DECFSZ 38,F
0363:  GOTO   35F
....................             OUTPUT_HIGH(PIN_B7); 
0364:  BSF    03.5
0365:  BCF    06.7
0366:  BCF    03.5
0367:  BSF    06.7
....................        } 
....................        else if(temperature>=35) 
0368:  GOTO   374
0369:  MOVF   34,F
036A:  BTFSS  03.2
036B:  GOTO   370
036C:  MOVF   33,W
036D:  SUBLW  22
036E:  BTFSC  03.0
036F:  GOTO   374
....................        { 
....................             OUTPUT_LOW(PIN_B7); 
0370:  BSF    03.5
0371:  BCF    06.7
0372:  BCF    03.5
0373:  BCF    06.7
....................        } 
....................         pin_changed = 0; 
0374:  BCF    2E.2
....................    } 
....................    if(!INPUT(PIN_B6)) 
0375:  BSF    03.5
0376:  BSF    06.6
0377:  BCF    03.5
0378:  BTFSC  06.6
0379:  GOTO   37B
....................    { 
....................       pin_changed = 1; 
037A:  BSF    2E.2
....................    } 
....................  
....................    } 
....................    } 
037B:  BCF    0A.3
037C:  BCF    0A.4
037D:  GOTO   44F (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
