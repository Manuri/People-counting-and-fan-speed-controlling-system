CCS PCM C Compiler, Version 4.013, 28193               12-Jul-12 13:06

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing4.lst

               ROM used: 1023 words (12%)
                         Largest free fragment is 2048
               RAM used: 29 (8%) at main() level
                         48 (13%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   2F9
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   034
001D:  BTFSS  0B.4
001E:  GOTO   021
001F:  BTFSC  0B.1
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   094
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   0D2
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
00BE:  MOVLW  49
00BF:  MOVWF  04
00C0:  BCF    03.7
00C1:  MOVF   00,W
00C2:  BTFSC  03.2
00C3:  GOTO   0D1
00C4:  MOVLW  06
00C5:  MOVWF  78
00C6:  CLRF   77
00C7:  DECFSZ 77,F
00C8:  GOTO   0C7
00C9:  DECFSZ 78,F
00CA:  GOTO   0C6
00CB:  MOVLW  7B
00CC:  MOVWF  77
00CD:  DECFSZ 77,F
00CE:  GOTO   0CD
00CF:  DECFSZ 00,F
00D0:  GOTO   0C4
00D1:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 2000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 4    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
*
0174:  BTFSC  47.0
0175:  GOTO   178
0176:  BCF    08.4
0177:  GOTO   179
0178:  BSF    08.4
0179:  BSF    03.5
017A:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
017B:  BCF    03.5
017C:  BTFSC  47.1
017D:  GOTO   180
017E:  BCF    08.5
017F:  GOTO   181
0180:  BSF    08.5
0181:  BSF    03.5
0182:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0183:  BCF    03.5
0184:  BTFSC  47.2
0185:  GOTO   188
0186:  BCF    08.6
0187:  GOTO   189
0188:  BSF    08.6
0189:  BSF    03.5
018A:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
018B:  BCF    03.5
018C:  BTFSC  47.3
018D:  GOTO   190
018E:  BCF    08.7
018F:  GOTO   191
0190:  BSF    08.7
0191:  BSF    03.5
0192:  BCF    08.7
....................   
....................  delay_cycles(1);  
0193:  NOP
....................  output_high(LCD_E);  
0194:  BCF    08.3
0195:  BCF    03.5
0196:  BSF    08.3
....................  delay_us(2);  
0197:  MOVLW  03
0198:  MOVWF  77
0199:  DECFSZ 77,F
019A:  GOTO   199
....................  output_low(LCD_E);  
019B:  BSF    03.5
019C:  BCF    08.3
019D:  BCF    03.5
019E:  BCF    08.3
.................... }  
019F:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
01A0:  CLRF   48
....................      
.................... output_high(LCD_E);  
01A1:  BSF    03.5
01A2:  BCF    08.3
01A3:  BCF    03.5
01A4:  BSF    08.3
.................... delay_cycles(1);  
01A5:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
01A6:  BSF    03.5
01A7:  BSF    08.4
01A8:  BCF    03.5
01A9:  BCF    48.0
01AA:  BTFSC  08.4
01AB:  BSF    48.0
.................... retval_1 = input(LCD_DB5);  
01AC:  BSF    03.5
01AD:  BSF    08.5
01AE:  BCF    03.5
01AF:  BCF    48.1
01B0:  BTFSC  08.5
01B1:  BSF    48.1
.................... retval_2 = input(LCD_DB6);  
01B2:  BSF    03.5
01B3:  BSF    08.6
01B4:  BCF    03.5
01B5:  BCF    48.2
01B6:  BTFSC  08.6
01B7:  BSF    48.2
.................... retval_3 = input(LCD_DB7);  
01B8:  BSF    03.5
01B9:  BSF    08.7
01BA:  BCF    03.5
01BB:  BCF    48.3
01BC:  BTFSC  08.7
01BD:  BSF    48.3
....................    
.................... output_low(LCD_E);  
01BE:  BSF    03.5
01BF:  BCF    08.3
01C0:  BCF    03.5
01C1:  BCF    08.3
....................      
.................... return(retval);     
01C2:  MOVF   48,W
01C3:  MOVWF  78
.................... }     
01C4:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
01C9:  BSF    03.5
01CA:  BCF    08.2
01CB:  BCF    03.5
01CC:  BSF    08.2
.................... delay_cycles(1);  
01CD:  NOP
....................  
.................... high = lcd_read_nibble();  
01CE:  CALL   1A0
01CF:  MOVF   78,W
01D0:  MOVWF  47
....................  
.................... low = lcd_read_nibble();  
01D1:  CALL   1A0
01D2:  MOVF   78,W
01D3:  MOVWF  46
....................  
.................... return( (high<<4) | low);  
01D4:  SWAPF  47,W
01D5:  MOVWF  77
01D6:  MOVLW  F0
01D7:  ANDWF  77,F
01D8:  MOVF   77,W
01D9:  IORWF  46,W
01DA:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
01C5:  BSF    03.5
01C6:  BCF    08.1
01C7:  BCF    03.5
01C8:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
01DB:  MOVF   78,W
01DC:  MOVWF  46
01DD:  BTFSC  46.7
01DE:  GOTO   1C9
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
01DF:  MOVF   44,F
01E0:  BTFSC  03.2
01E1:  GOTO   1E7
....................    output_high(LCD_RS);  
01E2:  BSF    03.5
01E3:  BCF    08.1
01E4:  BCF    03.5
01E5:  BSF    08.1
.................... else  
01E6:  GOTO   1EB
....................    output_low(LCD_RS);  
01E7:  BSF    03.5
01E8:  BCF    08.1
01E9:  BCF    03.5
01EA:  BCF    08.1
....................        
....................  delay_cycles(1);  
01EB:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
01EC:  BSF    03.5
01ED:  BCF    08.2
01EE:  BCF    03.5
01EF:  BCF    08.2
.................... delay_cycles(1);  
01F0:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
01F1:  BSF    03.5
01F2:  BCF    08.3
01F3:  BCF    03.5
01F4:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
01F5:  SWAPF  45,W
01F6:  MOVWF  46
01F7:  MOVLW  0F
01F8:  ANDWF  46,F
01F9:  MOVF   46,W
01FA:  MOVWF  47
01FB:  CALL   174
.................... lcd_send_nibble(n & 0xf);  
01FC:  MOVF   45,W
01FD:  ANDLW  0F
01FE:  MOVWF  46
01FF:  MOVWF  47
0200:  CALL   174
.................... }  
0201:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
031F:  BSF    03.5
0320:  BCF    08.1
0321:  BCF    03.5
0322:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
0323:  BSF    03.5
0324:  BCF    08.2
0325:  BCF    03.5
0326:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
0327:  BSF    03.5
0328:  BCF    08.3
0329:  BCF    03.5
032A:  BCF    08.3
032B:  CLRF   28
032C:  BTFSC  0B.7
032D:  BSF    28.7
032E:  BCF    0B.7
....................  
.................... delay_ms(15);  
032F:  MOVLW  0F
0330:  MOVWF  49
0331:  CALL   0BE
0332:  BTFSC  28.7
0333:  BSF    0B.7
....................  
.................... for(i=0 ;i < 3; i++)  
0334:  CLRF   37
0335:  MOVF   37,W
0336:  SUBLW  02
0337:  BTFSS  03.0
0338:  GOTO   347
....................    {  
....................     lcd_send_nibble(0x03);  
0339:  MOVLW  03
033A:  MOVWF  47
033B:  CALL   174
033C:  CLRF   28
033D:  BTFSC  0B.7
033E:  BSF    28.7
033F:  BCF    0B.7
....................     delay_ms(5);  
0340:  MOVLW  05
0341:  MOVWF  49
0342:  CALL   0BE
0343:  BTFSC  28.7
0344:  BSF    0B.7
....................    }  
0345:  INCF   37,F
0346:  GOTO   335
....................  
.................... lcd_send_nibble(0x02);  
0347:  MOVLW  02
0348:  MOVWF  47
0349:  CALL   174
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
034A:  CLRF   37
034B:  MOVF   37,W
034C:  SUBLW  03
034D:  BTFSS  03.0
034E:  GOTO   358
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
034F:  MOVF   37,W
0350:  CALL   03A
0351:  MOVWF  38
0352:  CLRF   44
0353:  MOVF   38,W
0354:  MOVWF  45
0355:  CALL   1C5
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
0356:  INCF   37,F
0357:  GOTO   34B
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
0202:  DECFSZ 41,W
0203:  GOTO   205
0204:  GOTO   208
....................    address = lcd_line_two;  
0205:  MOVLW  40
0206:  MOVWF  42
.................... else  
0207:  GOTO   209
....................    address=0;  
0208:  CLRF   42
.................... address += x-1;  
0209:  MOVLW  01
020A:  SUBWF  40,W
020B:  ADDWF  42,F
.................... lcd_send_byte(0, 0x80 | address);  
020C:  MOVF   42,W
020D:  IORLW  80
020E:  MOVWF  43
020F:  CLRF   44
0210:  MOVF   43,W
0211:  MOVWF  45
0212:  CALL   1C5
.................... }  
0213:  RETLW  00
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
0214:  MOVF   3F,W
0215:  XORLW  0C
0216:  BTFSC  03.2
0217:  GOTO   21F
0218:  XORLW  06
0219:  BTFSC  03.2
021A:  GOTO   22D
021B:  XORLW  02
021C:  BTFSC  03.2
021D:  GOTO   233
021E:  GOTO   238
....................     case '\f':  
....................       lcd_send_byte(0,1);  
021F:  CLRF   44
0220:  MOVLW  01
0221:  MOVWF  45
0222:  CALL   1C5
0223:  CLRF   28
0224:  BTFSC  0B.7
0225:  BSF    28.7
0226:  BCF    0B.7
....................       delay_ms(2);  
0227:  MOVLW  02
0228:  MOVWF  49
0229:  CALL   0BE
022A:  BTFSC  28.7
022B:  BSF    0B.7
....................       break;  
022C:  GOTO   23E
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
022D:  MOVLW  01
022E:  MOVWF  40
022F:  MOVLW  02
0230:  MOVWF  41
0231:  CALL   202
....................        break;  
0232:  GOTO   23E
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
0233:  CLRF   44
0234:  MOVLW  10
0235:  MOVWF  45
0236:  CALL   1C5
....................        break;  
0237:  GOTO   23E
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
0238:  MOVLW  01
0239:  MOVWF  44
023A:  MOVF   3F,W
023B:  MOVWF  45
023C:  CALL   1C5
....................        break;  
023D:  GOTO   23E
....................    }  
.................... }  
023E:  RETLW  00
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void init_pic(); 
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... int convertToASCII(int16 number); 
.................... void lcd_display(int16 number, int x, int y); 
.................... void initialDisplay(); 
.................... int16 read_temperature(); 
.................... void lcd_display_temperature(); 
....................  
.................... int16 noOfPeople = 0;    // Number of people inside the room 
*
030C:  BCF    03.5
030D:  CLRF   29
030E:  CLRF   2A
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
030F:  BCF    2F.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
0310:  BCF    2F.1
....................  
.................... int16 mseconds =0; 
0311:  CLRF   30
0312:  CLRF   31
....................  
.................... int16 temperature;     // The A/D conversion of the analog input 
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int16 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
....................  
.................... void main() 
.................... { 
*
02F9:  CLRF   04
02FA:  BCF    03.7
02FB:  MOVLW  1F
02FC:  ANDWF  03,F
02FD:  MOVLW  81
02FE:  BSF    03.5
02FF:  MOVWF  19
0300:  MOVLW  A6
0301:  MOVWF  18
0302:  MOVLW  90
0303:  BCF    03.5
0304:  MOVWF  18
0305:  BSF    03.5
0306:  BSF    1F.0
0307:  BSF    1F.1
0308:  BSF    1F.2
0309:  BCF    1F.3
030A:  MOVLW  07
030B:  MOVWF  1C
....................    init_pic(); 
*
0315:  GOTO   103
0316:  CLRF   28
0317:  BTFSC  0B.7
0318:  BSF    28.7
0319:  BCF    0B.7
....................  
....................      initialDisplay(); 
....................   /* OUTPUT_HIGH(PIN_C0); 
....................    OUTPUT_HIGH(PIN_C2); 
....................    OUTPUT_LOW(PIN_C3);*/ 
....................  
....................        while(1) 
....................        { 
....................          lcd_display(noOfPeople,14,1); 
*
03B0:  MOVF   2A,W
03B1:  MOVWF  38
03B2:  MOVF   29,W
03B3:  MOVWF  37
03B4:  MOVLW  0E
03B5:  MOVWF  39
03B6:  MOVLW  01
03B7:  MOVWF  3A
03B8:  CALL   26D
....................          lcd_display_temperature(); 
....................        } 
*
03FD:  GOTO   3B0
....................  
.................... } 
....................  
....................  
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
03FE:  SLEEP
....................  
....................     if(--int_count==0) 
*
0094:  DECFSZ 2B,F
0095:  GOTO   09B
....................     { 
....................       ++mseconds; 
0096:  INCF   30,F
0097:  BTFSC  03.2
0098:  INCF   31,F
....................       int_count=INTS_PER_mS; 
0099:  MOVLW  13
009A:  MOVWF  2B
....................     } 
....................  
.................... } 
....................  
009B:  BCF    0B.2
009C:  BCF    0A.3
009D:  BCF    0A.4
009E:  GOTO   021
.................... #int_EXT 
.................... void rayCrossed_isr() 
.................... { 
....................  //  if(INPUT(PIN_B2)&& rayTwo!=1) 
....................    if(INPUT(PIN_B2)) 
*
00D2:  BSF    03.5
00D3:  BSF    06.2
00D4:  BCF    03.5
00D5:  BTFSS  06.2
00D6:  GOTO   0EA
....................    { 
....................       rayTwo = 1; 
00D7:  BSF    2F.1
....................       if(rayOne == 1) 
00D8:  BTFSS  2F.0
00D9:  GOTO   0E8
....................       { 
....................          if(checkTimer() == 1) 
00DA:  CALL   09F
00DB:  DECFSZ 78,W
00DC:  GOTO   0E6
....................          { 
....................             noOfPeople++ ; 
00DD:  INCF   29,F
00DE:  BTFSC  03.2
00DF:  INCF   2A,F
....................             OUTPUT_HIGH(PIN_C5); 
00E0:  BCF    36.5
00E1:  MOVF   36,W
00E2:  BSF    03.5
00E3:  MOVWF  07
00E4:  BCF    03.5
00E5:  BSF    07.5
*
0313:  MOVLW  FF
0314:  MOVWF  36
....................          } 
....................          rayOne = 0; 
*
00E6:  BCF    2F.0
....................          rayTwo = 0; 
00E7:  BCF    2F.1
....................       } 
....................       setTimer(); 
00E8:  CALL   0B8
....................    } 
....................  // else  if(INPUT(PIN_B1)&& rayOne!=1) 
....................    else if(INPUT(PIN_B1)) 
00E9:  GOTO   0FC
00EA:  BSF    03.5
00EB:  BSF    06.1
00EC:  BCF    03.5
00ED:  BTFSS  06.1
00EE:  GOTO   0FC
....................    { 
....................       rayOne = 1; 
00EF:  BSF    2F.0
....................       if(rayTwo == 1) 
00F0:  BTFSS  2F.1
00F1:  GOTO   0FB
....................       { 
....................          if(checkTimer() == 1) 
00F2:  CALL   09F
00F3:  DECFSZ 78,W
00F4:  GOTO   0F9
....................          { 
....................             noOfPeople-- ; 
00F5:  MOVF   29,W
00F6:  BTFSC  03.2
00F7:  DECF   2A,F
00F8:  DECF   29,F
....................          } 
....................          rayOne = 0; 
00F9:  BCF    2F.0
....................          rayTwo = 0; 
00FA:  BCF    2F.1
....................       } 
....................       setTimer(); 
00FB:  CALL   0B8
....................    } 
....................    delay_ms(MIN_DELAY_BETWEEN_TWO_INTERRUPTS); 
00FC:  MOVLW  01
00FD:  MOVWF  49
00FE:  CALL   0BE
....................  } 
....................  
....................  
00FF:  BCF    0B.1
0100:  BCF    0A.3
0101:  BCF    0A.4
0102:  GOTO   021
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
*
00B8:  MOVLW  13
00B9:  MOVWF  2B
....................    set_timer0(0); 
00BA:  CLRF   01
....................    mseconds=0; 
00BB:  CLRF   31
00BC:  CLRF   30
.................... } 
00BD:  RETLW  00
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
*
009F:  MOVF   31,W
00A0:  SUBLW  07
00A1:  BTFSS  03.0
00A2:  GOTO   0B4
00A3:  BTFSS  03.2
00A4:  GOTO   0A9
00A5:  MOVF   30,W
00A6:  SUBLW  D0
00A7:  BTFSS  03.0
00A8:  GOTO   0B4
00A9:  MOVF   31,F
00AA:  BTFSS  03.2
00AB:  GOTO   0B0
00AC:  MOVF   30,W
00AD:  SUBLW  03
00AE:  BTFSC  03.0
00AF:  GOTO   0B4
....................    { 
....................       return 1; 
00B0:  MOVLW  01
00B1:  MOVWF  78
00B2:  GOTO   0B7
....................    } 
....................    else 
00B3:  GOTO   0B7
....................    { 
....................       return 0; 
00B4:  MOVLW  00
00B5:  MOVWF  78
00B6:  GOTO   0B7
....................    } 
.................... } 
00B7:  RETLW  00
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
*
03CF:  MOVF   35,W
03D0:  MOVWF  38
03D1:  MOVF   34,W
03D2:  MOVWF  37
03D3:  CLRF   3A
03D4:  MOVLW  96
03D5:  MOVWF  39
03D6:  GOTO   2E2
03D7:  MOVF   79,W
03D8:  MOVWF  38
03D9:  MOVF   78,W
03DA:  MOVWF  37
03DB:  MOVF   79,W
03DC:  MOVWF  42
03DD:  MOVF   78,W
03DE:  MOVWF  41
03DF:  MOVLW  01
03E0:  MOVWF  44
03E1:  MOVLW  33
03E2:  MOVWF  43
03E3:  CALL   23F
03E4:  MOVF   79,W
03E5:  MOVWF  7A
03E6:  MOVF   78,W
03E7:  MOVWF  77
03E8:  MOVF   79,W
03E9:  MOVWF  78
03EA:  CLRF   79
03EB:  CLRF   7A
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................           temperature =read_temperature(); 
*
03F0:  MOVF   79,W
03F1:  MOVWF  33
03F2:  MOVF   78,W
03F3:  MOVWF  32
....................           lcd_display(temperature,13,2); 
03F4:  MOVF   33,W
03F5:  MOVWF  38
03F6:  MOVF   32,W
03F7:  MOVWF  37
03F8:  MOVLW  0D
03F9:  MOVWF  39
03FA:  MOVLW  02
03FB:  MOVWF  3A
03FC:  CALL   26D
.................... } 
....................  
.................... int convertToASCII(int16 number) 
.................... { 
....................    return (number+48); 
*
0264:  MOVLW  30
0265:  ADDWF  3E,W
0266:  MOVWF  78
0267:  MOVF   3F,W
0268:  MOVWF  7A
0269:  BTFSC  03.0
026A:  INCF   7A,F
026B:  MOVF   78,W
.................... } 
026C:  RETLW  00
....................  
.................... void lcd_display(int16 number, int x, int y) 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition =number % 10; 
026D:  MOVF   38,W
026E:  MOVWF  42
026F:  MOVF   37,W
0270:  MOVWF  41
0271:  CLRF   44
0272:  MOVLW  0A
0273:  MOVWF  43
0274:  CALL   23F
0275:  MOVF   77,W
0276:  MOVWF  3B
....................        tensPosition = ((number - (number % 10))%100)/10; 
0277:  MOVF   38,W
0278:  MOVWF  42
0279:  MOVF   37,W
027A:  MOVWF  41
027B:  CLRF   44
027C:  MOVLW  0A
027D:  MOVWF  43
027E:  CALL   23F
027F:  MOVF   77,W
0280:  SUBWF  37,W
0281:  MOVWF  3E
0282:  MOVF   38,W
0283:  MOVWF  3F
0284:  MOVF   7A,W
0285:  BTFSS  03.0
0286:  INCFSZ 7A,W
0287:  SUBWF  3F,F
0288:  MOVF   3F,W
0289:  MOVWF  42
028A:  MOVF   3E,W
028B:  MOVWF  41
028C:  CLRF   44
028D:  MOVLW  64
028E:  MOVWF  43
028F:  CALL   23F
0290:  MOVF   77,W
0291:  MOVWF  3F
0292:  MOVF   7A,W
0293:  MOVWF  40
0294:  MOVWF  42
0295:  MOVF   77,W
0296:  MOVWF  41
0297:  CLRF   44
0298:  MOVLW  0A
0299:  MOVWF  43
029A:  CALL   23F
029B:  MOVF   78,W
029C:  MOVWF  3C
....................        hundredsPosition = ((number - (number%100))%1000)/100; 
029D:  MOVF   38,W
029E:  MOVWF  42
029F:  MOVF   37,W
02A0:  MOVWF  41
02A1:  CLRF   44
02A2:  MOVLW  64
02A3:  MOVWF  43
02A4:  CALL   23F
02A5:  MOVF   77,W
02A6:  SUBWF  37,W
02A7:  MOVWF  3E
02A8:  MOVF   38,W
02A9:  MOVWF  3F
02AA:  MOVF   7A,W
02AB:  BTFSS  03.0
02AC:  INCFSZ 7A,W
02AD:  SUBWF  3F,F
02AE:  MOVF   3F,W
02AF:  MOVWF  42
02B0:  MOVF   3E,W
02B1:  MOVWF  41
02B2:  MOVLW  03
02B3:  MOVWF  44
02B4:  MOVLW  E8
02B5:  MOVWF  43
02B6:  CALL   23F
02B7:  MOVF   77,W
02B8:  MOVWF  3F
02B9:  MOVF   7A,W
02BA:  MOVWF  40
02BB:  MOVWF  42
02BC:  MOVF   77,W
02BD:  MOVWF  41
02BE:  CLRF   44
02BF:  MOVLW  64
02C0:  MOVWF  43
02C1:  CALL   23F
02C2:  MOVF   78,W
02C3:  MOVWF  3D
....................  
....................        lcd_gotoxy(x,y); 
02C4:  MOVF   39,W
02C5:  MOVWF  40
02C6:  MOVF   3A,W
02C7:  MOVWF  41
02C8:  CALL   202
....................        lcd_putc(convertToASCII(hundredsPosition)); 
02C9:  CLRF   3F
02CA:  MOVF   3D,W
02CB:  MOVWF  3E
02CC:  CALL   264
02CD:  MOVF   78,W
02CE:  MOVWF  3E
02CF:  MOVWF  3F
02D0:  CALL   214
....................        lcd_putc(convertToASCII(tensPosition)); 
02D1:  CLRF   3F
02D2:  MOVF   3C,W
02D3:  MOVWF  3E
02D4:  CALL   264
02D5:  MOVF   78,W
02D6:  MOVWF  3E
02D7:  MOVWF  3F
02D8:  CALL   214
....................        lcd_putc(convertToASCII(unitsPosition)); 
02D9:  CLRF   3F
02DA:  MOVF   3B,W
02DB:  MOVWF  3E
02DC:  CALL   264
02DD:  MOVF   78,W
02DE:  MOVWF  3E
02DF:  MOVWF  3F
02E0:  CALL   214
.................... } 
02E1:  RETLW  00
....................  
.................... int16 read_temperature() 
.................... { 
....................     delay_ms(500);                  //a small delay is required after setting the channel 
*
03B9:  MOVLW  02
03BA:  MOVWF  37
03BB:  CLRF   28
03BC:  BTFSC  0B.7
03BD:  BSF    28.7
03BE:  BCF    0B.7
03BF:  MOVLW  FA
03C0:  MOVWF  49
03C1:  CALL   0BE
03C2:  BTFSC  28.7
03C3:  BSF    0B.7
03C4:  DECFSZ 37,F
03C5:  GOTO   3BB
....................     t = read_adc(); 
03C6:  BSF    1F.2
03C7:  BTFSC  1F.2
03C8:  GOTO   3C7
03C9:  BSF    03.5
03CA:  MOVF   1E,W
03CB:  BCF    03.5
03CC:  MOVWF  34
03CD:  MOVF   1E,W
03CE:  MOVWF  35
....................     return convertToCelsius(); 
*
03EC:  MOVF   78,W
03ED:  MOVWF  79
03EE:  MOVF   77,W
03EF:  MOVWF  78
.................... } 
....................  
.................... void initialDisplay() 
.................... { 
....................      delay_ms(25); 
*
031A:  MOVLW  19
031B:  MOVWF  49
031C:  CALL   0BE
031D:  BTFSC  28.7
031E:  BSF    0B.7
....................      lcd_init(); 
....................     // delay_ms(6); 
....................  
....................      lcd_gotoxy(1,1); 
*
0358:  MOVLW  01
0359:  MOVWF  40
035A:  MOVWF  41
035B:  CALL   202
....................      lcd_putc("*****CSE'10*****"); 
035C:  CLRF   37
035D:  MOVF   37,W
035E:  CALL   042
035F:  IORLW  00
0360:  BTFSC  03.2
0361:  GOTO   366
0362:  INCF   37,F
0363:  MOVWF  3F
0364:  CALL   214
0365:  GOTO   35D
0366:  MOVWF  3F
0367:  CALL   214
....................      lcd_gotoxy(1,2); 
0368:  MOVLW  01
0369:  MOVWF  40
036A:  MOVLW  02
036B:  MOVWF  41
036C:  CALL   202
....................      lcd_putc("||||||||||||||||"); 
036D:  CLRF   37
036E:  MOVF   37,W
036F:  CALL   057
0370:  IORLW  00
0371:  BTFSC  03.2
0372:  GOTO   377
0373:  INCF   37,F
0374:  MOVWF  3F
0375:  CALL   214
0376:  GOTO   36E
0377:  MOVWF  3F
0378:  CALL   214
....................      delay_ms(2000); 
0379:  MOVLW  08
037A:  MOVWF  37
037B:  CLRF   28
037C:  BTFSC  0B.7
037D:  BSF    28.7
037E:  BCF    0B.7
037F:  MOVLW  FA
0380:  MOVWF  49
0381:  CALL   0BE
0382:  BTFSC  28.7
0383:  BSF    0B.7
0384:  DECFSZ 37,F
0385:  GOTO   37B
....................      lcd_gotoxy(1,1); 
0386:  MOVLW  01
0387:  MOVWF  40
0388:  MOVWF  41
0389:  CALL   202
....................      lcd_putc("\fNumberInside:"); 
038A:  CLRF   37
038B:  MOVF   37,W
038C:  CALL   06C
038D:  IORLW  00
038E:  BTFSC  03.2
038F:  GOTO   394
0390:  INCF   37,F
0391:  MOVWF  3F
0392:  CALL   214
0393:  GOTO   38B
0394:  MOVWF  3F
0395:  CALL   214
....................      lcd_display(noOfPeople,14,1); 
0396:  MOVF   2A,W
0397:  MOVWF  38
0398:  MOVF   29,W
0399:  MOVWF  37
039A:  MOVLW  0E
039B:  MOVWF  39
039C:  MOVLW  01
039D:  MOVWF  3A
039E:  CALL   26D
....................      lcd_gotoxy(1,2); 
039F:  MOVLW  01
03A0:  MOVWF  40
03A1:  MOVLW  02
03A2:  MOVWF  41
03A3:  CALL   202
....................      lcd_putc("Temperature:   C"); 
03A4:  CLRF   37
03A5:  MOVF   37,W
03A6:  CALL   07F
03A7:  IORLW  00
03A8:  BTFSC  03.2
03A9:  GOTO   3AE
03AA:  INCF   37,F
03AB:  MOVWF  3F
03AC:  CALL   214
03AD:  GOTO   3A5
03AE:  MOVWF  3F
03AF:  CALL   214
....................  
.................... } 
....................  
.................... void init_pic() 
.................... { 
....................    setup_adc_ports(AN0); 
*
0103:  BSF    03.5
0104:  BCF    1F.0
0105:  BSF    1F.1
0106:  BSF    1F.2
0107:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
0108:  BCF    1F.6
0109:  BCF    03.5
010A:  BCF    1F.6
010B:  BSF    1F.7
010C:  BSF    03.5
010D:  BSF    1F.7
010E:  BCF    03.5
010F:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0110:  BSF    03.5
0111:  BCF    09.4
....................    setup_spi(FALSE); 
0112:  BCF    03.5
0113:  BCF    14.5
0114:  BCF    36.5
0115:  MOVF   36,W
0116:  BSF    03.5
0117:  MOVWF  07
0118:  BCF    03.5
0119:  BSF    36.4
011A:  MOVF   36,W
011B:  BSF    03.5
011C:  MOVWF  07
011D:  BCF    03.5
011E:  BCF    36.3
011F:  MOVF   36,W
0120:  BSF    03.5
0121:  MOVWF  07
0122:  MOVLW  00
0123:  BCF    03.5
0124:  MOVWF  14
0125:  BSF    03.5
0126:  MOVWF  14
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
0127:  MOVLW  08
0128:  MOVWF  77
0129:  BTFSS  77.3
012A:  GOTO   136
012B:  MOVLW  07
012C:  BCF    03.5
012D:  CLRF   01
012E:  MOVLW  81
012F:  MOVWF  04
0130:  BCF    03.7
0131:  MOVF   00,W
0132:  ANDLW  C0
0133:  IORLW  0F
0134:  MOVWF  00
0135:  BSF    03.5
0136:  CLRWDT
0137:  MOVLW  81
0138:  MOVWF  04
0139:  MOVF   00,W
013A:  ANDLW  C0
013B:  IORWF  77,W
013C:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
013D:  BCF    03.5
013E:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
013F:  MOVLW  00
0140:  MOVWF  78
0141:  MOVWF  12
0142:  MOVLW  00
0143:  BSF    03.5
0144:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
0145:  MOVLW  07
0146:  MOVWF  1C
0147:  MOVF   05,W
0148:  MOVLW  10
0149:  MOVWF  77
014A:  DECFSZ 77,F
014B:  GOTO   14A
014C:  NOP
014D:  MOVF   1C,W
014E:  BCF    03.5
014F:  BCF    0D.6
....................    setup_vref(FALSE); 
0150:  BSF    03.5
0151:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
0152:  BCF    03.5
0153:  BSF    0B.5
....................    enable_interrupts(INT_EXT); 
0154:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
0155:  MOVLW  C0
0156:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
0157:  BSF    03.5
0158:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
0159:  CLRF   06
015A:  BCF    03.5
015B:  CLRF   06
....................    OUTPUT_C(0); 
015C:  MOVLW  00
015D:  MOVWF  36
015E:  BSF    03.5
015F:  CLRF   07
0160:  BCF    03.5
0161:  CLRF   07
....................  
....................    SET_TRIS_B(0b01000111);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
0162:  MOVLW  47
0163:  BSF    03.5
0164:  MOVWF  06
....................    SET_TRIS_C(0b00000000); 
0165:  MOVLW  00
0166:  MOVWF  07
0167:  BCF    03.5
0168:  MOVWF  36
....................    SET_TRIS_D(0b00000000); 
0169:  BSF    03.5
016A:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
016B:  MOVWF  78
016C:  BCF    03.5
016D:  MOVF   1F,W
016E:  ANDLW  C7
016F:  IORWF  78,W
0170:  MOVWF  1F
.................... } 
0171:  BCF    0A.3
0172:  BCF    0A.4
0173:  GOTO   316 (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
