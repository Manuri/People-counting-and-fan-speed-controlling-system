CCS PCM C Compiler, Version 4.013, 28193               13-Jul-12 20:36

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing7_for_fan.lst

               ROM used: 735 words (9%)
                         Largest free fragment is 2048
               RAM used: 30 (8%) at main() level
                         48 (13%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   2AA
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   034
001D:  BTFSS  0B.4
001E:  GOTO   021
001F:  BTFSC  0B.1
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   056
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   061
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
00D8:  MOVLW  41
00D9:  MOVWF  04
00DA:  BCF    03.7
00DB:  MOVF   00,W
00DC:  BTFSC  03.2
00DD:  GOTO   0EB
00DE:  MOVLW  06
00DF:  MOVWF  78
00E0:  CLRF   77
00E1:  DECFSZ 77,F
00E2:  GOTO   0E1
00E3:  DECFSZ 78,F
00E4:  GOTO   0E0
00E5:  MOVLW  7B
00E6:  MOVWF  77
00E7:  DECFSZ 77,F
00E8:  GOTO   0E7
00E9:  DECFSZ 00,F
00EA:  GOTO   0DE
00EB:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 2000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 4    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
00EC:  BTFSC  48.0
00ED:  GOTO   0F0
00EE:  BCF    08.4
00EF:  GOTO   0F1
00F0:  BSF    08.4
00F1:  BSF    03.5
00F2:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
00F3:  BCF    03.5
00F4:  BTFSC  48.1
00F5:  GOTO   0F8
00F6:  BCF    08.5
00F7:  GOTO   0F9
00F8:  BSF    08.5
00F9:  BSF    03.5
00FA:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
00FB:  BCF    03.5
00FC:  BTFSC  48.2
00FD:  GOTO   100
00FE:  BCF    08.6
00FF:  GOTO   101
0100:  BSF    08.6
0101:  BSF    03.5
0102:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0103:  BCF    03.5
0104:  BTFSC  48.3
0105:  GOTO   108
0106:  BCF    08.7
0107:  GOTO   109
0108:  BSF    08.7
0109:  BSF    03.5
010A:  BCF    08.7
....................   
....................  delay_cycles(1);  
010B:  NOP
....................  output_high(LCD_E);  
010C:  BCF    08.3
010D:  BCF    03.5
010E:  BSF    08.3
....................  delay_us(2);  
010F:  MOVLW  03
0110:  MOVWF  77
0111:  DECFSZ 77,F
0112:  GOTO   111
....................  output_low(LCD_E);  
0113:  BSF    03.5
0114:  BCF    08.3
0115:  BCF    03.5
0116:  BCF    08.3
.................... }  
0117:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
0118:  CLRF   49
....................      
.................... output_high(LCD_E);  
0119:  BSF    03.5
011A:  BCF    08.3
011B:  BCF    03.5
011C:  BSF    08.3
.................... delay_cycles(1);  
011D:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
011E:  BSF    03.5
011F:  BSF    08.4
0120:  BCF    03.5
0121:  BCF    49.0
0122:  BTFSC  08.4
0123:  BSF    49.0
.................... retval_1 = input(LCD_DB5);  
0124:  BSF    03.5
0125:  BSF    08.5
0126:  BCF    03.5
0127:  BCF    49.1
0128:  BTFSC  08.5
0129:  BSF    49.1
.................... retval_2 = input(LCD_DB6);  
012A:  BSF    03.5
012B:  BSF    08.6
012C:  BCF    03.5
012D:  BCF    49.2
012E:  BTFSC  08.6
012F:  BSF    49.2
.................... retval_3 = input(LCD_DB7);  
0130:  BSF    03.5
0131:  BSF    08.7
0132:  BCF    03.5
0133:  BCF    49.3
0134:  BTFSC  08.7
0135:  BSF    49.3
....................    
.................... output_low(LCD_E);  
0136:  BSF    03.5
0137:  BCF    08.3
0138:  BCF    03.5
0139:  BCF    08.3
....................      
.................... return(retval);     
013A:  MOVF   49,W
013B:  MOVWF  78
.................... }     
013C:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
0141:  BSF    03.5
0142:  BCF    08.2
0143:  BCF    03.5
0144:  BSF    08.2
.................... delay_cycles(1);  
0145:  NOP
....................  
.................... high = lcd_read_nibble();  
0146:  CALL   118
0147:  MOVF   78,W
0148:  MOVWF  48
....................  
.................... low = lcd_read_nibble();  
0149:  CALL   118
014A:  MOVF   78,W
014B:  MOVWF  47
....................  
.................... return( (high<<4) | low);  
014C:  SWAPF  48,W
014D:  MOVWF  77
014E:  MOVLW  F0
014F:  ANDWF  77,F
0150:  MOVF   77,W
0151:  IORWF  47,W
0152:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
013D:  BSF    03.5
013E:  BCF    08.1
013F:  BCF    03.5
0140:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
0153:  MOVF   78,W
0154:  MOVWF  47
0155:  BTFSC  47.7
0156:  GOTO   141
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
0157:  MOVF   45,F
0158:  BTFSC  03.2
0159:  GOTO   15F
....................    output_high(LCD_RS);  
015A:  BSF    03.5
015B:  BCF    08.1
015C:  BCF    03.5
015D:  BSF    08.1
.................... else  
015E:  GOTO   163
....................    output_low(LCD_RS);  
015F:  BSF    03.5
0160:  BCF    08.1
0161:  BCF    03.5
0162:  BCF    08.1
....................        
....................  delay_cycles(1);  
0163:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
0164:  BSF    03.5
0165:  BCF    08.2
0166:  BCF    03.5
0167:  BCF    08.2
.................... delay_cycles(1);  
0168:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
0169:  BSF    03.5
016A:  BCF    08.3
016B:  BCF    03.5
016C:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
016D:  SWAPF  46,W
016E:  MOVWF  47
016F:  MOVLW  0F
0170:  ANDWF  47,F
0171:  MOVF   47,W
0172:  MOVWF  48
0173:  CALL   0EC
.................... lcd_send_nibble(n & 0xf);  
0174:  MOVF   46,W
0175:  ANDLW  0F
0176:  MOVWF  47
0177:  MOVWF  48
0178:  CALL   0EC
.................... }  
0179:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
01B4:  BSF    03.5
01B5:  BCF    08.1
01B6:  BCF    03.5
01B7:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
01B8:  BSF    03.5
01B9:  BCF    08.2
01BA:  BCF    03.5
01BB:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
01BC:  BSF    03.5
01BD:  BCF    08.3
01BE:  BCF    03.5
01BF:  BCF    08.3
....................  
.................... delay_ms(15);  
01C0:  MOVLW  0F
01C1:  MOVWF  41
01C2:  CALL   0D8
....................  
.................... for(i=0 ;i < 3; i++)  
01C3:  CLRF   38
01C4:  MOVF   38,W
01C5:  SUBLW  02
01C6:  BTFSS  03.0
01C7:  GOTO   1D0
....................    {  
....................     lcd_send_nibble(0x03);  
01C8:  MOVLW  03
01C9:  MOVWF  48
01CA:  CALL   0EC
....................     delay_ms(5);  
01CB:  MOVLW  05
01CC:  MOVWF  41
01CD:  CALL   0D8
....................    }  
01CE:  INCF   38,F
01CF:  GOTO   1C4
....................  
.................... lcd_send_nibble(0x02);  
01D0:  MOVLW  02
01D1:  MOVWF  48
01D2:  CALL   0EC
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
01D3:  CLRF   38
01D4:  MOVF   38,W
01D5:  SUBLW  03
01D6:  BTFSS  03.0
01D7:  GOTO   1E1
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
01D8:  MOVF   38,W
01D9:  CALL   03A
01DA:  MOVWF  39
01DB:  CLRF   45
01DC:  MOVF   39,W
01DD:  MOVWF  46
01DE:  CALL   13D
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
01DF:  INCF   38,F
01E0:  GOTO   1D4
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
017A:  DECFSZ 42,W
017B:  GOTO   17D
017C:  GOTO   180
....................    address = lcd_line_two;  
017D:  MOVLW  40
017E:  MOVWF  43
.................... else  
017F:  GOTO   181
....................    address=0;  
0180:  CLRF   43
.................... address += x-1;  
0181:  MOVLW  01
0182:  SUBWF  41,W
0183:  ADDWF  43,F
.................... lcd_send_byte(0, 0x80 | address);  
0184:  MOVF   43,W
0185:  IORLW  80
0186:  MOVWF  44
0187:  CLRF   45
0188:  MOVF   44,W
0189:  MOVWF  46
018A:  CALL   13D
.................... }  
018B:  RETLW  00
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
018C:  MOVF   40,W
018D:  XORLW  0C
018E:  BTFSC  03.2
018F:  GOTO   197
0190:  XORLW  06
0191:  BTFSC  03.2
0192:  GOTO   19F
0193:  XORLW  02
0194:  BTFSC  03.2
0195:  GOTO   1A5
0196:  GOTO   1AA
....................     case '\f':  
....................       lcd_send_byte(0,1);  
0197:  CLRF   45
0198:  MOVLW  01
0199:  MOVWF  46
019A:  CALL   13D
....................       delay_ms(2);  
019B:  MOVLW  02
019C:  MOVWF  41
019D:  CALL   0D8
....................       break;  
019E:  GOTO   1B0
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
019F:  MOVLW  01
01A0:  MOVWF  41
01A1:  MOVLW  02
01A2:  MOVWF  42
01A3:  CALL   17A
....................        break;  
01A4:  GOTO   1B0
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
01A5:  CLRF   45
01A6:  MOVLW  10
01A7:  MOVWF  46
01A8:  CALL   13D
....................        break;  
01A9:  GOTO   1B0
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
01AA:  MOVLW  01
01AB:  MOVWF  45
01AC:  MOVF   40,W
01AD:  MOVWF  46
01AE:  CALL   13D
....................        break;  
01AF:  GOTO   1B0
....................    }  
.................... }  
01B0:  RETLW  00
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void init_pic(); 
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... int convertToASCII(int16 number); 
.................... void lcd_display(int16 number, int x, int y); 
.................... void initialDisplay(); 
.................... int16 read_temperature(); 
.................... void lcd_display_temperature(); 
....................  
.................... int16 noOfPeople = 1;    // Number of people inside the room 
*
02BD:  MOVLW  01
02BE:  BCF    03.5
02BF:  MOVWF  28
02C0:  CLRF   29
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
02C1:  BCF    2E.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
02C2:  BCF    2E.1
....................  
.................... int16 mseconds =0; 
02C3:  CLRF   2F
02C4:  CLRF   30
....................  
.................... int16 temperature;     // The A/D conversion of the analog input 
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int16 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
....................  
.................... int y=1; 
02C5:  MOVWF  35
.................... int x=0; 
02C6:  CLRF   36
....................  
.................... void main() 
.................... { 
*
02AA:  CLRF   04
02AB:  BCF    03.7
02AC:  MOVLW  1F
02AD:  ANDWF  03,F
02AE:  MOVLW  81
02AF:  BSF    03.5
02B0:  MOVWF  19
02B1:  MOVLW  A6
02B2:  MOVWF  18
02B3:  MOVLW  90
02B4:  BCF    03.5
02B5:  MOVWF  18
02B6:  BSF    03.5
02B7:  BSF    1F.0
02B8:  BSF    1F.1
02B9:  BSF    1F.2
02BA:  BCF    1F.3
02BB:  MOVLW  07
02BC:  MOVWF  1C
....................    init_pic(); 
*
02C9:  GOTO   066
....................  
....................      initialDisplay(); 
02CA:  GOTO   1B1
....................  
....................        while(1) 
....................        { 
....................           if(mseconds<=1000)lcd_display(x, 5, 2); 
02CB:  MOVF   30,W
02CC:  SUBLW  03
02CD:  BTFSS  03.0
02CE:  GOTO   2DD
02CF:  BTFSS  03.2
02D0:  GOTO   2D5
02D1:  MOVF   2F,W
02D2:  SUBLW  E8
02D3:  BTFSS  03.0
02D4:  GOTO   2DD
02D5:  CLRF   39
02D6:  MOVF   36,W
02D7:  MOVWF  38
02D8:  MOVLW  05
02D9:  MOVWF  3A
02DA:  MOVLW  02
02DB:  MOVWF  3B
02DC:  GOTO   233
....................         /*  if(INPUT(PIN_C0)) 
....................           { 
....................              y=0; 
....................              lcd_display(y, 7, 1); 
....................           } 
....................           else if(INPUT(PIN_C1)) 
....................           { 
....................              Y=1; 
....................              lcd_display(y, 7, 1); 
....................           } 
....................           else if(INPUT(PIN_C2)) 
....................           { 
....................              y=2; 
....................              lcd_display(y, 7, 1); 
....................           } 
....................           else if(INPUT(PIN_C3)) 
....................           { 
....................              y=3; 
....................              lcd_display(y, 7, 1); 
....................           } 
....................           else if(INPUT(PIN_C4)) 
....................           { 
....................              y=4; 
....................              lcd_display(y, 7, 1); 
....................           }*/ 
....................        } 
02DD:  GOTO   2CB
....................  
.................... } 
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
02DE:  SLEEP
....................  
....................     if(--int_count==0) 
*
0056:  DECFSZ 2A,F
0057:  GOTO   05D
....................     { 
....................       ++mseconds; 
0058:  INCF   2F,F
0059:  BTFSC  03.2
005A:  INCF   30,F
....................       int_count=INTS_PER_mS; 
005B:  MOVLW  13
005C:  MOVWF  2A
....................     } 
....................  
.................... } 
....................  
005D:  BCF    0B.2
005E:  BCF    0A.3
005F:  BCF    0A.4
0060:  GOTO   021
.................... #int_EXT 
.................... void rayCrossed_isr() 
.................... { 
....................    x++; 
0061:  INCF   36,F
....................  /*  switch(y) 
....................    { 
....................    case 0: 
....................      // OUTPUT_LOW(PIN_B7); 
....................       OUTPUT_HIGH(PIN_B7); 
....................       break; 
....................  
....................    case 1: 
....................       delay_ms(8); 
....................      // OUTPUT_HIGH(PIN_B7); 
....................       OUTPUT_LOW(PIN_B7); 
....................       delay_ms(2); 
....................     //  OUTPUT_LOW(PIN_B7); 
....................      OUTPUT_HIGH(PIN_B7); 
....................       break; 
....................  
....................    case 2: 
....................       delay_ms(5); 
....................       //OUTPUT_HIGH(PIN_B7); 
....................       OUTPUT_LOW(PIN_B7); 
....................       delay_ms(5); 
....................      // OUTPUT_LOW(PIN_B7); 
....................       OUTPUT_HIGH(PIN_B7); 
....................       break; 
....................  
....................    case 3: 
....................       delay_ms(2); 
....................      // OUTPUT_HIGH(PIN_B7); 
....................      OUTPUT_LOW(PIN_B7); 
....................       delay_ms(8); 
....................      // OUTPUT_LOW(PIN_B7); 
....................       OUTPUT_HIGH(PIN_B7); 
....................       break; 
....................  
....................    case 4: 
....................      // OUTPUT_HIGH(PIN_B7); 
....................       OUTPUT_LOW(PIN_B7); 
....................       break; 
....................    }*/ 
.................... } 
....................  
....................  
0062:  BCF    0B.1
0063:  BCF    0A.3
0064:  BCF    0A.4
0065:  GOTO   021
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
....................    set_timer0(0); 
....................    mseconds=0; 
.................... } 
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
....................    { 
....................       return 1; 
....................    } 
....................    else 
....................    { 
....................       return 0; 
....................    } 
.................... } 
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................           temperature =read_temperature(); 
....................           lcd_display(temperature,13,2); 
.................... } 
....................  
.................... int convertToASCII(int16 number) 
.................... { 
....................    return (number+48); 
*
022A:  MOVLW  30
022B:  ADDWF  3F,W
022C:  MOVWF  78
022D:  MOVF   40,W
022E:  MOVWF  7A
022F:  BTFSC  03.0
0230:  INCF   7A,F
0231:  MOVF   78,W
.................... } 
0232:  RETLW  00
....................  
.................... void lcd_display(int16 number, int x, int y) 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition =number % 10; 
0233:  MOVF   39,W
0234:  MOVWF  43
0235:  MOVF   38,W
0236:  MOVWF  42
0237:  CLRF   45
0238:  MOVLW  0A
0239:  MOVWF  44
023A:  CALL   205
023B:  MOVF   77,W
023C:  MOVWF  3C
....................        tensPosition = ((number - (number % 10))%100)/10; 
023D:  MOVF   39,W
023E:  MOVWF  43
023F:  MOVF   38,W
0240:  MOVWF  42
0241:  CLRF   45
0242:  MOVLW  0A
0243:  MOVWF  44
0244:  CALL   205
0245:  MOVF   77,W
0246:  SUBWF  38,W
0247:  MOVWF  3F
0248:  MOVF   39,W
0249:  MOVWF  40
024A:  MOVF   7A,W
024B:  BTFSS  03.0
024C:  INCFSZ 7A,W
024D:  SUBWF  40,F
024E:  MOVF   40,W
024F:  MOVWF  43
0250:  MOVF   3F,W
0251:  MOVWF  42
0252:  CLRF   45
0253:  MOVLW  64
0254:  MOVWF  44
0255:  CALL   205
0256:  MOVF   77,W
0257:  MOVWF  40
0258:  MOVF   7A,W
0259:  MOVWF  41
025A:  MOVWF  43
025B:  MOVF   77,W
025C:  MOVWF  42
025D:  CLRF   45
025E:  MOVLW  0A
025F:  MOVWF  44
0260:  CALL   205
0261:  MOVF   78,W
0262:  MOVWF  3D
....................        hundredsPosition = ((number - (number%100))%1000)/100; 
0263:  MOVF   39,W
0264:  MOVWF  43
0265:  MOVF   38,W
0266:  MOVWF  42
0267:  CLRF   45
0268:  MOVLW  64
0269:  MOVWF  44
026A:  CALL   205
026B:  MOVF   77,W
026C:  SUBWF  38,W
026D:  MOVWF  3F
026E:  MOVF   39,W
026F:  MOVWF  40
0270:  MOVF   7A,W
0271:  BTFSS  03.0
0272:  INCFSZ 7A,W
0273:  SUBWF  40,F
0274:  MOVF   40,W
0275:  MOVWF  43
0276:  MOVF   3F,W
0277:  MOVWF  42
0278:  MOVLW  03
0279:  MOVWF  45
027A:  MOVLW  E8
027B:  MOVWF  44
027C:  CALL   205
027D:  MOVF   77,W
027E:  MOVWF  40
027F:  MOVF   7A,W
0280:  MOVWF  41
0281:  MOVWF  43
0282:  MOVF   77,W
0283:  MOVWF  42
0284:  CLRF   45
0285:  MOVLW  64
0286:  MOVWF  44
0287:  CALL   205
0288:  MOVF   78,W
0289:  MOVWF  3E
....................  
....................        lcd_gotoxy(x,y); 
028A:  MOVF   3A,W
028B:  MOVWF  41
028C:  MOVF   3B,W
028D:  MOVWF  42
028E:  CALL   17A
....................        lcd_putc(convertToASCII(hundredsPosition)); 
028F:  CLRF   40
0290:  MOVF   3E,W
0291:  MOVWF  3F
0292:  CALL   22A
0293:  MOVF   78,W
0294:  MOVWF  3F
0295:  MOVWF  40
0296:  CALL   18C
....................        lcd_putc(convertToASCII(tensPosition)); 
0297:  CLRF   40
0298:  MOVF   3D,W
0299:  MOVWF  3F
029A:  CALL   22A
029B:  MOVF   78,W
029C:  MOVWF  3F
029D:  MOVWF  40
029E:  CALL   18C
....................        lcd_putc(convertToASCII(unitsPosition)); 
029F:  CLRF   40
02A0:  MOVF   3C,W
02A1:  MOVWF  3F
02A2:  CALL   22A
02A3:  MOVF   78,W
02A4:  MOVWF  3F
02A5:  MOVWF  40
02A6:  CALL   18C
.................... } 
02A7:  BCF    0A.3
02A8:  BCF    0A.4
02A9:  GOTO   2DD (RETURN)
....................  
.................... int16 read_temperature() 
.................... { 
....................     delay_ms(500);                  //a small delay is required after setting the channel 
....................     t = read_adc(); 
....................     return convertToCelsius(); 
.................... } 
....................  
.................... void initialDisplay() 
.................... { 
....................      delay_ms(25); 
*
01B1:  MOVLW  19
01B2:  MOVWF  41
01B3:  CALL   0D8
....................      lcd_init(); 
....................     // delay_ms(6); 
....................  
....................     lcd_gotoxy(1,1); 
*
01E1:  MOVLW  01
01E2:  MOVWF  41
01E3:  MOVWF  42
01E4:  CALL   17A
....................    lcd_putc("level:"); 
01E5:  CLRF   38
01E6:  MOVF   38,W
01E7:  CALL   042
01E8:  IORLW  00
01E9:  BTFSC  03.2
01EA:  GOTO   1EF
01EB:  INCF   38,F
01EC:  MOVWF  40
01ED:  CALL   18C
01EE:  GOTO   1E6
01EF:  MOVWF  40
01F0:  CALL   18C
....................    lcd_gotoxy(1,2); 
01F1:  MOVLW  01
01F2:  MOVWF  41
01F3:  MOVLW  02
01F4:  MOVWF  42
01F5:  CALL   17A
....................    lcd_putc("int:"); 
01F6:  CLRF   38
01F7:  MOVF   38,W
01F8:  CALL   04D
01F9:  IORLW  00
01FA:  BTFSC  03.2
01FB:  GOTO   200
01FC:  INCF   38,F
01FD:  MOVWF  40
01FE:  CALL   18C
01FF:  GOTO   1F7
0200:  MOVWF  40
0201:  CALL   18C
....................  
....................  /*    lcd_gotoxy(1,1); 
....................      lcd_putc("*****CSE'10*****"); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("||||||||||||||||"); 
....................      delay_ms(2000); 
....................      lcd_gotoxy(1,1); 
....................      lcd_putc("\fNumberInside:"); 
....................      lcd_display(noOfPeople,14,1); 
....................      lcd_gotoxy(1,2); 
....................      lcd_putc("Temperature:   C");*/ 
....................  
.................... } 
0202:  BCF    0A.3
0203:  BCF    0A.4
0204:  GOTO   2CB (RETURN)
....................  
.................... void init_pic() 
.................... { 
....................    setup_adc_ports(AN0); 
*
0066:  BSF    03.5
0067:  BCF    1F.0
0068:  BSF    1F.1
0069:  BSF    1F.2
006A:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
006B:  BCF    1F.6
006C:  BCF    03.5
006D:  BCF    1F.6
006E:  BSF    1F.7
006F:  BSF    03.5
0070:  BSF    1F.7
0071:  BCF    03.5
0072:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0073:  BSF    03.5
0074:  BCF    09.4
....................    setup_spi(FALSE); 
0075:  BCF    03.5
0076:  BCF    14.5
0077:  BCF    37.5
0078:  MOVF   37,W
0079:  BSF    03.5
007A:  MOVWF  07
007B:  BCF    03.5
007C:  BSF    37.4
007D:  MOVF   37,W
007E:  BSF    03.5
007F:  MOVWF  07
0080:  BCF    03.5
0081:  BCF    37.3
0082:  MOVF   37,W
0083:  BSF    03.5
0084:  MOVWF  07
0085:  MOVLW  00
0086:  BCF    03.5
0087:  MOVWF  14
0088:  BSF    03.5
0089:  MOVWF  14
*
02C7:  MOVLW  FF
02C8:  MOVWF  37
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
*
008A:  MOVLW  08
008B:  MOVWF  77
008C:  BTFSS  77.3
008D:  GOTO   099
008E:  MOVLW  07
008F:  BCF    03.5
0090:  CLRF   01
0091:  MOVLW  81
0092:  MOVWF  04
0093:  BCF    03.7
0094:  MOVF   00,W
0095:  ANDLW  C0
0096:  IORLW  0F
0097:  MOVWF  00
0098:  BSF    03.5
0099:  CLRWDT
009A:  MOVLW  81
009B:  MOVWF  04
009C:  MOVF   00,W
009D:  ANDLW  C0
009E:  IORWF  77,W
009F:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
00A0:  BCF    03.5
00A1:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
00A2:  MOVLW  00
00A3:  MOVWF  78
00A4:  MOVWF  12
00A5:  MOVLW  00
00A6:  BSF    03.5
00A7:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
00A8:  MOVLW  07
00A9:  MOVWF  1C
00AA:  MOVF   05,W
00AB:  MOVLW  10
00AC:  MOVWF  77
00AD:  DECFSZ 77,F
00AE:  GOTO   0AD
00AF:  NOP
00B0:  MOVF   1C,W
00B1:  BCF    03.5
00B2:  BCF    0D.6
....................    setup_vref(FALSE); 
00B3:  BSF    03.5
00B4:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
00B5:  BCF    03.5
00B6:  BSF    0B.5
....................    enable_interrupts(INT_EXT); 
00B7:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
00B8:  MOVLW  C0
00B9:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
00BA:  BSF    03.5
00BB:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
00BC:  CLRF   06
00BD:  BCF    03.5
00BE:  CLRF   06
....................    OUTPUT_C(0); 
00BF:  MOVLW  00
00C0:  MOVWF  37
00C1:  BSF    03.5
00C2:  CLRF   07
00C3:  BCF    03.5
00C4:  CLRF   07
....................  
....................    SET_TRIS_B(0b01000001);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
00C5:  MOVLW  41
00C6:  BSF    03.5
00C7:  MOVWF  06
....................    SET_TRIS_C(0b00011111); 
00C8:  MOVLW  1F
00C9:  MOVWF  07
00CA:  BCF    03.5
00CB:  MOVWF  37
....................    SET_TRIS_D(0b00000000); 
00CC:  MOVLW  00
00CD:  BSF    03.5
00CE:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
00CF:  MOVWF  78
00D0:  BCF    03.5
00D1:  MOVF   1F,W
00D2:  ANDLW  C7
00D3:  IORWF  78,W
00D4:  MOVWF  1F
.................... } 
00D5:  BCF    0A.3
00D6:  BCF    0A.4
00D7:  GOTO   2CA (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
