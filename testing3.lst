CCS PCM C Compiler, Version 4.013, 28193               24-Jun-12 21:41

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing3.lst

               ROM used: 1154 words (14%)
                         Largest free fragment is 2048
               RAM used: 33 (9%) at main() level
                         80 (22%) worst case
               Stack:    13 worst case (6 in main + 7 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   34E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   034
001D:  BTFSS  0B.4
001E:  GOTO   021
001F:  BTFSC  0B.1
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   057
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   31D
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
016B:  MOVLW  57
016C:  MOVWF  04
016D:  BCF    03.7
016E:  MOVF   00,W
016F:  BTFSC  03.2
0170:  GOTO   17E
0171:  MOVLW  06
0172:  MOVWF  78
0173:  CLRF   77
0174:  DECFSZ 77,F
0175:  GOTO   174
0176:  DECFSZ 78,F
0177:  GOTO   173
0178:  MOVLW  7B
0179:  MOVWF  77
017A:  DECFSZ 77,F
017B:  GOTO   17A
017C:  DECFSZ 00,F
017D:  GOTO   171
017E:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 2000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 1    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
*
0101:  BTFSC  5E.0
0102:  GOTO   105
0103:  BCF    08.4
0104:  GOTO   106
0105:  BSF    08.4
0106:  BSF    03.5
0107:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
0108:  BCF    03.5
0109:  BTFSC  5E.1
010A:  GOTO   10D
010B:  BCF    08.5
010C:  GOTO   10E
010D:  BSF    08.5
010E:  BSF    03.5
010F:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0110:  BCF    03.5
0111:  BTFSC  5E.2
0112:  GOTO   115
0113:  BCF    08.6
0114:  GOTO   116
0115:  BSF    08.6
0116:  BSF    03.5
0117:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0118:  BCF    03.5
0119:  BTFSC  5E.3
011A:  GOTO   11D
011B:  BCF    08.7
011C:  GOTO   11E
011D:  BSF    08.7
011E:  BSF    03.5
011F:  BCF    08.7
....................   
....................  delay_cycles(1);  
0120:  NOP
....................  output_high(LCD_E);  
0121:  BCF    08.3
0122:  BCF    03.5
0123:  BSF    08.3
....................  delay_us(2);  
0124:  MOVLW  03
0125:  MOVWF  77
0126:  DECFSZ 77,F
0127:  GOTO   126
....................  output_low(LCD_E);  
0128:  BSF    03.5
0129:  BCF    08.3
012A:  BCF    03.5
012B:  BCF    08.3
.................... }  
012C:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
*
00C9:  CLRF   5F
....................      
.................... output_high(LCD_E);  
00CA:  BSF    03.5
00CB:  BCF    08.3
00CC:  BCF    03.5
00CD:  BSF    08.3
.................... delay_cycles(1);  
00CE:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
00CF:  BSF    03.5
00D0:  BSF    08.4
00D1:  BCF    03.5
00D2:  BCF    5F.0
00D3:  BTFSC  08.4
00D4:  BSF    5F.0
.................... retval_1 = input(LCD_DB5);  
00D5:  BSF    03.5
00D6:  BSF    08.5
00D7:  BCF    03.5
00D8:  BCF    5F.1
00D9:  BTFSC  08.5
00DA:  BSF    5F.1
.................... retval_2 = input(LCD_DB6);  
00DB:  BSF    03.5
00DC:  BSF    08.6
00DD:  BCF    03.5
00DE:  BCF    5F.2
00DF:  BTFSC  08.6
00E0:  BSF    5F.2
.................... retval_3 = input(LCD_DB7);  
00E1:  BSF    03.5
00E2:  BSF    08.7
00E3:  BCF    03.5
00E4:  BCF    5F.3
00E5:  BTFSC  08.7
00E6:  BSF    5F.3
....................    
.................... output_low(LCD_E);  
00E7:  BSF    03.5
00E8:  BCF    08.3
00E9:  BCF    03.5
00EA:  BCF    08.3
....................      
.................... return(retval);     
00EB:  MOVF   5F,W
00EC:  MOVWF  78
.................... }     
00ED:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
00EE:  BSF    03.5
00EF:  BCF    08.2
00F0:  BCF    03.5
00F1:  BSF    08.2
.................... delay_cycles(1);  
00F2:  NOP
....................  
.................... high = lcd_read_nibble();  
00F3:  CALL   0C9
00F4:  MOVF   78,W
00F5:  MOVWF  5E
....................  
.................... low = lcd_read_nibble();  
00F6:  CALL   0C9
00F7:  MOVF   78,W
00F8:  MOVWF  5D
....................  
.................... return( (high<<4) | low);  
00F9:  SWAPF  5E,W
00FA:  MOVWF  77
00FB:  MOVLW  F0
00FC:  ANDWF  77,F
00FD:  MOVF   77,W
00FE:  IORWF  5D,W
00FF:  MOVWF  78
.................... }  
0100:  RETLW  00
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
012D:  BSF    03.5
012E:  BCF    08.1
012F:  BCF    03.5
0130:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
0131:  CALL   0EE
0132:  MOVF   78,W
0133:  MOVWF  5D
0134:  BTFSC  5D.7
0135:  GOTO   131
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
0136:  MOVF   5B,F
0137:  BTFSC  03.2
0138:  GOTO   13E
....................    output_high(LCD_RS);  
0139:  BSF    03.5
013A:  BCF    08.1
013B:  BCF    03.5
013C:  BSF    08.1
.................... else  
013D:  GOTO   142
....................    output_low(LCD_RS);  
013E:  BSF    03.5
013F:  BCF    08.1
0140:  BCF    03.5
0141:  BCF    08.1
....................        
....................  delay_cycles(1);  
0142:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
0143:  BSF    03.5
0144:  BCF    08.2
0145:  BCF    03.5
0146:  BCF    08.2
.................... delay_cycles(1);  
0147:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
0148:  BSF    03.5
0149:  BCF    08.3
014A:  BCF    03.5
014B:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
014C:  SWAPF  5C,W
014D:  MOVWF  5D
014E:  MOVLW  0F
014F:  ANDWF  5D,F
0150:  MOVF   5D,W
0151:  MOVWF  5E
0152:  CALL   101
.................... lcd_send_nibble(n & 0xf);  
0153:  MOVF   5C,W
0154:  ANDLW  0F
0155:  MOVWF  5D
0156:  MOVWF  5E
0157:  CALL   101
.................... }  
0158:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
03E0:  BSF    03.5
03E1:  BCF    08.1
03E2:  BCF    03.5
03E3:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
03E4:  BSF    03.5
03E5:  BCF    08.2
03E6:  BCF    03.5
03E7:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
03E8:  BSF    03.5
03E9:  BCF    08.3
03EA:  BCF    03.5
03EB:  BCF    08.3
03EC:  CLRF   28
03ED:  BTFSC  0B.7
03EE:  BSF    28.7
03EF:  BCF    0B.7
....................  
.................... delay_ms(15);  
03F0:  MOVLW  0F
03F1:  MOVWF  57
03F2:  CALL   16B
03F3:  BTFSC  28.7
03F4:  BSF    0B.7
....................  
.................... for(i=0 ;i < 3; i++)  
03F5:  CLRF   3A
03F6:  MOVF   3A,W
03F7:  SUBLW  02
03F8:  BTFSS  03.0
03F9:  GOTO   40E
03FA:  CLRF   28
03FB:  BTFSC  0B.7
03FC:  BSF    28.7
03FD:  BCF    0B.7
....................    {  
....................     lcd_send_nibble(0x03);  
03FE:  MOVLW  03
03FF:  MOVWF  5E
0400:  CALL   101
0401:  BTFSC  28.7
0402:  BSF    0B.7
0403:  CLRF   28
0404:  BTFSC  0B.7
0405:  BSF    28.7
0406:  BCF    0B.7
....................     delay_ms(5);  
0407:  MOVLW  05
0408:  MOVWF  57
0409:  CALL   16B
040A:  BTFSC  28.7
040B:  BSF    0B.7
....................    }  
040C:  INCF   3A,F
040D:  GOTO   3F6
040E:  CLRF   28
040F:  BTFSC  0B.7
0410:  BSF    28.7
0411:  BCF    0B.7
....................  
.................... lcd_send_nibble(0x02);  
0412:  MOVLW  02
0413:  MOVWF  5E
0414:  CALL   101
0415:  BTFSC  28.7
0416:  BSF    0B.7
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
0417:  CLRF   3A
0418:  MOVF   3A,W
0419:  SUBLW  03
041A:  BTFSS  03.0
041B:  GOTO   42B
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
041C:  MOVF   3A,W
041D:  CALL   03A
041E:  MOVWF  3B
041F:  CLRF   28
0420:  BTFSC  0B.7
0421:  BSF    28.7
0422:  BCF    0B.7
0423:  CLRF   5B
0424:  MOVF   3B,W
0425:  MOVWF  5C
0426:  CALL   12D
0427:  BTFSC  28.7
0428:  BSF    0B.7
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
0429:  INCF   3A,F
042A:  GOTO   418
042B:  CLRF   28
042C:  BTFSC  0B.7
042D:  BSF    28.7
042E:  BCF    0B.7
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
0159:  DECFSZ 58,W
015A:  GOTO   15C
015B:  GOTO   15F
....................    address = lcd_line_two;  
015C:  MOVLW  40
015D:  MOVWF  59
.................... else  
015E:  GOTO   160
....................    address=0;  
015F:  CLRF   59
.................... address += x-1;  
0160:  MOVLW  01
0161:  SUBWF  57,W
0162:  ADDWF  59,F
.................... lcd_send_byte(0, 0x80 | address);  
0163:  MOVF   59,W
0164:  IORLW  80
0165:  MOVWF  5A
0166:  CLRF   5B
0167:  MOVF   5A,W
0168:  MOVWF  5C
0169:  CALL   12D
.................... }  
016A:  RETLW  00
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
*
017F:  MOVF   56,W
0180:  XORLW  0C
0181:  BTFSC  03.2
0182:  GOTO   18A
0183:  XORLW  06
0184:  BTFSC  03.2
0185:  GOTO   192
0186:  XORLW  02
0187:  BTFSC  03.2
0188:  GOTO   198
0189:  GOTO   19D
....................     case '\f':  
....................       lcd_send_byte(0,1);  
018A:  CLRF   5B
018B:  MOVLW  01
018C:  MOVWF  5C
018D:  CALL   12D
....................       delay_ms(2);  
018E:  MOVLW  02
018F:  MOVWF  57
0190:  CALL   16B
....................       break;  
0191:  GOTO   1A3
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
0192:  MOVLW  01
0193:  MOVWF  57
0194:  MOVLW  02
0195:  MOVWF  58
0196:  CALL   159
....................        break;  
0197:  GOTO   1A3
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
0198:  CLRF   5B
0199:  MOVLW  10
019A:  MOVWF  5C
019B:  CALL   12D
....................        break;  
019C:  GOTO   1A3
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
019D:  MOVLW  01
019E:  MOVWF  5B
019F:  MOVF   56,W
01A0:  MOVWF  5C
01A1:  CALL   12D
....................        break;  
01A2:  GOTO   1A3
....................    }  
.................... }  
01A3:  RETLW  00
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... void lcd_display_temperature(); 
.................... void lcd_display_no_of_people(); 
.................... void display_mseconds(); //test function 
....................  
.................... int noOfPeople = 0;    // Number of people inside the room 
*
0361:  BCF    03.5
0362:  CLRF   29
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
0363:  BCF    2E.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
0364:  BCF    2E.1
....................  
.................... int16 mseconds =0;// MIN_DELAY_BETWEEN_TWO_INTERRUPTS;    // A running miliseconds counter 
0365:  CLRF   2F
0366:  CLRF   30
....................  
.................... int32 temperature;     // The A/D conversion of the analog input 
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int32 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
....................  
.................... void main() 
.................... { 
*
034E:  CLRF   04
034F:  BCF    03.7
0350:  MOVLW  1F
0351:  ANDWF  03,F
0352:  MOVLW  81
0353:  BSF    03.5
0354:  MOVWF  19
0355:  MOVLW  A6
0356:  MOVWF  18
0357:  MOVLW  90
0358:  BCF    03.5
0359:  MOVWF  18
035A:  BSF    03.5
035B:  BSF    1F.0
035C:  BSF    1F.1
035D:  BSF    1F.2
035E:  BCF    1F.3
035F:  MOVLW  07
0360:  MOVWF  1C
....................  
....................    setup_adc_ports(AN0); 
*
0369:  BSF    03.5
036A:  BCF    1F.0
036B:  BSF    1F.1
036C:  BSF    1F.2
036D:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
036E:  BCF    1F.6
036F:  BCF    03.5
0370:  BCF    1F.6
0371:  BSF    1F.7
0372:  BSF    03.5
0373:  BSF    1F.7
0374:  BCF    03.5
0375:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0376:  BSF    03.5
0377:  BCF    09.4
....................    setup_spi(FALSE); 
*
0367:  MOVLW  FF
0368:  MOVWF  39
*
0378:  BCF    03.5
0379:  BCF    14.5
037A:  BCF    39.5
037B:  MOVF   39,W
037C:  BSF    03.5
037D:  MOVWF  07
037E:  BCF    03.5
037F:  BSF    39.4
0380:  MOVF   39,W
0381:  BSF    03.5
0382:  MOVWF  07
0383:  BCF    03.5
0384:  BCF    39.3
0385:  MOVF   39,W
0386:  BSF    03.5
0387:  MOVWF  07
0388:  MOVLW  00
0389:  BCF    03.5
038A:  MOVWF  14
038B:  BSF    03.5
038C:  MOVWF  14
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
038D:  MOVLW  08
038E:  MOVWF  77
038F:  BTFSS  77.3
0390:  GOTO   39C
0391:  MOVLW  07
0392:  BCF    03.5
0393:  CLRF   01
0394:  MOVLW  81
0395:  MOVWF  04
0396:  BCF    03.7
0397:  MOVF   00,W
0398:  ANDLW  C0
0399:  IORLW  0F
039A:  MOVWF  00
039B:  BSF    03.5
039C:  CLRWDT
039D:  MOVLW  81
039E:  MOVWF  04
039F:  MOVF   00,W
03A0:  ANDLW  C0
03A1:  IORWF  77,W
03A2:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
03A3:  BCF    03.5
03A4:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
03A5:  MOVLW  00
03A6:  MOVWF  78
03A7:  MOVWF  12
03A8:  MOVLW  00
03A9:  BSF    03.5
03AA:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
03AB:  MOVLW  07
03AC:  MOVWF  1C
03AD:  MOVF   05,W
03AE:  MOVLW  10
03AF:  MOVWF  77
03B0:  DECFSZ 77,F
03B1:  GOTO   3B0
03B2:  NOP
03B3:  MOVF   1C,W
03B4:  BCF    03.5
03B5:  BCF    0D.6
....................    setup_vref(FALSE); 
03B6:  BSF    03.5
03B7:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
03B8:  BCF    03.5
03B9:  BSF    0B.5
....................    enable_interrupts(INT_EXT); 
03BA:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
03BB:  MOVLW  C0
03BC:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
03BD:  BSF    03.5
03BE:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
03BF:  CLRF   06
03C0:  BCF    03.5
03C1:  CLRF   06
....................    OUTPUT_C(0); 
03C2:  MOVLW  00
03C3:  MOVWF  39
03C4:  BSF    03.5
03C5:  CLRF   07
03C6:  BCF    03.5
03C7:  CLRF   07
....................  
....................    SET_TRIS_B(0b00000111);   //pins B0 and B4 are set to give inputs 
03C8:  MOVLW  07
03C9:  BSF    03.5
03CA:  MOVWF  06
....................    SET_TRIS_C(0b00000000); 
03CB:  MOVLW  00
03CC:  MOVWF  07
03CD:  BCF    03.5
03CE:  MOVWF  39
....................    SET_TRIS_D(0b00000000); 
03CF:  BSF    03.5
03D0:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
03D1:  MOVWF  78
03D2:  BCF    03.5
03D3:  MOVF   1F,W
03D4:  ANDLW  C7
03D5:  IORWF  78,W
03D6:  MOVWF  1F
03D7:  CLRF   28
03D8:  BTFSC  0B.7
03D9:  BSF    28.7
03DA:  BCF    0B.7
....................  
....................      delay_ms(25); 
03DB:  MOVLW  19
03DC:  MOVWF  57
03DD:  CALL   16B
03DE:  BTFSC  28.7
03DF:  BSF    0B.7
....................      lcd_init(); 
....................      delay_ms(6); 
*
042F:  MOVLW  06
0430:  MOVWF  57
0431:  CALL   16B
0432:  BTFSC  28.7
0433:  BSF    0B.7
0434:  CLRF   28
0435:  BTFSC  0B.7
0436:  BSF    28.7
0437:  BCF    0B.7
....................      lcd_gotoxy(1,1); 
0438:  MOVLW  01
0439:  MOVWF  57
043A:  MOVWF  58
043B:  CALL   159
043C:  BTFSC  28.7
043D:  BSF    0B.7
....................      lcd_putc("\fnumber:"); 
043E:  CLRF   3A
043F:  MOVF   3A,W
0440:  CALL   042
0441:  IORLW  00
0442:  BTFSC  03.2
0443:  GOTO   44E
0444:  INCF   3A,F
0445:  CLRF   28
0446:  BTFSC  0B.7
0447:  BSF    28.7
0448:  BCF    0B.7
0449:  MOVWF  56
044A:  CALL   17F
044B:  BTFSC  28.7
044C:  BSF    0B.7
044D:  GOTO   43F
044E:  CLRF   28
044F:  BTFSC  0B.7
0450:  BSF    28.7
0451:  BCF    0B.7
0452:  MOVWF  56
0453:  CALL   17F
0454:  BTFSC  28.7
0455:  BSF    0B.7
0456:  CLRF   28
0457:  BTFSC  0B.7
0458:  BSF    28.7
0459:  BCF    0B.7
....................      lcd_display_no_of_people(); 
045A:  CALL   285
045B:  BTFSC  28.7
045C:  BSF    0B.7
045D:  CLRF   28
045E:  BTFSC  0B.7
045F:  BSF    28.7
0460:  BCF    0B.7
....................      lcd_gotoxy(1,2); 
0461:  MOVLW  01
0462:  MOVWF  57
0463:  MOVLW  02
0464:  MOVWF  58
0465:  CALL   159
0466:  BTFSC  28.7
0467:  BSF    0B.7
....................      lcd_putc("ms:"); 
0468:  CLRF   3A
0469:  MOVF   3A,W
046A:  CALL   04F
046B:  IORLW  00
046C:  BTFSC  03.2
046D:  GOTO   478
046E:  INCF   3A,F
046F:  CLRF   28
0470:  BTFSC  0B.7
0471:  BSF    28.7
0472:  BCF    0B.7
0473:  MOVWF  56
0474:  CALL   17F
0475:  BTFSC  28.7
0476:  BSF    0B.7
0477:  GOTO   469
0478:  CLRF   28
0479:  BTFSC  0B.7
047A:  BSF    28.7
047B:  BCF    0B.7
047C:  MOVWF  56
047D:  CALL   17F
047E:  BTFSC  28.7
047F:  BSF    0B.7
....................  
....................        while(1) 
....................        { 
....................         // lcd_display_no_of_people(); 
....................  
....................        } 
0480:  GOTO   480
....................  
.................... } 
....................  
....................  
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
0481:  SLEEP
....................  
....................     if(--int_count==0) 
*
0057:  DECFSZ 2A,F
0058:  GOTO   05E
....................     { 
....................       ++mseconds; 
0059:  INCF   2F,F
005A:  BTFSC  03.2
005B:  INCF   30,F
....................       int_count=INTS_PER_mS; 
005C:  MOVLW  13
005D:  MOVWF  2A
....................     } 
....................  
.................... } 
....................  
005E:  BCF    0B.2
005F:  BCF    0A.3
0060:  BCF    0A.4
0061:  GOTO   021
.................... #int_EXT 
.................... void rayCrossed_isr() 
.................... { 
....................    if(INPUT(PIN_B2)&& rayTwo!=1) 
*
031D:  BSF    03.5
031E:  BSF    06.2
031F:  BCF    03.5
0320:  BTFSS  06.2
0321:  GOTO   330
0322:  BTFSC  2E.1
0323:  GOTO   330
....................    { 
....................       rayTwo = 1; 
0324:  BSF    2E.1
....................       if(rayOne == 1) 
0325:  BTFSS  2E.0
0326:  GOTO   32E
....................       { 
....................          if(checkTimer() == 1) 
0327:  CALL   1A4
0328:  DECFSZ 78,W
0329:  GOTO   32C
....................          { 
....................             noOfPeople++ ; 
032A:  INCF   29,F
....................             lcd_display_no_of_people(); 
032B:  CALL   285
....................          } 
....................          rayOne = 0; 
032C:  BCF    2E.0
....................          rayTwo = 0; 
032D:  BCF    2E.1
....................       } 
....................       setTimer(); 
032E:  CALL   317
....................    } 
....................   else  if(INPUT(PIN_B1)&& rayOne!=1) 
032F:  GOTO   342
0330:  BSF    03.5
0331:  BSF    06.1
0332:  BCF    03.5
0333:  BTFSS  06.1
0334:  GOTO   342
0335:  BTFSC  2E.0
0336:  GOTO   342
....................    { 
....................       rayOne = 1; 
0337:  BSF    2E.0
....................       if(rayTwo == 1) 
0338:  BTFSS  2E.1
0339:  GOTO   341
....................       { 
....................          if(checkTimer() == 1) 
033A:  CALL   1A4
033B:  DECFSZ 78,W
033C:  GOTO   33F
....................          { 
....................             noOfPeople-- ; 
033D:  DECF   29,F
....................             lcd_display_no_of_people(); 
033E:  CALL   285
....................          } 
....................          rayOne = 0; 
033F:  BCF    2E.0
....................          rayTwo = 0; 
0340:  BCF    2E.1
....................       } 
....................       setTimer(); 
0341:  CALL   317
....................    } 
....................    delay_ms(MIN_DELAY_BETWEEN_TWO_INTERRUPTS/2); 
....................    OUTPUT_HIGH(PIN_B7); 
0342:  BSF    03.5
0343:  BCF    06.7
0344:  BCF    03.5
0345:  BSF    06.7
....................    delay_ms(MIN_DELAY_BETWEEN_TWO_INTERRUPTS/2); 
....................    OUTPUT_LOW(PIN_B7); 
0346:  BSF    03.5
0347:  BCF    06.7
0348:  BCF    03.5
0349:  BCF    06.7
....................  } 
....................  
....................  
034A:  BCF    0B.1
034B:  BCF    0A.3
034C:  BCF    0A.4
034D:  GOTO   021
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
*
0317:  MOVLW  13
0318:  MOVWF  2A
....................    set_timer0(0); 
0319:  CLRF   01
....................    mseconds=0; 
031A:  CLRF   30
031B:  CLRF   2F
.................... } 
031C:  RETLW  00
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    display_mseconds(); 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
*
0257:  MOVF   30,W
0258:  SUBLW  07
0259:  BTFSS  03.0
025A:  GOTO   26C
025B:  BTFSS  03.2
025C:  GOTO   261
025D:  MOVF   2F,W
025E:  SUBLW  D0
025F:  BTFSS  03.0
0260:  GOTO   26C
0261:  MOVF   30,F
0262:  BTFSS  03.2
0263:  GOTO   268
0264:  MOVF   2F,W
0265:  SUBLW  00
0266:  BTFSC  03.0
0267:  GOTO   26C
....................    { 
....................       return 1; 
0268:  MOVLW  01
0269:  MOVWF  78
026A:  GOTO   26F
....................    } 
....................    else 
026B:  GOTO   26F
....................    { 
....................       return 0; 
026C:  MOVLW  00
026D:  MOVWF  78
026E:  GOTO   26F
....................    } 
.................... } 
026F:  RETLW  00
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition = temperature % 10 + 48; 
....................        tensPosition = ((temperature - (temperature % 10))%100)/10 +48; 
....................        hundredsPosition = (temperature - (temperature%100))/100 +48; 
....................  
....................        lcd_gotoxy(8,2); 
....................        lcd_putc(hundredsPosition); 
....................        lcd_putc(tensPosition); 
....................        lcd_putc(unitsPosition); 
....................  
.................... } 
....................  
.................... void lcd_display_no_of_people() 
.................... { 
....................  
....................       int unitsPosition, tensPosition, hundredsPosition, thousandsPosition; 
....................  
....................        unitsPosition =noOfPeople % 10 + 48; 
*
0285:  MOVF   29,W
0286:  MOVWF  59
0287:  MOVLW  0A
0288:  MOVWF  5A
0289:  CALL   270
028A:  MOVLW  30
028B:  ADDWF  77,W
028C:  MOVWF  52
....................        tensPosition = ((noOfPeople - (noOfPeople % 10))%100)/10 +48; 
028D:  MOVF   29,W
028E:  MOVWF  59
028F:  MOVLW  0A
0290:  MOVWF  5A
0291:  CALL   270
0292:  MOVF   77,W
0293:  SUBWF  29,W
0294:  MOVWF  57
0295:  MOVWF  59
0296:  MOVLW  64
0297:  MOVWF  5A
0298:  CALL   270
0299:  MOVF   77,W
029A:  MOVWF  59
029B:  MOVLW  0A
029C:  MOVWF  5A
029D:  CALL   270
029E:  MOVLW  30
029F:  ADDWF  78,W
02A0:  MOVWF  53
....................        hundredsPosition = ((noOfPeople - (noOfPeople%100))%1000)/100 +48; 
02A1:  MOVF   29,W
02A2:  MOVWF  59
02A3:  MOVLW  64
02A4:  MOVWF  5A
02A5:  CALL   270
02A6:  MOVF   77,W
02A7:  SUBWF  29,W
02A8:  MOVWF  57
02A9:  CLRF   5B
02AA:  MOVF   57,W
02AB:  MOVWF  5A
02AC:  MOVLW  03
02AD:  MOVWF  5D
02AE:  MOVLW  E8
02AF:  MOVWF  5C
02B0:  CALL   062
02B1:  MOVF   77,W
02B2:  MOVWF  58
02B3:  MOVF   7A,W
02B4:  MOVWF  59
02B5:  MOVWF  5B
02B6:  MOVF   77,W
02B7:  MOVWF  5A
02B8:  CLRF   5D
02B9:  MOVLW  64
02BA:  MOVWF  5C
02BB:  CALL   062
02BC:  MOVLW  30
02BD:  ADDWF  78,W
02BE:  MOVWF  54
....................        thousandsPosition = ((noOfPeople - (noOfPeople%1000))%100000)/1000 +48; 
02BF:  CLRF   5B
02C0:  MOVF   29,W
02C1:  MOVWF  5A
02C2:  MOVLW  03
02C3:  MOVWF  5D
02C4:  MOVLW  E8
02C5:  MOVWF  5C
02C6:  CALL   062
02C7:  MOVF   77,W
02C8:  SUBWF  29,W
02C9:  MOVWF  56
02CA:  CLRF   57
02CB:  MOVF   7A,W
02CC:  BTFSS  03.0
02CD:  INCFSZ 7A,W
02CE:  SUBWF  57,F
02CF:  CLRF   60
02D0:  CLRF   5F
02D1:  MOVF   57,W
02D2:  MOVWF  5E
02D3:  MOVF   56,W
02D4:  MOVWF  5D
02D5:  CLRF   64
02D6:  MOVLW  01
02D7:  MOVWF  63
02D8:  MOVLW  86
02D9:  MOVWF  62
02DA:  MOVLW  A0
02DB:  MOVWF  61
02DC:  CALL   087
02DD:  MOVF   00,W
02DE:  MOVWF  57
02DF:  INCF   04,F
02E0:  MOVF   00,W
02E1:  MOVWF  58
02E2:  INCF   04,F
02E3:  MOVF   00,W
02E4:  MOVWF  59
02E5:  INCF   04,F
02E6:  MOVF   00,W
02E7:  MOVWF  5A
02E8:  CLRF   5C
02E9:  MOVF   04,W
02EA:  MOVWF  5B
02EB:  BCF    5C.0
02EC:  BTFSC  03.7
02ED:  BSF    5C.0
02EE:  MOVF   5A,W
02EF:  MOVWF  60
02F0:  MOVF   59,W
02F1:  MOVWF  5F
02F2:  MOVF   58,W
02F3:  MOVWF  5E
02F4:  MOVF   57,W
02F5:  MOVWF  5D
02F6:  CLRF   64
02F7:  CLRF   63
02F8:  MOVLW  03
02F9:  MOVWF  62
02FA:  MOVLW  E8
02FB:  MOVWF  61
02FC:  CALL   087
02FD:  MOVF   5B,W
02FE:  MOVWF  04
02FF:  BCF    03.7
0300:  BTFSC  5C.0
0301:  BSF    03.7
0302:  MOVLW  30
0303:  ADDWF  77,W
0304:  MOVWF  55
....................  
....................        lcd_gotoxy(8,1); 
0305:  MOVLW  08
0306:  MOVWF  57
0307:  MOVLW  01
0308:  MOVWF  58
0309:  CALL   159
....................        lcd_putc(thousandsPosition); 
030A:  MOVF   55,W
030B:  MOVWF  56
030C:  CALL   17F
....................        lcd_putc(hundredsPosition); 
030D:  MOVF   54,W
030E:  MOVWF  56
030F:  CALL   17F
....................        lcd_putc(tensPosition); 
0310:  MOVF   53,W
0311:  MOVWF  56
0312:  CALL   17F
....................        lcd_putc(unitsPosition); 
0313:  MOVF   52,W
0314:  MOVWF  56
0315:  CALL   17F
....................  
....................  
.................... } 
0316:  RETLW  00
....................  
.................... void display_mseconds() 
.................... { 
....................     int unitsPosition, tensPosition, hundredsPosition, thousandsPosition; 
....................  
....................        unitsPosition = mseconds % 10 + 48; 
*
01A4:  MOVF   30,W
01A5:  MOVWF  5B
01A6:  MOVF   2F,W
01A7:  MOVWF  5A
01A8:  CLRF   5D
01A9:  MOVLW  0A
01AA:  MOVWF  5C
01AB:  CALL   062
01AC:  MOVLW  30
01AD:  ADDWF  77,W
01AE:  MOVWF  52
....................        tensPosition = ((mseconds - (mseconds % 10))%100)/10 +48; 
01AF:  MOVF   30,W
01B0:  MOVWF  5B
01B1:  MOVF   2F,W
01B2:  MOVWF  5A
01B3:  CLRF   5D
01B4:  MOVLW  0A
01B5:  MOVWF  5C
01B6:  CALL   062
01B7:  MOVF   77,W
01B8:  SUBWF  2F,W
01B9:  MOVWF  56
01BA:  MOVF   30,W
01BB:  MOVWF  57
01BC:  MOVF   7A,W
01BD:  BTFSS  03.0
01BE:  INCFSZ 7A,W
01BF:  SUBWF  57,F
01C0:  MOVF   57,W
01C1:  MOVWF  5B
01C2:  MOVF   56,W
01C3:  MOVWF  5A
01C4:  CLRF   5D
01C5:  MOVLW  64
01C6:  MOVWF  5C
01C7:  CALL   062
01C8:  MOVF   77,W
01C9:  MOVWF  57
01CA:  MOVF   7A,W
01CB:  MOVWF  58
01CC:  MOVWF  5B
01CD:  MOVF   77,W
01CE:  MOVWF  5A
01CF:  CLRF   5D
01D0:  MOVLW  0A
01D1:  MOVWF  5C
01D2:  CALL   062
01D3:  MOVLW  30
01D4:  ADDWF  78,W
01D5:  MOVWF  53
....................        hundredsPosition = ((mseconds - (mseconds%100))%1000)/100 +48; 
01D6:  MOVF   30,W
01D7:  MOVWF  5B
01D8:  MOVF   2F,W
01D9:  MOVWF  5A
01DA:  CLRF   5D
01DB:  MOVLW  64
01DC:  MOVWF  5C
01DD:  CALL   062
01DE:  MOVF   77,W
01DF:  SUBWF  2F,W
01E0:  MOVWF  56
01E1:  MOVF   30,W
01E2:  MOVWF  57
01E3:  MOVF   7A,W
01E4:  BTFSS  03.0
01E5:  INCFSZ 7A,W
01E6:  SUBWF  57,F
01E7:  MOVF   57,W
01E8:  MOVWF  5B
01E9:  MOVF   56,W
01EA:  MOVWF  5A
01EB:  MOVLW  03
01EC:  MOVWF  5D
01ED:  MOVLW  E8
01EE:  MOVWF  5C
01EF:  CALL   062
01F0:  MOVF   77,W
01F1:  MOVWF  57
01F2:  MOVF   7A,W
01F3:  MOVWF  58
01F4:  MOVWF  5B
01F5:  MOVF   77,W
01F6:  MOVWF  5A
01F7:  CLRF   5D
01F8:  MOVLW  64
01F9:  MOVWF  5C
01FA:  CALL   062
01FB:  MOVLW  30
01FC:  ADDWF  78,W
01FD:  MOVWF  54
....................        thousandsPosition = ((mseconds - (mseconds%1000))%100000)/1000 +48; 
01FE:  MOVF   30,W
01FF:  MOVWF  5B
0200:  MOVF   2F,W
0201:  MOVWF  5A
0202:  MOVLW  03
0203:  MOVWF  5D
0204:  MOVLW  E8
0205:  MOVWF  5C
0206:  CALL   062
0207:  MOVF   77,W
0208:  SUBWF  2F,W
0209:  MOVWF  56
020A:  MOVF   30,W
020B:  MOVWF  57
020C:  MOVF   7A,W
020D:  BTFSS  03.0
020E:  INCFSZ 7A,W
020F:  SUBWF  57,F
0210:  CLRF   60
0211:  CLRF   5F
0212:  MOVF   57,W
0213:  MOVWF  5E
0214:  MOVF   56,W
0215:  MOVWF  5D
0216:  CLRF   64
0217:  MOVLW  01
0218:  MOVWF  63
0219:  MOVLW  86
021A:  MOVWF  62
021B:  MOVLW  A0
021C:  MOVWF  61
021D:  CALL   087
021E:  MOVF   00,W
021F:  MOVWF  57
0220:  INCF   04,F
0221:  MOVF   00,W
0222:  MOVWF  58
0223:  INCF   04,F
0224:  MOVF   00,W
0225:  MOVWF  59
0226:  INCF   04,F
0227:  MOVF   00,W
0228:  MOVWF  5A
0229:  CLRF   5C
022A:  MOVF   04,W
022B:  MOVWF  5B
022C:  BCF    5C.0
022D:  BTFSC  03.7
022E:  BSF    5C.0
022F:  MOVF   5A,W
0230:  MOVWF  60
0231:  MOVF   59,W
0232:  MOVWF  5F
0233:  MOVF   58,W
0234:  MOVWF  5E
0235:  MOVF   57,W
0236:  MOVWF  5D
0237:  CLRF   64
0238:  CLRF   63
0239:  MOVLW  03
023A:  MOVWF  62
023B:  MOVLW  E8
023C:  MOVWF  61
023D:  CALL   087
023E:  MOVF   5B,W
023F:  MOVWF  04
0240:  BCF    03.7
0241:  BTFSC  5C.0
0242:  BSF    03.7
0243:  MOVLW  30
0244:  ADDWF  77,W
0245:  MOVWF  55
....................  
....................        lcd_gotoxy(4,2); 
0246:  MOVLW  04
0247:  MOVWF  57
0248:  MOVLW  02
0249:  MOVWF  58
024A:  CALL   159
....................        lcd_putc(thousandsPosition); 
024B:  MOVF   55,W
024C:  MOVWF  56
024D:  CALL   17F
....................        lcd_putc(hundredsPosition); 
024E:  MOVF   54,W
024F:  MOVWF  56
0250:  CALL   17F
....................        lcd_putc(tensPosition); 
0251:  MOVF   53,W
0252:  MOVWF  56
0253:  CALL   17F
....................        lcd_putc(unitsPosition); 
0254:  MOVF   52,W
0255:  MOVWF  56
0256:  CALL   17F
....................  
.................... } 
....................  

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
