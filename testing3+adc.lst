CCS PCM C Compiler, Version 4.013, 28193               12-Jul-12 13:12

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing3+adc.lst

               ROM used: 1008 words (12%)
                         Largest free fragment is 2048
               RAM used: 28 (8%) at main() level
                         47 (13%) worst case
               Stack:    7 worst case (5 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   2F6
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   034
001D:  BTFSS  0B.4
001E:  GOTO   021
001F:  BTFSC  0B.1
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   094
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   0BE
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
0163:  MOVLW  3F
0164:  MOVWF  04
0165:  BCF    03.7
0166:  MOVF   00,W
0167:  BTFSC  03.2
0168:  GOTO   176
0169:  MOVLW  06
016A:  MOVWF  78
016B:  CLRF   77
016C:  DECFSZ 77,F
016D:  GOTO   16C
016E:  DECFSZ 78,F
016F:  GOTO   16B
0170:  MOVLW  7B
0171:  MOVWF  77
0172:  DECFSZ 77,F
0173:  GOTO   172
0174:  DECFSZ 00,F
0175:  GOTO   169
0176:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 2000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 4    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
0177:  BTFSC  46.0
0178:  GOTO   17B
0179:  BCF    08.4
017A:  GOTO   17C
017B:  BSF    08.4
017C:  BSF    03.5
017D:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
017E:  BCF    03.5
017F:  BTFSC  46.1
0180:  GOTO   183
0181:  BCF    08.5
0182:  GOTO   184
0183:  BSF    08.5
0184:  BSF    03.5
0185:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0186:  BCF    03.5
0187:  BTFSC  46.2
0188:  GOTO   18B
0189:  BCF    08.6
018A:  GOTO   18C
018B:  BSF    08.6
018C:  BSF    03.5
018D:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
018E:  BCF    03.5
018F:  BTFSC  46.3
0190:  GOTO   193
0191:  BCF    08.7
0192:  GOTO   194
0193:  BSF    08.7
0194:  BSF    03.5
0195:  BCF    08.7
....................   
....................  delay_cycles(1);  
0196:  NOP
....................  output_high(LCD_E);  
0197:  BCF    08.3
0198:  BCF    03.5
0199:  BSF    08.3
....................  delay_us(2);  
019A:  MOVLW  03
019B:  MOVWF  77
019C:  DECFSZ 77,F
019D:  GOTO   19C
....................  output_low(LCD_E);  
019E:  BSF    03.5
019F:  BCF    08.3
01A0:  BCF    03.5
01A1:  BCF    08.3
.................... }  
01A2:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
01A3:  CLRF   47
....................      
.................... output_high(LCD_E);  
01A4:  BSF    03.5
01A5:  BCF    08.3
01A6:  BCF    03.5
01A7:  BSF    08.3
.................... delay_cycles(1);  
01A8:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
01A9:  BSF    03.5
01AA:  BSF    08.4
01AB:  BCF    03.5
01AC:  BCF    47.0
01AD:  BTFSC  08.4
01AE:  BSF    47.0
.................... retval_1 = input(LCD_DB5);  
01AF:  BSF    03.5
01B0:  BSF    08.5
01B1:  BCF    03.5
01B2:  BCF    47.1
01B3:  BTFSC  08.5
01B4:  BSF    47.1
.................... retval_2 = input(LCD_DB6);  
01B5:  BSF    03.5
01B6:  BSF    08.6
01B7:  BCF    03.5
01B8:  BCF    47.2
01B9:  BTFSC  08.6
01BA:  BSF    47.2
.................... retval_3 = input(LCD_DB7);  
01BB:  BSF    03.5
01BC:  BSF    08.7
01BD:  BCF    03.5
01BE:  BCF    47.3
01BF:  BTFSC  08.7
01C0:  BSF    47.3
....................    
.................... output_low(LCD_E);  
01C1:  BSF    03.5
01C2:  BCF    08.3
01C3:  BCF    03.5
01C4:  BCF    08.3
....................      
.................... return(retval);     
01C5:  MOVF   47,W
01C6:  MOVWF  78
.................... }     
01C7:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
01CC:  BSF    03.5
01CD:  BCF    08.2
01CE:  BCF    03.5
01CF:  BSF    08.2
.................... delay_cycles(1);  
01D0:  NOP
....................  
.................... high = lcd_read_nibble();  
01D1:  CALL   1A3
01D2:  MOVF   78,W
01D3:  MOVWF  46
....................  
.................... low = lcd_read_nibble();  
01D4:  CALL   1A3
01D5:  MOVF   78,W
01D6:  MOVWF  45
....................  
.................... return( (high<<4) | low);  
01D7:  SWAPF  46,W
01D8:  MOVWF  77
01D9:  MOVLW  F0
01DA:  ANDWF  77,F
01DB:  MOVF   77,W
01DC:  IORWF  45,W
01DD:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
01C8:  BSF    03.5
01C9:  BCF    08.1
01CA:  BCF    03.5
01CB:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
01DE:  MOVF   78,W
01DF:  MOVWF  45
01E0:  BTFSC  45.7
01E1:  GOTO   1CC
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
01E2:  MOVF   43,F
01E3:  BTFSC  03.2
01E4:  GOTO   1EA
....................    output_high(LCD_RS);  
01E5:  BSF    03.5
01E6:  BCF    08.1
01E7:  BCF    03.5
01E8:  BSF    08.1
.................... else  
01E9:  GOTO   1EE
....................    output_low(LCD_RS);  
01EA:  BSF    03.5
01EB:  BCF    08.1
01EC:  BCF    03.5
01ED:  BCF    08.1
....................        
....................  delay_cycles(1);  
01EE:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
01EF:  BSF    03.5
01F0:  BCF    08.2
01F1:  BCF    03.5
01F2:  BCF    08.2
.................... delay_cycles(1);  
01F3:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
01F4:  BSF    03.5
01F5:  BCF    08.3
01F6:  BCF    03.5
01F7:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
01F8:  SWAPF  44,W
01F9:  MOVWF  45
01FA:  MOVLW  0F
01FB:  ANDWF  45,F
01FC:  MOVF   45,W
01FD:  MOVWF  46
01FE:  CALL   177
.................... lcd_send_nibble(n & 0xf);  
01FF:  MOVF   44,W
0200:  ANDLW  0F
0201:  MOVWF  45
0202:  MOVWF  46
0203:  CALL   177
.................... }  
0204:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
0316:  BSF    03.5
0317:  BCF    08.1
0318:  BCF    03.5
0319:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
031A:  BSF    03.5
031B:  BCF    08.2
031C:  BCF    03.5
031D:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
031E:  BSF    03.5
031F:  BCF    08.3
0320:  BCF    03.5
0321:  BCF    08.3
....................  
.................... delay_ms(15);  
0322:  MOVLW  0F
0323:  MOVWF  3F
0324:  CALL   163
....................  
.................... for(i=0 ;i < 3; i++)  
0325:  CLRF   36
0326:  MOVF   36,W
0327:  SUBLW  02
0328:  BTFSS  03.0
0329:  GOTO   332
....................    {  
....................     lcd_send_nibble(0x03);  
032A:  MOVLW  03
032B:  MOVWF  46
032C:  CALL   177
....................     delay_ms(5);  
032D:  MOVLW  05
032E:  MOVWF  3F
032F:  CALL   163
....................    }  
0330:  INCF   36,F
0331:  GOTO   326
....................  
.................... lcd_send_nibble(0x02);  
0332:  MOVLW  02
0333:  MOVWF  46
0334:  CALL   177
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
0335:  CLRF   36
0336:  MOVF   36,W
0337:  SUBLW  03
0338:  BTFSS  03.0
0339:  GOTO   343
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
033A:  MOVF   36,W
033B:  CALL   03A
033C:  MOVWF  37
033D:  CLRF   43
033E:  MOVF   37,W
033F:  MOVWF  44
0340:  CALL   1C8
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
0341:  INCF   36,F
0342:  GOTO   336
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
0205:  DECFSZ 40,W
0206:  GOTO   208
0207:  GOTO   20B
....................    address = lcd_line_two;  
0208:  MOVLW  40
0209:  MOVWF  41
.................... else  
020A:  GOTO   20C
....................    address=0;  
020B:  CLRF   41
.................... address += x-1;  
020C:  MOVLW  01
020D:  SUBWF  3F,W
020E:  ADDWF  41,F
.................... lcd_send_byte(0, 0x80 | address);  
020F:  MOVF   41,W
0210:  IORLW  80
0211:  MOVWF  42
0212:  CLRF   43
0213:  MOVF   42,W
0214:  MOVWF  44
0215:  CALL   1C8
.................... }  
0216:  RETLW  00
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
0217:  MOVF   3E,W
0218:  XORLW  0C
0219:  BTFSC  03.2
021A:  GOTO   222
021B:  XORLW  06
021C:  BTFSC  03.2
021D:  GOTO   22A
021E:  XORLW  02
021F:  BTFSC  03.2
0220:  GOTO   230
0221:  GOTO   235
....................     case '\f':  
....................       lcd_send_byte(0,1);  
0222:  CLRF   43
0223:  MOVLW  01
0224:  MOVWF  44
0225:  CALL   1C8
....................       delay_ms(2);  
0226:  MOVLW  02
0227:  MOVWF  3F
0228:  CALL   163
....................       break;  
0229:  GOTO   23B
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
022A:  MOVLW  01
022B:  MOVWF  3F
022C:  MOVLW  02
022D:  MOVWF  40
022E:  CALL   205
....................        break;  
022F:  GOTO   23B
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
0230:  CLRF   43
0231:  MOVLW  10
0232:  MOVWF  44
0233:  CALL   1C8
....................        break;  
0234:  GOTO   23B
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
0235:  MOVLW  01
0236:  MOVWF  43
0237:  MOVF   3E,W
0238:  MOVWF  44
0239:  CALL   1C8
....................        break;  
023A:  GOTO   23B
....................    }  
.................... }  
023B:  RETLW  00
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void init_pic(); 
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... int convertToASCII(int16 number); 
.................... void lcd_display(int16 number, int x, int y); 
.................... void initialDisplay(); 
.................... int16 read_temperature(); 
.................... void lcd_display_temperature(); 
....................  
.................... int16 noOfPeople = 0;    // Number of people inside the room 
*
0309:  BCF    03.5
030A:  CLRF   28
030B:  CLRF   29
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
030C:  BCF    2E.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
030D:  BCF    2E.1
....................  
.................... int16 mseconds =0; 
030E:  CLRF   2F
030F:  CLRF   30
....................  
.................... int16 temperature;     // The A/D conversion of the analog input 
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int16 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
....................  
.................... void main() 
.................... { 
*
02F6:  CLRF   04
02F7:  BCF    03.7
02F8:  MOVLW  1F
02F9:  ANDWF  03,F
02FA:  MOVLW  81
02FB:  BSF    03.5
02FC:  MOVWF  19
02FD:  MOVLW  A6
02FE:  MOVWF  18
02FF:  MOVLW  90
0300:  BCF    03.5
0301:  MOVWF  18
0302:  BSF    03.5
0303:  BSF    1F.0
0304:  BSF    1F.1
0305:  BSF    1F.2
0306:  BCF    1F.3
0307:  MOVLW  07
0308:  MOVWF  1C
....................  
....................  /*  setup_adc_ports(AN0); 
....................    setup_adc(ADC_CLOCK_DIV_32); 
....................    setup_psp(PSP_DISABLED); 
....................    setup_spi(FALSE); 
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
....................    setup_timer_1(T1_DISABLED); 
....................    setup_timer_2(T2_DISABLED,0,1); 
....................    setup_comparator(NC_NC_NC_NC); 
....................    setup_vref(FALSE); 
....................    enable_interrupts(INT_RTCC); 
....................    enable_interrupts(INT_EXT); 
....................    enable_interrupts(GLOBAL); 
....................  
....................    EXT_INT_EDGE(L_TO_H); 
....................  
....................    OUTPUT_B(0); 
....................    OUTPUT_C(0); 
....................  
....................    SET_TRIS_B(0b00000111);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
....................    SET_TRIS_C(0b00000000); 
....................    SET_TRIS_D(0b00000000); 
....................  
....................    set_adc_channel(0); */           //the next read_adc call will read channel 0 
....................  
....................    init_pic(); 
*
0312:  GOTO   0F2
....................  
....................      initialDisplay(); 
....................     // OUTPUT_HIGH(PIN_C0); 
....................     // OUTPUT_LOW(PIN_C1); 
....................  
....................      OUTPUT_HIGH(PIN_C0); 
*
0310:  MOVLW  FF
0311:  MOVWF  35
*
0395:  BCF    35.0
0396:  MOVF   35,W
0397:  BSF    03.5
0398:  MOVWF  07
0399:  BCF    03.5
039A:  BSF    07.0
....................    OUTPUT_HIGH(PIN_C2); 
039B:  BCF    35.2
039C:  MOVF   35,W
039D:  BSF    03.5
039E:  MOVWF  07
039F:  BCF    03.5
03A0:  BSF    07.2
....................    OUTPUT_LOW(PIN_C3); 
03A1:  BCF    35.3
03A2:  MOVF   35,W
03A3:  BSF    03.5
03A4:  MOVWF  07
03A5:  BCF    03.5
03A6:  BCF    07.3
....................  
....................        while(1) 
....................        { 
....................          lcd_display(noOfPeople,14,1); 
03A7:  MOVF   29,W
03A8:  MOVWF  37
03A9:  MOVF   28,W
03AA:  MOVWF  36
03AB:  MOVLW  0E
03AC:  MOVWF  38
03AD:  MOVLW  01
03AE:  MOVWF  39
03AF:  CALL   26A
....................          lcd_display_temperature(); 
....................        } 
*
03EE:  GOTO   3A7
....................  
.................... } 
....................  
....................  
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
03EF:  SLEEP
....................  
....................     if(--int_count==0) 
*
0094:  DECFSZ 2A,F
0095:  GOTO   09B
....................     { 
....................       ++mseconds; 
0096:  INCF   2F,F
0097:  BTFSC  03.2
0098:  INCF   30,F
....................       int_count=INTS_PER_mS; 
0099:  MOVLW  13
009A:  MOVWF  2A
....................     } 
....................  
.................... } 
....................  
009B:  BCF    0B.2
009C:  BCF    0A.3
009D:  BCF    0A.4
009E:  GOTO   021
.................... #int_EXT 
.................... void rayCrossed_isr() 
.................... { 
....................    if(INPUT(PIN_B2)&& rayTwo!=1) 
*
00BE:  BSF    03.5
00BF:  BSF    06.2
00C0:  BCF    03.5
00C1:  BTFSS  06.2
00C2:  GOTO   0D2
00C3:  BTFSC  2E.1
00C4:  GOTO   0D2
....................    { 
....................       rayTwo = 1; 
00C5:  BSF    2E.1
....................       if(rayOne == 1) 
00C6:  BTFSS  2E.0
00C7:  GOTO   0D0
....................       { 
....................          if(checkTimer() == 1) 
00C8:  CALL   09F
00C9:  DECFSZ 78,W
00CA:  GOTO   0CE
....................          { 
....................             noOfPeople++ ; 
00CB:  INCF   28,F
00CC:  BTFSC  03.2
00CD:  INCF   29,F
....................          } 
....................          rayOne = 0; 
00CE:  BCF    2E.0
....................          rayTwo = 0; 
00CF:  BCF    2E.1
....................       } 
....................       setTimer(); 
00D0:  CALL   0B8
....................    } 
....................   else  if(INPUT(PIN_B1)&& rayOne!=1) 
00D1:  GOTO   0E6
00D2:  BSF    03.5
00D3:  BSF    06.1
00D4:  BCF    03.5
00D5:  BTFSS  06.1
00D6:  GOTO   0E6
00D7:  BTFSC  2E.0
00D8:  GOTO   0E6
....................    { 
....................       rayOne = 1; 
00D9:  BSF    2E.0
....................       if(rayTwo == 1) 
00DA:  BTFSS  2E.1
00DB:  GOTO   0E5
....................       { 
....................          if(checkTimer() == 1) 
00DC:  CALL   09F
00DD:  DECFSZ 78,W
00DE:  GOTO   0E3
....................          { 
....................             noOfPeople-- ; 
00DF:  MOVF   28,W
00E0:  BTFSC  03.2
00E1:  DECF   29,F
00E2:  DECF   28,F
....................          } 
....................          rayOne = 0; 
00E3:  BCF    2E.0
....................          rayTwo = 0; 
00E4:  BCF    2E.1
....................       } 
....................       setTimer(); 
00E5:  CALL   0B8
....................    } 
....................    delay_ms(MIN_DELAY_BETWEEN_TWO_INTERRUPTS/2); 
....................    OUTPUT_HIGH(PIN_B7); 
00E6:  BSF    03.5
00E7:  BCF    06.7
00E8:  BCF    03.5
00E9:  BSF    06.7
....................    delay_ms(MIN_DELAY_BETWEEN_TWO_INTERRUPTS/2); 
....................    OUTPUT_LOW(PIN_B7); 
00EA:  BSF    03.5
00EB:  BCF    06.7
00EC:  BCF    03.5
00ED:  BCF    06.7
....................  } 
....................  
....................  
00EE:  BCF    0B.1
00EF:  BCF    0A.3
00F0:  BCF    0A.4
00F1:  GOTO   021
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
*
00B8:  MOVLW  13
00B9:  MOVWF  2A
....................    set_timer0(0); 
00BA:  CLRF   01
....................    mseconds=0; 
00BB:  CLRF   30
00BC:  CLRF   2F
.................... } 
00BD:  RETLW  00
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
*
009F:  MOVF   30,W
00A0:  SUBLW  07
00A1:  BTFSS  03.0
00A2:  GOTO   0B4
00A3:  BTFSS  03.2
00A4:  GOTO   0A9
00A5:  MOVF   2F,W
00A6:  SUBLW  D0
00A7:  BTFSS  03.0
00A8:  GOTO   0B4
00A9:  MOVF   30,F
00AA:  BTFSS  03.2
00AB:  GOTO   0B0
00AC:  MOVF   2F,W
00AD:  SUBLW  03
00AE:  BTFSC  03.0
00AF:  GOTO   0B4
....................    { 
....................       return 1; 
00B0:  MOVLW  01
00B1:  MOVWF  78
00B2:  GOTO   0B7
....................    } 
....................    else 
00B3:  GOTO   0B7
....................    { 
....................       return 0; 
00B4:  MOVLW  00
00B5:  MOVWF  78
00B6:  GOTO   0B7
....................    } 
.................... } 
00B7:  RETLW  00
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
*
03C0:  MOVF   34,W
03C1:  MOVWF  37
03C2:  MOVF   33,W
03C3:  MOVWF  36
03C4:  CLRF   39
03C5:  MOVLW  96
03C6:  MOVWF  38
03C7:  GOTO   2DF
03C8:  MOVF   79,W
03C9:  MOVWF  37
03CA:  MOVF   78,W
03CB:  MOVWF  36
03CC:  MOVF   79,W
03CD:  MOVWF  41
03CE:  MOVF   78,W
03CF:  MOVWF  40
03D0:  MOVLW  01
03D1:  MOVWF  43
03D2:  MOVLW  33
03D3:  MOVWF  42
03D4:  CALL   23C
03D5:  MOVF   79,W
03D6:  MOVWF  7A
03D7:  MOVF   78,W
03D8:  MOVWF  77
03D9:  MOVF   79,W
03DA:  MOVWF  78
03DB:  CLRF   79
03DC:  CLRF   7A
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................           temperature =read_temperature(); 
*
03E1:  MOVF   79,W
03E2:  MOVWF  32
03E3:  MOVF   78,W
03E4:  MOVWF  31
....................           lcd_display(temperature,13,2); 
03E5:  MOVF   32,W
03E6:  MOVWF  37
03E7:  MOVF   31,W
03E8:  MOVWF  36
03E9:  MOVLW  0D
03EA:  MOVWF  38
03EB:  MOVLW  02
03EC:  MOVWF  39
03ED:  CALL   26A
.................... } 
....................  
.................... int convertToASCII(int16 number) 
.................... { 
....................    return (number+48); 
*
0261:  MOVLW  30
0262:  ADDWF  3D,W
0263:  MOVWF  78
0264:  MOVF   3E,W
0265:  MOVWF  7A
0266:  BTFSC  03.0
0267:  INCF   7A,F
0268:  MOVF   78,W
.................... } 
0269:  RETLW  00
....................  
.................... void lcd_display(int16 number, int x, int y) 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition =number % 10; 
026A:  MOVF   37,W
026B:  MOVWF  41
026C:  MOVF   36,W
026D:  MOVWF  40
026E:  CLRF   43
026F:  MOVLW  0A
0270:  MOVWF  42
0271:  CALL   23C
0272:  MOVF   77,W
0273:  MOVWF  3A
....................        tensPosition = ((number - (number % 10))%100)/10; 
0274:  MOVF   37,W
0275:  MOVWF  41
0276:  MOVF   36,W
0277:  MOVWF  40
0278:  CLRF   43
0279:  MOVLW  0A
027A:  MOVWF  42
027B:  CALL   23C
027C:  MOVF   77,W
027D:  SUBWF  36,W
027E:  MOVWF  3D
027F:  MOVF   37,W
0280:  MOVWF  3E
0281:  MOVF   7A,W
0282:  BTFSS  03.0
0283:  INCFSZ 7A,W
0284:  SUBWF  3E,F
0285:  MOVF   3E,W
0286:  MOVWF  41
0287:  MOVF   3D,W
0288:  MOVWF  40
0289:  CLRF   43
028A:  MOVLW  64
028B:  MOVWF  42
028C:  CALL   23C
028D:  MOVF   77,W
028E:  MOVWF  3E
028F:  MOVF   7A,W
0290:  MOVWF  3F
0291:  MOVWF  41
0292:  MOVF   77,W
0293:  MOVWF  40
0294:  CLRF   43
0295:  MOVLW  0A
0296:  MOVWF  42
0297:  CALL   23C
0298:  MOVF   78,W
0299:  MOVWF  3B
....................        hundredsPosition = ((number - (number%100))%1000)/100; 
029A:  MOVF   37,W
029B:  MOVWF  41
029C:  MOVF   36,W
029D:  MOVWF  40
029E:  CLRF   43
029F:  MOVLW  64
02A0:  MOVWF  42
02A1:  CALL   23C
02A2:  MOVF   77,W
02A3:  SUBWF  36,W
02A4:  MOVWF  3D
02A5:  MOVF   37,W
02A6:  MOVWF  3E
02A7:  MOVF   7A,W
02A8:  BTFSS  03.0
02A9:  INCFSZ 7A,W
02AA:  SUBWF  3E,F
02AB:  MOVF   3E,W
02AC:  MOVWF  41
02AD:  MOVF   3D,W
02AE:  MOVWF  40
02AF:  MOVLW  03
02B0:  MOVWF  43
02B1:  MOVLW  E8
02B2:  MOVWF  42
02B3:  CALL   23C
02B4:  MOVF   77,W
02B5:  MOVWF  3E
02B6:  MOVF   7A,W
02B7:  MOVWF  3F
02B8:  MOVWF  41
02B9:  MOVF   77,W
02BA:  MOVWF  40
02BB:  CLRF   43
02BC:  MOVLW  64
02BD:  MOVWF  42
02BE:  CALL   23C
02BF:  MOVF   78,W
02C0:  MOVWF  3C
....................  
....................        lcd_gotoxy(x,y); 
02C1:  MOVF   38,W
02C2:  MOVWF  3F
02C3:  MOVF   39,W
02C4:  MOVWF  40
02C5:  CALL   205
....................        lcd_putc(convertToASCII(hundredsPosition)); 
02C6:  CLRF   3E
02C7:  MOVF   3C,W
02C8:  MOVWF  3D
02C9:  CALL   261
02CA:  MOVF   78,W
02CB:  MOVWF  3D
02CC:  MOVWF  3E
02CD:  CALL   217
....................        lcd_putc(convertToASCII(tensPosition)); 
02CE:  CLRF   3E
02CF:  MOVF   3B,W
02D0:  MOVWF  3D
02D1:  CALL   261
02D2:  MOVF   78,W
02D3:  MOVWF  3D
02D4:  MOVWF  3E
02D5:  CALL   217
....................        lcd_putc(convertToASCII(unitsPosition)); 
02D6:  CLRF   3E
02D7:  MOVF   3A,W
02D8:  MOVWF  3D
02D9:  CALL   261
02DA:  MOVF   78,W
02DB:  MOVWF  3D
02DC:  MOVWF  3E
02DD:  CALL   217
.................... } 
02DE:  RETLW  00
....................  
.................... int16 read_temperature() 
.................... { 
....................     delay_ms(500);                  //a small delay is required after setting the channel 
*
03B0:  MOVLW  02
03B1:  MOVWF  36
03B2:  MOVLW  FA
03B3:  MOVWF  3F
03B4:  CALL   163
03B5:  DECFSZ 36,F
03B6:  GOTO   3B2
....................     t = read_adc(); 
03B7:  BSF    1F.2
03B8:  BTFSC  1F.2
03B9:  GOTO   3B8
03BA:  BSF    03.5
03BB:  MOVF   1E,W
03BC:  BCF    03.5
03BD:  MOVWF  33
03BE:  MOVF   1E,W
03BF:  MOVWF  34
....................     return convertToCelsius(); 
*
03DD:  MOVF   78,W
03DE:  MOVWF  79
03DF:  MOVF   77,W
03E0:  MOVWF  78
.................... } 
....................  
.................... void initialDisplay() 
.................... { 
....................      delay_ms(25); 
*
0313:  MOVLW  19
0314:  MOVWF  3F
0315:  CALL   163
....................      lcd_init(); 
....................     // delay_ms(6); 
....................  
....................      lcd_gotoxy(1,1); 
*
0343:  MOVLW  01
0344:  MOVWF  3F
0345:  MOVWF  40
0346:  CALL   205
....................      lcd_putc("*****CSE'10*****"); 
0347:  CLRF   36
0348:  MOVF   36,W
0349:  CALL   042
034A:  IORLW  00
034B:  BTFSC  03.2
034C:  GOTO   351
034D:  INCF   36,F
034E:  MOVWF  3E
034F:  CALL   217
0350:  GOTO   348
0351:  MOVWF  3E
0352:  CALL   217
....................      lcd_gotoxy(1,2); 
0353:  MOVLW  01
0354:  MOVWF  3F
0355:  MOVLW  02
0356:  MOVWF  40
0357:  CALL   205
....................      lcd_putc("||||||||||||||||"); 
0358:  CLRF   36
0359:  MOVF   36,W
035A:  CALL   057
035B:  IORLW  00
035C:  BTFSC  03.2
035D:  GOTO   362
035E:  INCF   36,F
035F:  MOVWF  3E
0360:  CALL   217
0361:  GOTO   359
0362:  MOVWF  3E
0363:  CALL   217
....................      delay_ms(2000); 
0364:  MOVLW  08
0365:  MOVWF  36
0366:  MOVLW  FA
0367:  MOVWF  3F
0368:  CALL   163
0369:  DECFSZ 36,F
036A:  GOTO   366
....................      lcd_gotoxy(1,1); 
036B:  MOVLW  01
036C:  MOVWF  3F
036D:  MOVWF  40
036E:  CALL   205
....................      lcd_putc("\fNumberInside:"); 
036F:  CLRF   36
0370:  MOVF   36,W
0371:  CALL   06C
0372:  IORLW  00
0373:  BTFSC  03.2
0374:  GOTO   379
0375:  INCF   36,F
0376:  MOVWF  3E
0377:  CALL   217
0378:  GOTO   370
0379:  MOVWF  3E
037A:  CALL   217
....................      lcd_display(noOfPeople,14,1); 
037B:  MOVF   29,W
037C:  MOVWF  37
037D:  MOVF   28,W
037E:  MOVWF  36
037F:  MOVLW  0E
0380:  MOVWF  38
0381:  MOVLW  01
0382:  MOVWF  39
0383:  CALL   26A
....................      lcd_gotoxy(1,2); 
0384:  MOVLW  01
0385:  MOVWF  3F
0386:  MOVLW  02
0387:  MOVWF  40
0388:  CALL   205
....................      lcd_putc("Temperature:   C"); 
0389:  CLRF   36
038A:  MOVF   36,W
038B:  CALL   07F
038C:  IORLW  00
038D:  BTFSC  03.2
038E:  GOTO   393
038F:  INCF   36,F
0390:  MOVWF  3E
0391:  CALL   217
0392:  GOTO   38A
0393:  MOVWF  3E
0394:  CALL   217
....................  
.................... } 
....................  
.................... void init_pic() 
.................... { 
....................    setup_adc_ports(AN0); 
*
00F2:  BSF    03.5
00F3:  BCF    1F.0
00F4:  BSF    1F.1
00F5:  BSF    1F.2
00F6:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
00F7:  BCF    1F.6
00F8:  BCF    03.5
00F9:  BCF    1F.6
00FA:  BSF    1F.7
00FB:  BSF    03.5
00FC:  BSF    1F.7
00FD:  BCF    03.5
00FE:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
00FF:  BSF    03.5
0100:  BCF    09.4
....................    setup_spi(FALSE); 
0101:  BCF    03.5
0102:  BCF    14.5
0103:  BCF    35.5
0104:  MOVF   35,W
0105:  BSF    03.5
0106:  MOVWF  07
0107:  BCF    03.5
0108:  BSF    35.4
0109:  MOVF   35,W
010A:  BSF    03.5
010B:  MOVWF  07
010C:  BCF    03.5
010D:  BCF    35.3
010E:  MOVF   35,W
010F:  BSF    03.5
0110:  MOVWF  07
0111:  MOVLW  00
0112:  BCF    03.5
0113:  MOVWF  14
0114:  BSF    03.5
0115:  MOVWF  14
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
0116:  MOVLW  08
0117:  MOVWF  77
0118:  BTFSS  77.3
0119:  GOTO   125
011A:  MOVLW  07
011B:  BCF    03.5
011C:  CLRF   01
011D:  MOVLW  81
011E:  MOVWF  04
011F:  BCF    03.7
0120:  MOVF   00,W
0121:  ANDLW  C0
0122:  IORLW  0F
0123:  MOVWF  00
0124:  BSF    03.5
0125:  CLRWDT
0126:  MOVLW  81
0127:  MOVWF  04
0128:  MOVF   00,W
0129:  ANDLW  C0
012A:  IORWF  77,W
012B:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
012C:  BCF    03.5
012D:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
012E:  MOVLW  00
012F:  MOVWF  78
0130:  MOVWF  12
0131:  MOVLW  00
0132:  BSF    03.5
0133:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
0134:  MOVLW  07
0135:  MOVWF  1C
0136:  MOVF   05,W
0137:  MOVLW  10
0138:  MOVWF  77
0139:  DECFSZ 77,F
013A:  GOTO   139
013B:  NOP
013C:  MOVF   1C,W
013D:  BCF    03.5
013E:  BCF    0D.6
....................    setup_vref(FALSE); 
013F:  BSF    03.5
0140:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
0141:  BCF    03.5
0142:  BSF    0B.5
....................    enable_interrupts(INT_EXT); 
0143:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
0144:  MOVLW  C0
0145:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
0146:  BSF    03.5
0147:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
0148:  CLRF   06
0149:  BCF    03.5
014A:  CLRF   06
....................    OUTPUT_C(0); 
014B:  MOVLW  00
014C:  MOVWF  35
014D:  BSF    03.5
014E:  CLRF   07
014F:  BCF    03.5
0150:  CLRF   07
....................  
....................    SET_TRIS_B(0b00000111);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
0151:  MOVLW  07
0152:  BSF    03.5
0153:  MOVWF  06
....................    SET_TRIS_C(0b00000000); 
0154:  MOVLW  00
0155:  MOVWF  07
0156:  BCF    03.5
0157:  MOVWF  35
....................    SET_TRIS_D(0b00000000); 
0158:  BSF    03.5
0159:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
015A:  MOVWF  78
015B:  BCF    03.5
015C:  MOVF   1F,W
015D:  ANDLW  C7
015E:  IORWF  78,W
015F:  MOVWF  1F
.................... } 
0160:  BCF    0A.3
0161:  BCF    0A.4
0162:  GOTO   313 (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
