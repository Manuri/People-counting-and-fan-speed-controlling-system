CCS PCM C Compiler, Version 4.013, 28193               15-Jul-12 19:36

               Filename: C:\Users\Amaya\Desktop\only B0\testing\testing3+adc_b.lst

               ROM used: 1960 words (24%)
                         Largest free fragment is 2048
               RAM used: 31 (8%) at main() level
                         73 (20%) worst case
               Stack:    12 worst case (5 in main + 7 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   31E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   034
001D:  BTFSS  0B.4
001E:  GOTO   021
001F:  BTFSC  0B.1
0020:  GOTO   037
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   27,W
002C:  MOVWF  7B
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   094
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   2C2
.................... #include "p1.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=20000000) 
*
01D0:  MOVLW  50
01D1:  MOVWF  04
01D2:  BCF    03.7
01D3:  MOVF   00,W
01D4:  BTFSC  03.2
01D5:  GOTO   1E3
01D6:  MOVLW  06
01D7:  MOVWF  78
01D8:  CLRF   77
01D9:  DECFSZ 77,F
01DA:  GOTO   1D9
01DB:  DECFSZ 78,F
01DC:  GOTO   1D8
01DD:  MOVLW  7B
01DE:  MOVWF  77
01DF:  DECFSZ 77,F
01E0:  GOTO   1DF
01E1:  DECFSZ 00,F
01E2:  GOTO   1D6
01E3:  RETLW  00
*
030F:  MOVLW  03
0310:  SUBWF  3A,F
0311:  BTFSS  03.0
0312:  GOTO   31D
0313:  MOVLW  3A
0314:  MOVWF  04
0315:  BCF    03.7
0316:  MOVF   00,W
0317:  BTFSC  03.2
0318:  GOTO   31D
0319:  GOTO   31B
031A:  GOTO   31B
031B:  DECFSZ 00,F
031C:  GOTO   31A
031D:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define INTS_PER_mS 19         // (20000000/(4*256*1*1000)) 
....................                                //  20000000/4 = 5000000 -> internal clock 
....................                                //  5000000/256 = 19531.25 -> RTCC roll over 
....................                                //  19531.25/1 = 19531.25 -> RTCC_DIV_1 
....................                                //  19531.25/1000 = 19.53125 -> miliseconds 
....................  
.................... #define MAX_CROSSING_TIME 1000   // the maximum time for a person to cross two beams 
.................... #define MIN_CROSSING_TIME 1    // the minimum time for a person to cross two beams 
.................... #define MIN_DELAY_BETWEEN_TWO_INTERRUPTS 1  
....................  
....................  
....................  
....................  
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_D5  
.................... #define LCD_DB6   PIN_D6  
.................... #define LCD_DB7   PIN_D7  
....................  
.................... /*#define LCD_E     PIN_A1 
.................... #define LCD_RS    PIN_A3  
.................... #define LCD_RW    PIN_A2 */ 
....................  
.................... /*#define LCD_E     PIN_C4 
.................... #define LCD_RS    PIN_C5 
.................... #define LCD_RW    PIN_C6*/ 
....................  
.................... #define LCD_RS    PIN_D1 
.................... #define LCD_RW    PIN_D2 
.................... #define LCD_E     PIN_D3 
....................  
....................  
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
*
0166:  BTFSC  57.0
0167:  GOTO   16A
0168:  BCF    08.4
0169:  GOTO   16B
016A:  BSF    08.4
016B:  BSF    03.5
016C:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
016D:  BCF    03.5
016E:  BTFSC  57.1
016F:  GOTO   172
0170:  BCF    08.5
0171:  GOTO   173
0172:  BSF    08.5
0173:  BSF    03.5
0174:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0175:  BCF    03.5
0176:  BTFSC  57.2
0177:  GOTO   17A
0178:  BCF    08.6
0179:  GOTO   17B
017A:  BSF    08.6
017B:  BSF    03.5
017C:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
017D:  BCF    03.5
017E:  BTFSC  57.3
017F:  GOTO   182
0180:  BCF    08.7
0181:  GOTO   183
0182:  BSF    08.7
0183:  BSF    03.5
0184:  BCF    08.7
....................   
....................  delay_cycles(1);  
0185:  NOP
....................  output_high(LCD_E);  
0186:  BCF    08.3
0187:  BCF    03.5
0188:  BSF    08.3
....................  delay_us(2);  
0189:  MOVLW  03
018A:  MOVWF  77
018B:  DECFSZ 77,F
018C:  GOTO   18B
....................  output_low(LCD_E);  
018D:  BSF    03.5
018E:  BCF    08.3
018F:  BCF    03.5
0190:  BCF    08.3
.................... }  
0191:  RETLW  00
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
*
012E:  CLRF   58
....................      
.................... output_high(LCD_E);  
012F:  BSF    03.5
0130:  BCF    08.3
0131:  BCF    03.5
0132:  BSF    08.3
.................... delay_cycles(1);  
0133:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
0134:  BSF    03.5
0135:  BSF    08.4
0136:  BCF    03.5
0137:  BCF    58.0
0138:  BTFSC  08.4
0139:  BSF    58.0
.................... retval_1 = input(LCD_DB5);  
013A:  BSF    03.5
013B:  BSF    08.5
013C:  BCF    03.5
013D:  BCF    58.1
013E:  BTFSC  08.5
013F:  BSF    58.1
.................... retval_2 = input(LCD_DB6);  
0140:  BSF    03.5
0141:  BSF    08.6
0142:  BCF    03.5
0143:  BCF    58.2
0144:  BTFSC  08.6
0145:  BSF    58.2
.................... retval_3 = input(LCD_DB7);  
0146:  BSF    03.5
0147:  BSF    08.7
0148:  BCF    03.5
0149:  BCF    58.3
014A:  BTFSC  08.7
014B:  BSF    58.3
....................    
.................... output_low(LCD_E);  
014C:  BSF    03.5
014D:  BCF    08.3
014E:  BCF    03.5
014F:  BCF    08.3
....................      
.................... return(retval);     
0150:  MOVF   58,W
0151:  MOVWF  78
.................... }     
0152:  RETLW  00
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
0153:  BSF    03.5
0154:  BCF    08.2
0155:  BCF    03.5
0156:  BSF    08.2
.................... delay_cycles(1);  
0157:  NOP
....................  
.................... high = lcd_read_nibble();  
0158:  CALL   12E
0159:  MOVF   78,W
015A:  MOVWF  57
....................  
.................... low = lcd_read_nibble();  
015B:  CALL   12E
015C:  MOVF   78,W
015D:  MOVWF  56
....................  
.................... return( (high<<4) | low);  
015E:  SWAPF  57,W
015F:  MOVWF  77
0160:  MOVLW  F0
0161:  ANDWF  77,F
0162:  MOVF   77,W
0163:  IORWF  56,W
0164:  MOVWF  78
.................... }  
0165:  RETLW  00
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
0192:  BSF    03.5
0193:  BCF    08.1
0194:  BCF    03.5
0195:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
0196:  CALL   153
0197:  MOVF   78,W
0198:  MOVWF  56
0199:  BTFSC  56.7
019A:  GOTO   196
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
019B:  MOVF   54,F
019C:  BTFSC  03.2
019D:  GOTO   1A3
....................    output_high(LCD_RS);  
019E:  BSF    03.5
019F:  BCF    08.1
01A0:  BCF    03.5
01A1:  BSF    08.1
.................... else  
01A2:  GOTO   1A7
....................    output_low(LCD_RS);  
01A3:  BSF    03.5
01A4:  BCF    08.1
01A5:  BCF    03.5
01A6:  BCF    08.1
....................        
....................  delay_cycles(1);  
01A7:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
01A8:  BSF    03.5
01A9:  BCF    08.2
01AA:  BCF    03.5
01AB:  BCF    08.2
.................... delay_cycles(1);  
01AC:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
01AD:  BSF    03.5
01AE:  BCF    08.3
01AF:  BCF    03.5
01B0:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4);  
01B1:  SWAPF  55,W
01B2:  MOVWF  56
01B3:  MOVLW  0F
01B4:  ANDWF  56,F
01B5:  MOVF   56,W
01B6:  MOVWF  57
01B7:  CALL   166
.................... lcd_send_nibble(n & 0xf);  
01B8:  MOVF   55,W
01B9:  ANDLW  0F
01BA:  MOVWF  56
01BB:  MOVWF  57
01BC:  CALL   166
.................... }  
01BD:  RETLW  00
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
03B8:  BSF    03.5
03B9:  BCF    08.1
03BA:  BCF    03.5
03BB:  BCF    08.1
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
03BC:  BSF    03.5
03BD:  BCF    08.2
03BE:  BCF    03.5
03BF:  BCF    08.2
.................... #endif  
....................  
.................... output_low(LCD_E);  
03C0:  BSF    03.5
03C1:  BCF    08.3
03C2:  BCF    03.5
03C3:  BCF    08.3
03C4:  CLRF   28
03C5:  BTFSC  0B.7
03C6:  BSF    28.7
03C7:  BCF    0B.7
....................  
.................... delay_ms(15);  
03C8:  MOVLW  0F
03C9:  MOVWF  50
03CA:  CALL   1D0
03CB:  BTFSC  28.7
03CC:  BSF    0B.7
....................  
.................... for(i=0 ;i < 3; i++)  
03CD:  CLRF   39
03CE:  MOVF   39,W
03CF:  SUBLW  02
03D0:  BTFSS  03.0
03D1:  GOTO   3E6
03D2:  CLRF   28
03D3:  BTFSC  0B.7
03D4:  BSF    28.7
03D5:  BCF    0B.7
....................    {  
....................     lcd_send_nibble(0x03);  
03D6:  MOVLW  03
03D7:  MOVWF  57
03D8:  CALL   166
03D9:  BTFSC  28.7
03DA:  BSF    0B.7
03DB:  CLRF   28
03DC:  BTFSC  0B.7
03DD:  BSF    28.7
03DE:  BCF    0B.7
....................     delay_ms(5);  
03DF:  MOVLW  05
03E0:  MOVWF  50
03E1:  CALL   1D0
03E2:  BTFSC  28.7
03E3:  BSF    0B.7
....................    }  
03E4:  INCF   39,F
03E5:  GOTO   3CE
03E6:  CLRF   28
03E7:  BTFSC  0B.7
03E8:  BSF    28.7
03E9:  BCF    0B.7
....................  
.................... lcd_send_nibble(0x02);  
03EA:  MOVLW  02
03EB:  MOVWF  57
03EC:  CALL   166
03ED:  BTFSC  28.7
03EE:  BSF    0B.7
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
03EF:  CLRF   39
03F0:  MOVF   39,W
03F1:  SUBLW  03
03F2:  BTFSS  03.0
03F3:  GOTO   403
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
03F4:  MOVF   39,W
03F5:  CALL   03A
03F6:  MOVWF  3A
03F7:  CLRF   28
03F8:  BTFSC  0B.7
03F9:  BSF    28.7
03FA:  BCF    0B.7
03FB:  CLRF   54
03FC:  MOVF   3A,W
03FD:  MOVWF  55
03FE:  CALL   192
03FF:  BTFSC  28.7
0400:  BSF    0B.7
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
....................     #endif  
....................    }  
0401:  INCF   39,F
0402:  GOTO   3F0
0403:  CLRF   28
0404:  BTFSC  0B.7
0405:  BSF    28.7
0406:  BCF    0B.7
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
01BE:  DECFSZ 51,W
01BF:  GOTO   1C1
01C0:  GOTO   1C4
....................    address = lcd_line_two;  
01C1:  MOVLW  40
01C2:  MOVWF  52
.................... else  
01C3:  GOTO   1C5
....................    address=0;  
01C4:  CLRF   52
.................... address += x-1;  
01C5:  MOVLW  01
01C6:  SUBWF  50,W
01C7:  ADDWF  52,F
.................... lcd_send_byte(0, 0x80 | address);  
01C8:  MOVF   52,W
01C9:  IORLW  80
01CA:  MOVWF  53
01CB:  CLRF   54
01CC:  MOVF   53,W
01CD:  MOVWF  55
01CE:  CALL   192
.................... }  
01CF:  RETLW  00
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
*
01E4:  MOVF   4F,W
01E5:  XORLW  0C
01E6:  BTFSC  03.2
01E7:  GOTO   1EF
01E8:  XORLW  06
01E9:  BTFSC  03.2
01EA:  GOTO   1F7
01EB:  XORLW  02
01EC:  BTFSC  03.2
01ED:  GOTO   1FD
01EE:  GOTO   202
....................     case '\f':  
....................       lcd_send_byte(0,1);  
01EF:  CLRF   54
01F0:  MOVLW  01
01F1:  MOVWF  55
01F2:  CALL   192
....................       delay_ms(2);  
01F3:  MOVLW  02
01F4:  MOVWF  50
01F5:  CALL   1D0
....................       break;  
01F6:  GOTO   208
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
01F7:  MOVLW  01
01F8:  MOVWF  50
01F9:  MOVLW  02
01FA:  MOVWF  51
01FB:  CALL   1BE
....................        break;  
01FC:  GOTO   208
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
01FD:  CLRF   54
01FE:  MOVLW  10
01FF:  MOVWF  55
0200:  CALL   192
....................        break;  
0201:  GOTO   208
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
0202:  MOVLW  01
0203:  MOVWF  54
0204:  MOVF   4F,W
0205:  MOVWF  55
0206:  CALL   192
....................        break;  
0207:  GOTO   208
....................    }  
.................... }  
0208:  RETLW  00
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
....................  
.................... void init_pic(); 
.................... void setTimer(); 
.................... int checkTimer(); 
.................... void rayCrossed_isr(); 
.................... void clock_isr(); 
.................... int32 convertToCelsius(); 
.................... int convertToASCII(int16 number); 
.................... void lcd_display(int16 number, int x, int y); 
.................... void initialDisplay(); 
.................... int16 read_temperature(); 
.................... void lcd_display_temperature(); 
.................... void phaseControl(); 
....................  
.................... int16 noOfPeople = 0;    // Number of people inside the room 
*
0331:  BCF    03.5
0332:  CLRF   29
0333:  CLRF   2A
.................... int int_count;         // Number of interrupts left before a second has elapsed 
.................... int unitsPosition, tensPosition, hundredsPosition; 
....................  
.................... int1 rayOne = 0;       // to record when first beam get crossed 
0334:  BCF    2F.0
.................... int1 rayTwo = 0;       // to record when second beam get crossed 
0335:  BCF    2F.1
.................... int1 pin_changed = 1; 
0336:  BSF    2F.2
.................... int1 number_changed = 1; 
0337:  BSF    2F.3
....................  
.................... int16 mseconds =0; 
0338:  CLRF   30
0339:  CLRF   31
.................... int16 counter_for_temp=0 ; 
033A:  CLRF   32
033B:  CLRF   33
....................  
.................... int16 temperature=21;     // The A/D conversion of the analog input 
033C:  MOVLW  15
033D:  MOVWF  34
033E:  CLRF   35
....................                        // signal results in a corresponding 10-bit digital number. 
....................                        // this variable is to store that 
....................  
.................... int16 t;           // The A/D conversion of the analog input 
....................                    // signal results in a corresponding 10-bit digital number. 
....................                    // this variable is to store that 
....................  
....................  void display_mseconds() 
.................... { 
....................     int unitsPosition, tensPosition, hundredsPosition, thousandsPosition; 
....................  
....................        unitsPosition = mseconds % 10 + 48; 
*
0209:  MOVF   31,W
020A:  MOVWF  53
020B:  MOVF   30,W
020C:  MOVWF  52
020D:  CLRF   55
020E:  MOVLW  0A
020F:  MOVWF  54
0210:  CALL   0C7
0211:  MOVLW  30
0212:  ADDWF  77,W
0213:  MOVWF  4B
....................        tensPosition = ((mseconds - (mseconds % 10))%100)/10 +48; 
0214:  MOVF   31,W
0215:  MOVWF  53
0216:  MOVF   30,W
0217:  MOVWF  52
0218:  CLRF   55
0219:  MOVLW  0A
021A:  MOVWF  54
021B:  CALL   0C7
021C:  MOVF   77,W
021D:  SUBWF  30,W
021E:  MOVWF  4F
021F:  MOVF   31,W
0220:  MOVWF  50
0221:  MOVF   7A,W
0222:  BTFSS  03.0
0223:  INCFSZ 7A,W
0224:  SUBWF  50,F
0225:  MOVF   50,W
0226:  MOVWF  53
0227:  MOVF   4F,W
0228:  MOVWF  52
0229:  CLRF   55
022A:  MOVLW  64
022B:  MOVWF  54
022C:  CALL   0C7
022D:  MOVF   77,W
022E:  MOVWF  50
022F:  MOVF   7A,W
0230:  MOVWF  51
0231:  MOVWF  53
0232:  MOVF   77,W
0233:  MOVWF  52
0234:  CLRF   55
0235:  MOVLW  0A
0236:  MOVWF  54
0237:  CALL   0C7
0238:  MOVLW  30
0239:  ADDWF  78,W
023A:  MOVWF  4C
....................        hundredsPosition = ((mseconds - (mseconds%100))%1000)/100 +48; 
023B:  MOVF   31,W
023C:  MOVWF  53
023D:  MOVF   30,W
023E:  MOVWF  52
023F:  CLRF   55
0240:  MOVLW  64
0241:  MOVWF  54
0242:  CALL   0C7
0243:  MOVF   77,W
0244:  SUBWF  30,W
0245:  MOVWF  4F
0246:  MOVF   31,W
0247:  MOVWF  50
0248:  MOVF   7A,W
0249:  BTFSS  03.0
024A:  INCFSZ 7A,W
024B:  SUBWF  50,F
024C:  MOVF   50,W
024D:  MOVWF  53
024E:  MOVF   4F,W
024F:  MOVWF  52
0250:  MOVLW  03
0251:  MOVWF  55
0252:  MOVLW  E8
0253:  MOVWF  54
0254:  CALL   0C7
0255:  MOVF   77,W
0256:  MOVWF  50
0257:  MOVF   7A,W
0258:  MOVWF  51
0259:  MOVWF  53
025A:  MOVF   77,W
025B:  MOVWF  52
025C:  CLRF   55
025D:  MOVLW  64
025E:  MOVWF  54
025F:  CALL   0C7
0260:  MOVLW  30
0261:  ADDWF  78,W
0262:  MOVWF  4D
....................        thousandsPosition = ((mseconds - (mseconds%1000))%100000)/1000 +48; 
0263:  MOVF   31,W
0264:  MOVWF  53
0265:  MOVF   30,W
0266:  MOVWF  52
0267:  MOVLW  03
0268:  MOVWF  55
0269:  MOVLW  E8
026A:  MOVWF  54
026B:  CALL   0C7
026C:  MOVF   77,W
026D:  SUBWF  30,W
026E:  MOVWF  4F
026F:  MOVF   31,W
0270:  MOVWF  50
0271:  MOVF   7A,W
0272:  BTFSS  03.0
0273:  INCFSZ 7A,W
0274:  SUBWF  50,F
0275:  CLRF   59
0276:  CLRF   58
0277:  MOVF   50,W
0278:  MOVWF  57
0279:  MOVF   4F,W
027A:  MOVWF  56
027B:  CLRF   5D
027C:  MOVLW  01
027D:  MOVWF  5C
027E:  MOVLW  86
027F:  MOVWF  5B
0280:  MOVLW  A0
0281:  MOVWF  5A
0282:  CALL   0EC
0283:  MOVF   00,W
0284:  MOVWF  50
0285:  INCF   04,F
0286:  MOVF   00,W
0287:  MOVWF  51
0288:  INCF   04,F
0289:  MOVF   00,W
028A:  MOVWF  52
028B:  INCF   04,F
028C:  MOVF   00,W
028D:  MOVWF  53
028E:  CLRF   55
028F:  MOVF   04,W
0290:  MOVWF  54
0291:  BCF    55.0
0292:  BTFSC  03.7
0293:  BSF    55.0
0294:  MOVF   53,W
0295:  MOVWF  59
0296:  MOVF   52,W
0297:  MOVWF  58
0298:  MOVF   51,W
0299:  MOVWF  57
029A:  MOVF   50,W
029B:  MOVWF  56
029C:  CLRF   5D
029D:  CLRF   5C
029E:  MOVLW  03
029F:  MOVWF  5B
02A0:  MOVLW  E8
02A1:  MOVWF  5A
02A2:  CALL   0EC
02A3:  MOVF   54,W
02A4:  MOVWF  04
02A5:  BCF    03.7
02A6:  BTFSC  55.0
02A7:  BSF    03.7
02A8:  MOVLW  30
02A9:  ADDWF  77,W
02AA:  MOVWF  4E
....................  
....................        lcd_gotoxy(1,1); 
02AB:  MOVLW  01
02AC:  MOVWF  50
02AD:  MOVWF  51
02AE:  CALL   1BE
....................        lcd_putc(thousandsPosition); 
02AF:  MOVF   4E,W
02B0:  MOVWF  4F
02B1:  CALL   1E4
....................        lcd_putc(hundredsPosition); 
02B2:  MOVF   4D,W
02B3:  MOVWF  4F
02B4:  CALL   1E4
....................        lcd_putc(tensPosition); 
02B5:  MOVF   4C,W
02B6:  MOVWF  4F
02B7:  CALL   1E4
....................        lcd_putc(unitsPosition); 
02B8:  MOVF   4B,W
02B9:  MOVWF  4F
02BA:  CALL   1E4
....................  
.................... } 
02BB:  RETLW  00
....................  
.................... void main() 
.................... { 
*
031E:  CLRF   04
031F:  BCF    03.7
0320:  MOVLW  1F
0321:  ANDWF  03,F
0322:  MOVLW  81
0323:  BSF    03.5
0324:  MOVWF  19
0325:  MOVLW  A6
0326:  MOVWF  18
0327:  MOVLW  90
0328:  BCF    03.5
0329:  MOVWF  18
032A:  BSF    03.5
032B:  BSF    1F.0
032C:  BSF    1F.1
032D:  BSF    1F.2
032E:  BCF    1F.3
032F:  MOVLW  07
0330:  MOVWF  1C
....................    init_pic(); 
....................  
....................      initialDisplay(); 
....................  
....................    OUTPUT_HIGH(PIN_C0); 
*
033F:  MOVLW  FF
0340:  MOVWF  38
*
055D:  BCF    38.0
055E:  MOVF   38,W
055F:  BSF    03.5
0560:  MOVWF  07
0561:  BCF    03.5
0562:  BSF    07.0
....................    OUTPUT_HIGH(PIN_C2); 
0563:  BCF    38.2
0564:  MOVF   38,W
0565:  BSF    03.5
0566:  MOVWF  07
0567:  BCF    03.5
0568:  BSF    07.2
....................    OUTPUT_LOW(PIN_C3); 
0569:  BCF    38.3
056A:  MOVF   38,W
056B:  BSF    03.5
056C:  MOVWF  07
056D:  BCF    03.5
056E:  BCF    07.3
....................  
....................        while(1) 
....................        { 
....................          phaseControl(); 
....................          if(number_changed) 
*
0614:  BTFSS  2F.3
0615:  GOTO   6DA
....................          { 
....................             lcd_display(noOfPeople,14,1); 
0616:  MOVF   2A,W
0617:  MOVWF  3A
0618:  MOVF   29,W
0619:  MOVWF  39
061A:  MOVLW  0E
061B:  MOVWF  3B
061C:  MOVLW  01
061D:  MOVWF  3C
061E:  CLRF   28
061F:  BTFSC  0B.7
0620:  BSF    28.7
0621:  BCF    0B.7
....................             number_changed = 0; 
*
06D9:  BCF    2F.3
....................          } 
....................  
....................          if(counter_for_temp == 65535) 
06DA:  INCFSZ 32,W
06DB:  GOTO   7A3
06DC:  INCFSZ 33,W
06DD:  GOTO   7A3
....................          { 
....................             lcd_display_temperature(); 
....................             counter_for_temp=0; 
*
07A1:  CLRF   33
07A2:  CLRF   32
....................          } 
....................          counter_for_temp++; 
07A3:  INCF   32,F
07A4:  BTFSC  03.2
07A5:  INCF   33,F
....................        } 
07A6:  GOTO   56F
.................... } 
....................  
.................... /* when timer0 counter overflows(0-255) an interrup occurs. int count which is initially 
....................  * set to INTS_PER_mS, is decremented by 1 inside the isr. 
....................  * When int_count reaches 0, no of miliseconds is incremented by 1 
....................  */ 
.................... #int_RTCC 
.................... void clock_isr() { 
07A7:  SLEEP
....................  
....................     if(--int_count==0) 
*
0094:  DECFSZ 2B,F
0095:  GOTO   09B
....................     { 
....................       ++mseconds; 
0096:  INCF   30,F
0097:  BTFSC  03.2
0098:  INCF   31,F
....................       int_count=INTS_PER_mS; 
0099:  MOVLW  13
009A:  MOVWF  2B
....................     } 
.................... } 
....................  
009B:  BCF    0B.2
009C:  BCF    0A.3
009D:  BCF    0A.4
009E:  GOTO   021
.................... #int_EXT 
.................... void rayCrossed_isr() 
.................... { 
....................    if(INPUT(PIN_B2)) 
*
02C2:  BSF    03.5
02C3:  BSF    06.2
02C4:  BCF    03.5
02C5:  BTFSS  06.2
02C6:  GOTO   2DF
....................    { 
....................       rayTwo = 1; 
02C7:  BSF    2F.1
....................       if(checkTimer() == 2 && rayOne == 1) 
02C8:  CALL   09F
02C9:  MOVF   78,W
02CA:  SUBLW  02
02CB:  BTFSS  03.2
02CC:  GOTO   2D1
02CD:  BTFSS  2F.0
02CE:  GOTO   2D1
....................       { 
....................          display_mseconds(); 
02CF:  CALL   209
....................          rayOne = 0; 
02D0:  BCF    2F.0
....................       } 
....................       if(rayOne == 1) 
02D1:  BTFSS  2F.0
02D2:  GOTO   2DD
....................       { 
....................          if(checkTimer() == 1) 
02D3:  CALL   09F
02D4:  DECFSZ 78,W
02D5:  GOTO   2DB
....................          { 
....................             display_mseconds(); 
02D6:  CALL   209
....................             noOfPeople++ ; 
02D7:  INCF   29,F
02D8:  BTFSC  03.2
02D9:  INCF   2A,F
....................             number_changed = 1; 
02DA:  BSF    2F.3
....................          } 
....................          rayOne = 0; 
02DB:  BCF    2F.0
....................          rayTwo = 0; 
02DC:  BCF    2F.1
....................       } 
....................       setTimer(); 
02DD:  CALL   2BC
....................    } 
....................   else if(INPUT(PIN_B1)) 
02DE:  GOTO   302
02DF:  BSF    03.5
02E0:  BSF    06.1
02E1:  BCF    03.5
02E2:  BTFSS  06.1
02E3:  GOTO   302
....................    { 
....................       rayOne = 1; 
02E4:  BSF    2F.0
....................       if(checkTimer() == 2 && rayTwo == 1) 
02E5:  CALL   09F
02E6:  MOVF   78,W
02E7:  SUBLW  02
02E8:  BTFSS  03.2
02E9:  GOTO   2EE
02EA:  BTFSS  2F.1
02EB:  GOTO   2EE
....................       { 
....................          display_mseconds(); 
02EC:  CALL   209
....................          rayTwo = 0; 
02ED:  BCF    2F.1
....................       } 
....................       if(rayTwo == 1) 
02EE:  BTFSS  2F.1
02EF:  GOTO   301
....................       { 
....................          if(checkTimer() == 1 && noOfPeople>0) 
02F0:  CALL   09F
02F1:  DECFSZ 78,W
02F2:  GOTO   2FF
02F3:  MOVF   29,F
02F4:  BTFSS  03.2
02F5:  GOTO   2F9
02F6:  MOVF   2A,F
02F7:  BTFSC  03.2
02F8:  GOTO   2FF
....................          { 
....................             display_mseconds(); 
02F9:  CALL   209
....................             noOfPeople-- ; 
02FA:  MOVF   29,W
02FB:  BTFSC  03.2
02FC:  DECF   2A,F
02FD:  DECF   29,F
....................             number_changed = 1; 
02FE:  BSF    2F.3
....................          } 
....................          rayOne = 0; 
02FF:  BCF    2F.0
....................          rayTwo = 0; 
0300:  BCF    2F.1
....................       } 
....................       setTimer(); 
0301:  CALL   2BC
....................    } 
....................   // delay_ms(MIN_DELAY_BETWEEN_TWO_INTERRUPTS); 
....................  } 
....................  
....................  
0302:  BCF    0B.1
0303:  BCF    0A.3
0304:  BCF    0A.4
0305:  GOTO   021
.................... void setTimer() 
.................... { 
....................    int_count=INTS_PER_mS; 
*
02BC:  MOVLW  13
02BD:  MOVWF  2B
....................    set_timer0(0); 
02BE:  CLRF   01
....................    mseconds=0; 
02BF:  CLRF   31
02C0:  CLRF   30
.................... } 
02C1:  RETLW  00
....................  
....................  
.................... /* When both rayOne =1 and rayTwo = 1, this is called */ 
.................... int checkTimer() 
.................... { 
....................    if((mseconds <= MAX_CROSSING_TIME) && (mseconds >= MIN_CROSSING_TIME)) 
*
009F:  MOVF   31,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0B4
00A3:  BTFSS  03.2
00A4:  GOTO   0A9
00A5:  MOVF   30,W
00A6:  SUBLW  E8
00A7:  BTFSS  03.0
00A8:  GOTO   0B4
00A9:  MOVF   31,F
00AA:  BTFSS  03.2
00AB:  GOTO   0B0
00AC:  MOVF   30,W
00AD:  SUBLW  00
00AE:  BTFSC  03.0
00AF:  GOTO   0B4
....................    { 
....................       return 1; 
00B0:  MOVLW  01
00B1:  MOVWF  78
00B2:  GOTO   0C6
....................    } 
....................  
....................    else if(mseconds > MAX_CROSSING_TIME) 
00B3:  GOTO   0C6
00B4:  MOVF   31,W
00B5:  SUBLW  02
00B6:  BTFSC  03.0
00B7:  GOTO   0C3
00B8:  XORLW  FF
00B9:  BTFSS  03.2
00BA:  GOTO   0BF
00BB:  MOVF   30,W
00BC:  SUBLW  E8
00BD:  BTFSC  03.0
00BE:  GOTO   0C3
....................    { 
....................       return 2; 
00BF:  MOVLW  02
00C0:  MOVWF  78
00C1:  GOTO   0C6
....................    } 
....................     else //if(mseconds < MIN_CROSSING_TIME) 
00C2:  GOTO   0C6
....................    { 
....................       return 0; 
00C3:  MOVLW  00
00C4:  MOVWF  78
00C5:  GOTO   0C6
....................    } 
.................... } 
00C6:  RETLW  00
....................  
.................... int32 convertToCelsius() 
.................... { 
....................    return (t*150)/307; 
.................... } 
....................  
.................... void lcd_display_temperature() 
.................... { 
....................        //   temperature =read_temperature(); 
....................           lcd_display(temperature,13,2); 
*
06DE:  MOVF   35,W
06DF:  MOVWF  3A
06E0:  MOVF   34,W
06E1:  MOVWF  39
06E2:  MOVLW  0D
06E3:  MOVWF  3B
06E4:  MOVLW  02
06E5:  MOVWF  3C
06E6:  CLRF   28
06E7:  BTFSC  0B.7
06E8:  BSF    28.7
06E9:  BCF    0B.7
.................... } 
....................  
.................... int convertToASCII(int16 number) 
.................... { 
....................    return (number+48); 
*
0306:  MOVLW  30
0307:  ADDWF  40,W
0308:  MOVWF  78
0309:  MOVF   41,W
030A:  MOVWF  7A
030B:  BTFSC  03.0
030C:  INCF   7A,F
030D:  MOVF   78,W
.................... } 
030E:  RETLW  00
....................  
.................... void lcd_display(int16 number, int x, int y) 
.................... { 
....................    int unitsPosition, tensPosition, hundredsPosition; 
....................  
....................        unitsPosition =number % 10; 
*
0483:  MOVF   3A,W
0484:  MOVWF  53
0485:  MOVF   39,W
0486:  MOVWF  52
0487:  CLRF   55
0488:  MOVLW  0A
0489:  MOVWF  54
048A:  CALL   0C7
048B:  BTFSC  28.7
048C:  BSF    0B.7
048D:  MOVF   77,W
048E:  MOVWF  3D
048F:  CLRF   28
0490:  BTFSC  0B.7
0491:  BSF    28.7
0492:  BCF    0B.7
*
0622:  MOVF   3A,W
0623:  MOVWF  53
0624:  MOVF   39,W
0625:  MOVWF  52
0626:  CLRF   55
0627:  MOVLW  0A
0628:  MOVWF  54
0629:  CALL   0C7
062A:  BTFSC  28.7
062B:  BSF    0B.7
062C:  MOVF   77,W
062D:  MOVWF  3D
062E:  CLRF   28
062F:  BTFSC  0B.7
0630:  BSF    28.7
0631:  BCF    0B.7
*
06EA:  MOVF   3A,W
06EB:  MOVWF  53
06EC:  MOVF   39,W
06ED:  MOVWF  52
06EE:  CLRF   55
06EF:  MOVLW  0A
06F0:  MOVWF  54
06F1:  CALL   0C7
06F2:  BTFSC  28.7
06F3:  BSF    0B.7
06F4:  MOVF   77,W
06F5:  MOVWF  3D
06F6:  CLRF   28
06F7:  BTFSC  0B.7
06F8:  BSF    28.7
06F9:  BCF    0B.7
....................        tensPosition = ((number - (number % 10))%100)/10; 
*
0493:  MOVF   3A,W
0494:  MOVWF  53
0495:  MOVF   39,W
0496:  MOVWF  52
0497:  CLRF   55
0498:  MOVLW  0A
0499:  MOVWF  54
049A:  CALL   0C7
049B:  BTFSC  28.7
049C:  BSF    0B.7
049D:  MOVF   77,W
049E:  SUBWF  39,W
049F:  MOVWF  40
04A0:  MOVF   3A,W
04A1:  MOVWF  41
04A2:  MOVF   7A,W
04A3:  BTFSS  03.0
04A4:  INCFSZ 7A,W
04A5:  SUBWF  41,F
04A6:  CLRF   28
04A7:  BTFSC  0B.7
04A8:  BSF    28.7
04A9:  BCF    0B.7
04AA:  MOVF   41,W
04AB:  MOVWF  53
04AC:  MOVF   40,W
04AD:  MOVWF  52
04AE:  CLRF   55
04AF:  MOVLW  64
04B0:  MOVWF  54
04B1:  CALL   0C7
04B2:  BTFSC  28.7
04B3:  BSF    0B.7
04B4:  MOVF   77,W
04B5:  MOVWF  41
04B6:  MOVF   7A,W
04B7:  MOVWF  42
04B8:  CLRF   28
04B9:  BTFSC  0B.7
04BA:  BSF    28.7
04BB:  BCF    0B.7
04BC:  MOVF   7A,W
04BD:  MOVWF  53
04BE:  MOVF   77,W
04BF:  MOVWF  52
04C0:  CLRF   55
04C1:  MOVLW  0A
04C2:  MOVWF  54
04C3:  CALL   0C7
04C4:  BTFSC  28.7
04C5:  BSF    0B.7
04C6:  MOVF   78,W
04C7:  MOVWF  3E
04C8:  CLRF   28
04C9:  BTFSC  0B.7
04CA:  BSF    28.7
04CB:  BCF    0B.7
*
0632:  MOVF   3A,W
0633:  MOVWF  53
0634:  MOVF   39,W
0635:  MOVWF  52
0636:  CLRF   55
0637:  MOVLW  0A
0638:  MOVWF  54
0639:  CALL   0C7
063A:  BTFSC  28.7
063B:  BSF    0B.7
063C:  MOVF   77,W
063D:  SUBWF  39,W
063E:  MOVWF  40
063F:  MOVF   3A,W
0640:  MOVWF  41
0641:  MOVF   7A,W
0642:  BTFSS  03.0
0643:  INCFSZ 7A,W
0644:  SUBWF  41,F
0645:  CLRF   28
0646:  BTFSC  0B.7
0647:  BSF    28.7
0648:  BCF    0B.7
0649:  MOVF   41,W
064A:  MOVWF  53
064B:  MOVF   40,W
064C:  MOVWF  52
064D:  CLRF   55
064E:  MOVLW  64
064F:  MOVWF  54
0650:  CALL   0C7
0651:  BTFSC  28.7
0652:  BSF    0B.7
0653:  MOVF   77,W
0654:  MOVWF  41
0655:  MOVF   7A,W
0656:  MOVWF  42
0657:  CLRF   28
0658:  BTFSC  0B.7
0659:  BSF    28.7
065A:  BCF    0B.7
065B:  MOVF   7A,W
065C:  MOVWF  53
065D:  MOVF   77,W
065E:  MOVWF  52
065F:  CLRF   55
0660:  MOVLW  0A
0661:  MOVWF  54
0662:  CALL   0C7
0663:  BTFSC  28.7
0664:  BSF    0B.7
0665:  MOVF   78,W
0666:  MOVWF  3E
0667:  CLRF   28
0668:  BTFSC  0B.7
0669:  BSF    28.7
066A:  BCF    0B.7
*
06FA:  MOVF   3A,W
06FB:  MOVWF  53
06FC:  MOVF   39,W
06FD:  MOVWF  52
06FE:  CLRF   55
06FF:  MOVLW  0A
0700:  MOVWF  54
0701:  CALL   0C7
0702:  BTFSC  28.7
0703:  BSF    0B.7
0704:  MOVF   77,W
0705:  SUBWF  39,W
0706:  MOVWF  40
0707:  MOVF   3A,W
0708:  MOVWF  41
0709:  MOVF   7A,W
070A:  BTFSS  03.0
070B:  INCFSZ 7A,W
070C:  SUBWF  41,F
070D:  CLRF   28
070E:  BTFSC  0B.7
070F:  BSF    28.7
0710:  BCF    0B.7
0711:  MOVF   41,W
0712:  MOVWF  53
0713:  MOVF   40,W
0714:  MOVWF  52
0715:  CLRF   55
0716:  MOVLW  64
0717:  MOVWF  54
0718:  CALL   0C7
0719:  BTFSC  28.7
071A:  BSF    0B.7
071B:  MOVF   77,W
071C:  MOVWF  41
071D:  MOVF   7A,W
071E:  MOVWF  42
071F:  CLRF   28
0720:  BTFSC  0B.7
0721:  BSF    28.7
0722:  BCF    0B.7
0723:  MOVF   7A,W
0724:  MOVWF  53
0725:  MOVF   77,W
0726:  MOVWF  52
0727:  CLRF   55
0728:  MOVLW  0A
0729:  MOVWF  54
072A:  CALL   0C7
072B:  BTFSC  28.7
072C:  BSF    0B.7
072D:  MOVF   78,W
072E:  MOVWF  3E
072F:  CLRF   28
0730:  BTFSC  0B.7
0731:  BSF    28.7
0732:  BCF    0B.7
....................        hundredsPosition = ((number - (number%100))%1000)/100; 
*
04CC:  MOVF   3A,W
04CD:  MOVWF  53
04CE:  MOVF   39,W
04CF:  MOVWF  52
04D0:  CLRF   55
04D1:  MOVLW  64
04D2:  MOVWF  54
04D3:  CALL   0C7
04D4:  BTFSC  28.7
04D5:  BSF    0B.7
04D6:  MOVF   77,W
04D7:  SUBWF  39,W
04D8:  MOVWF  40
04D9:  MOVF   3A,W
04DA:  MOVWF  41
04DB:  MOVF   7A,W
04DC:  BTFSS  03.0
04DD:  INCFSZ 7A,W
04DE:  SUBWF  41,F
04DF:  CLRF   28
04E0:  BTFSC  0B.7
04E1:  BSF    28.7
04E2:  BCF    0B.7
04E3:  MOVF   41,W
04E4:  MOVWF  53
04E5:  MOVF   40,W
04E6:  MOVWF  52
04E7:  MOVLW  03
04E8:  MOVWF  55
04E9:  MOVLW  E8
04EA:  MOVWF  54
04EB:  CALL   0C7
04EC:  BTFSC  28.7
04ED:  BSF    0B.7
04EE:  MOVF   77,W
04EF:  MOVWF  41
04F0:  MOVF   7A,W
04F1:  MOVWF  42
04F2:  CLRF   28
04F3:  BTFSC  0B.7
04F4:  BSF    28.7
04F5:  BCF    0B.7
04F6:  MOVF   7A,W
04F7:  MOVWF  53
04F8:  MOVF   77,W
04F9:  MOVWF  52
04FA:  CLRF   55
04FB:  MOVLW  64
04FC:  MOVWF  54
04FD:  CALL   0C7
04FE:  BTFSC  28.7
04FF:  BSF    0B.7
0500:  MOVF   78,W
0501:  MOVWF  3F
0502:  CLRF   28
0503:  BTFSC  0B.7
0504:  BSF    28.7
0505:  BCF    0B.7
*
066B:  MOVF   3A,W
066C:  MOVWF  53
066D:  MOVF   39,W
066E:  MOVWF  52
066F:  CLRF   55
0670:  MOVLW  64
0671:  MOVWF  54
0672:  CALL   0C7
0673:  BTFSC  28.7
0674:  BSF    0B.7
0675:  MOVF   77,W
0676:  SUBWF  39,W
0677:  MOVWF  40
0678:  MOVF   3A,W
0679:  MOVWF  41
067A:  MOVF   7A,W
067B:  BTFSS  03.0
067C:  INCFSZ 7A,W
067D:  SUBWF  41,F
067E:  CLRF   28
067F:  BTFSC  0B.7
0680:  BSF    28.7
0681:  BCF    0B.7
0682:  MOVF   41,W
0683:  MOVWF  53
0684:  MOVF   40,W
0685:  MOVWF  52
0686:  MOVLW  03
0687:  MOVWF  55
0688:  MOVLW  E8
0689:  MOVWF  54
068A:  CALL   0C7
068B:  BTFSC  28.7
068C:  BSF    0B.7
068D:  MOVF   77,W
068E:  MOVWF  41
068F:  MOVF   7A,W
0690:  MOVWF  42
0691:  CLRF   28
0692:  BTFSC  0B.7
0693:  BSF    28.7
0694:  BCF    0B.7
0695:  MOVF   7A,W
0696:  MOVWF  53
0697:  MOVF   77,W
0698:  MOVWF  52
0699:  CLRF   55
069A:  MOVLW  64
069B:  MOVWF  54
069C:  CALL   0C7
069D:  BTFSC  28.7
069E:  BSF    0B.7
069F:  MOVF   78,W
06A0:  MOVWF  3F
06A1:  CLRF   28
06A2:  BTFSC  0B.7
06A3:  BSF    28.7
06A4:  BCF    0B.7
*
0733:  MOVF   3A,W
0734:  MOVWF  53
0735:  MOVF   39,W
0736:  MOVWF  52
0737:  CLRF   55
0738:  MOVLW  64
0739:  MOVWF  54
073A:  CALL   0C7
073B:  BTFSC  28.7
073C:  BSF    0B.7
073D:  MOVF   77,W
073E:  SUBWF  39,W
073F:  MOVWF  40
0740:  MOVF   3A,W
0741:  MOVWF  41
0742:  MOVF   7A,W
0743:  BTFSS  03.0
0744:  INCFSZ 7A,W
0745:  SUBWF  41,F
0746:  CLRF   28
0747:  BTFSC  0B.7
0748:  BSF    28.7
0749:  BCF    0B.7
074A:  MOVF   41,W
074B:  MOVWF  53
074C:  MOVF   40,W
074D:  MOVWF  52
074E:  MOVLW  03
074F:  MOVWF  55
0750:  MOVLW  E8
0751:  MOVWF  54
0752:  CALL   0C7
0753:  BTFSC  28.7
0754:  BSF    0B.7
0755:  MOVF   77,W
0756:  MOVWF  41
0757:  MOVF   7A,W
0758:  MOVWF  42
0759:  CLRF   28
075A:  BTFSC  0B.7
075B:  BSF    28.7
075C:  BCF    0B.7
075D:  MOVF   7A,W
075E:  MOVWF  53
075F:  MOVF   77,W
0760:  MOVWF  52
0761:  CLRF   55
0762:  MOVLW  64
0763:  MOVWF  54
0764:  CALL   0C7
0765:  BTFSC  28.7
0766:  BSF    0B.7
0767:  MOVF   78,W
0768:  MOVWF  3F
0769:  CLRF   28
076A:  BTFSC  0B.7
076B:  BSF    28.7
076C:  BCF    0B.7
....................  
....................        lcd_gotoxy(x,y); 
*
0506:  MOVF   3B,W
0507:  MOVWF  50
0508:  MOVF   3C,W
0509:  MOVWF  51
050A:  CALL   1BE
050B:  BTFSC  28.7
050C:  BSF    0B.7
*
06A5:  MOVF   3B,W
06A6:  MOVWF  50
06A7:  MOVF   3C,W
06A8:  MOVWF  51
06A9:  CALL   1BE
06AA:  BTFSC  28.7
06AB:  BSF    0B.7
*
076D:  MOVF   3B,W
076E:  MOVWF  50
076F:  MOVF   3C,W
0770:  MOVWF  51
0771:  CALL   1BE
0772:  BTFSC  28.7
0773:  BSF    0B.7
....................        lcd_putc(convertToASCII(hundredsPosition)); 
*
050D:  CLRF   41
050E:  MOVF   3F,W
050F:  MOVWF  40
0510:  CALL   306
0511:  MOVF   78,W
0512:  MOVWF  40
0513:  CLRF   28
0514:  BTFSC  0B.7
0515:  BSF    28.7
0516:  BCF    0B.7
0517:  MOVF   78,W
0518:  MOVWF  4F
0519:  CALL   1E4
051A:  BTFSC  28.7
051B:  BSF    0B.7
*
06AC:  CLRF   41
06AD:  MOVF   3F,W
06AE:  MOVWF  40
06AF:  CALL   306
06B0:  MOVF   78,W
06B1:  MOVWF  40
06B2:  CLRF   28
06B3:  BTFSC  0B.7
06B4:  BSF    28.7
06B5:  BCF    0B.7
06B6:  MOVF   78,W
06B7:  MOVWF  4F
06B8:  CALL   1E4
06B9:  BTFSC  28.7
06BA:  BSF    0B.7
*
0774:  CLRF   41
0775:  MOVF   3F,W
0776:  MOVWF  40
0777:  CALL   306
0778:  MOVF   78,W
0779:  MOVWF  40
077A:  CLRF   28
077B:  BTFSC  0B.7
077C:  BSF    28.7
077D:  BCF    0B.7
077E:  MOVF   78,W
077F:  MOVWF  4F
0780:  CALL   1E4
0781:  BTFSC  28.7
0782:  BSF    0B.7
....................        lcd_putc(convertToASCII(tensPosition)); 
*
051C:  CLRF   41
051D:  MOVF   3E,W
051E:  MOVWF  40
051F:  CALL   306
0520:  MOVF   78,W
0521:  MOVWF  40
0522:  CLRF   28
0523:  BTFSC  0B.7
0524:  BSF    28.7
0525:  BCF    0B.7
0526:  MOVF   78,W
0527:  MOVWF  4F
0528:  CALL   1E4
0529:  BTFSC  28.7
052A:  BSF    0B.7
*
06BB:  CLRF   41
06BC:  MOVF   3E,W
06BD:  MOVWF  40
06BE:  CALL   306
06BF:  MOVF   78,W
06C0:  MOVWF  40
06C1:  CLRF   28
06C2:  BTFSC  0B.7
06C3:  BSF    28.7
06C4:  BCF    0B.7
06C5:  MOVF   78,W
06C6:  MOVWF  4F
06C7:  CALL   1E4
06C8:  BTFSC  28.7
06C9:  BSF    0B.7
*
0783:  CLRF   41
0784:  MOVF   3E,W
0785:  MOVWF  40
0786:  CALL   306
0787:  MOVF   78,W
0788:  MOVWF  40
0789:  CLRF   28
078A:  BTFSC  0B.7
078B:  BSF    28.7
078C:  BCF    0B.7
078D:  MOVF   78,W
078E:  MOVWF  4F
078F:  CALL   1E4
0790:  BTFSC  28.7
0791:  BSF    0B.7
....................        lcd_putc(convertToASCII(unitsPosition)); 
*
052B:  CLRF   41
052C:  MOVF   3D,W
052D:  MOVWF  40
052E:  CALL   306
052F:  MOVF   78,W
0530:  MOVWF  40
0531:  CLRF   28
0532:  BTFSC  0B.7
0533:  BSF    28.7
0534:  BCF    0B.7
0535:  MOVF   78,W
0536:  MOVWF  4F
0537:  CALL   1E4
0538:  BTFSC  28.7
0539:  BSF    0B.7
053A:  CLRF   28
053B:  BTFSC  0B.7
053C:  BSF    28.7
053D:  BCF    0B.7
*
06CA:  CLRF   41
06CB:  MOVF   3D,W
06CC:  MOVWF  40
06CD:  CALL   306
06CE:  MOVF   78,W
06CF:  MOVWF  40
06D0:  CLRF   28
06D1:  BTFSC  0B.7
06D2:  BSF    28.7
06D3:  BCF    0B.7
06D4:  MOVF   78,W
06D5:  MOVWF  4F
06D6:  CALL   1E4
06D7:  BTFSC  28.7
06D8:  BSF    0B.7
*
0792:  CLRF   41
0793:  MOVF   3D,W
0794:  MOVWF  40
0795:  CALL   306
0796:  MOVF   78,W
0797:  MOVWF  40
0798:  CLRF   28
0799:  BTFSC  0B.7
079A:  BSF    28.7
079B:  BCF    0B.7
079C:  MOVF   78,W
079D:  MOVWF  4F
079E:  CALL   1E4
079F:  BTFSC  28.7
07A0:  BSF    0B.7
.................... } 
....................  
.................... int16 read_temperature() 
.................... { 
....................     delay_us(12);                  //a small delay is required after setting the channel 
....................     t = read_adc(); 
....................     return convertToCelsius(); 
.................... } 
....................  
.................... void initialDisplay() 
.................... { 
....................      delay_ms(25); 
*
03B3:  MOVLW  19
03B4:  MOVWF  50
03B5:  CALL   1D0
03B6:  BTFSC  28.7
03B7:  BSF    0B.7
....................      lcd_init(); 
....................     // delay_ms(6); 
....................  
....................      lcd_gotoxy(1,1); 
*
0407:  MOVLW  01
0408:  MOVWF  50
0409:  MOVWF  51
040A:  CALL   1BE
040B:  BTFSC  28.7
040C:  BSF    0B.7
....................      lcd_putc("*****CSE'10*****"); 
040D:  CLRF   39
040E:  MOVF   39,W
040F:  CALL   042
0410:  IORLW  00
0411:  BTFSC  03.2
0412:  GOTO   41D
0413:  INCF   39,F
0414:  CLRF   28
0415:  BTFSC  0B.7
0416:  BSF    28.7
0417:  BCF    0B.7
0418:  MOVWF  4F
0419:  CALL   1E4
041A:  BTFSC  28.7
041B:  BSF    0B.7
041C:  GOTO   40E
041D:  CLRF   28
041E:  BTFSC  0B.7
041F:  BSF    28.7
0420:  BCF    0B.7
0421:  MOVWF  4F
0422:  CALL   1E4
0423:  BTFSC  28.7
0424:  BSF    0B.7
0425:  CLRF   28
0426:  BTFSC  0B.7
0427:  BSF    28.7
0428:  BCF    0B.7
....................      lcd_gotoxy(1,2); 
0429:  MOVLW  01
042A:  MOVWF  50
042B:  MOVLW  02
042C:  MOVWF  51
042D:  CALL   1BE
042E:  BTFSC  28.7
042F:  BSF    0B.7
....................      lcd_putc("||||||||||||||||"); 
0430:  CLRF   39
0431:  MOVF   39,W
0432:  CALL   057
0433:  IORLW  00
0434:  BTFSC  03.2
0435:  GOTO   440
0436:  INCF   39,F
0437:  CLRF   28
0438:  BTFSC  0B.7
0439:  BSF    28.7
043A:  BCF    0B.7
043B:  MOVWF  4F
043C:  CALL   1E4
043D:  BTFSC  28.7
043E:  BSF    0B.7
043F:  GOTO   431
0440:  CLRF   28
0441:  BTFSC  0B.7
0442:  BSF    28.7
0443:  BCF    0B.7
0444:  MOVWF  4F
0445:  CALL   1E4
0446:  BTFSC  28.7
0447:  BSF    0B.7
....................      delay_ms(2000); 
0448:  MOVLW  08
0449:  MOVWF  39
044A:  CLRF   28
044B:  BTFSC  0B.7
044C:  BSF    28.7
044D:  BCF    0B.7
044E:  MOVLW  FA
044F:  MOVWF  50
0450:  CALL   1D0
0451:  BTFSC  28.7
0452:  BSF    0B.7
0453:  DECFSZ 39,F
0454:  GOTO   44A
0455:  CLRF   28
0456:  BTFSC  0B.7
0457:  BSF    28.7
0458:  BCF    0B.7
....................      lcd_gotoxy(1,1); 
0459:  MOVLW  01
045A:  MOVWF  50
045B:  MOVWF  51
045C:  CALL   1BE
045D:  BTFSC  28.7
045E:  BSF    0B.7
....................      lcd_putc("\fNumberInside:"); 
045F:  CLRF   39
0460:  MOVF   39,W
0461:  CALL   06C
0462:  IORLW  00
0463:  BTFSC  03.2
0464:  GOTO   46F
0465:  INCF   39,F
0466:  CLRF   28
0467:  BTFSC  0B.7
0468:  BSF    28.7
0469:  BCF    0B.7
046A:  MOVWF  4F
046B:  CALL   1E4
046C:  BTFSC  28.7
046D:  BSF    0B.7
046E:  GOTO   460
046F:  CLRF   28
0470:  BTFSC  0B.7
0471:  BSF    28.7
0472:  BCF    0B.7
0473:  MOVWF  4F
0474:  CALL   1E4
0475:  BTFSC  28.7
0476:  BSF    0B.7
....................      lcd_display(noOfPeople,14,1); 
0477:  MOVF   2A,W
0478:  MOVWF  3A
0479:  MOVF   29,W
047A:  MOVWF  39
047B:  MOVLW  0E
047C:  MOVWF  3B
047D:  MOVLW  01
047E:  MOVWF  3C
047F:  CLRF   28
0480:  BTFSC  0B.7
0481:  BSF    28.7
0482:  BCF    0B.7
....................      lcd_gotoxy(1,2); 
*
053E:  MOVLW  01
053F:  MOVWF  50
0540:  MOVLW  02
0541:  MOVWF  51
0542:  CALL   1BE
0543:  BTFSC  28.7
0544:  BSF    0B.7
....................      lcd_putc("Temperature:   C"); 
0545:  CLRF   39
0546:  MOVF   39,W
0547:  CALL   07F
0548:  IORLW  00
0549:  BTFSC  03.2
054A:  GOTO   555
054B:  INCF   39,F
054C:  CLRF   28
054D:  BTFSC  0B.7
054E:  BSF    28.7
054F:  BCF    0B.7
0550:  MOVWF  4F
0551:  CALL   1E4
0552:  BTFSC  28.7
0553:  BSF    0B.7
0554:  GOTO   546
0555:  CLRF   28
0556:  BTFSC  0B.7
0557:  BSF    28.7
0558:  BCF    0B.7
0559:  MOVWF  4F
055A:  CALL   1E4
055B:  BTFSC  28.7
055C:  BSF    0B.7
....................  
.................... } 
....................  
.................... void init_pic() 
.................... { 
....................    setup_adc_ports(AN0); 
*
0341:  BSF    03.5
0342:  BCF    1F.0
0343:  BSF    1F.1
0344:  BSF    1F.2
0345:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
0346:  BCF    1F.6
0347:  BCF    03.5
0348:  BCF    1F.6
0349:  BSF    1F.7
034A:  BSF    03.5
034B:  BSF    1F.7
034C:  BCF    03.5
034D:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
034E:  BSF    03.5
034F:  BCF    09.4
....................    setup_spi(FALSE); 
0350:  BCF    03.5
0351:  BCF    14.5
0352:  BCF    38.5
0353:  MOVF   38,W
0354:  BSF    03.5
0355:  MOVWF  07
0356:  BCF    03.5
0357:  BSF    38.4
0358:  MOVF   38,W
0359:  BSF    03.5
035A:  MOVWF  07
035B:  BCF    03.5
035C:  BCF    38.3
035D:  MOVF   38,W
035E:  BSF    03.5
035F:  MOVWF  07
0360:  MOVLW  00
0361:  BCF    03.5
0362:  MOVWF  14
0363:  BSF    03.5
0364:  MOVWF  14
....................    setup_counters( RTCC_INTERNAL, RTCC_DIV_1 | RTCC_8_BIT); 
0365:  MOVLW  08
0366:  MOVWF  77
0367:  BTFSS  77.3
0368:  GOTO   374
0369:  MOVLW  07
036A:  BCF    03.5
036B:  CLRF   01
036C:  MOVLW  81
036D:  MOVWF  04
036E:  BCF    03.7
036F:  MOVF   00,W
0370:  ANDLW  C0
0371:  IORLW  0F
0372:  MOVWF  00
0373:  BSF    03.5
0374:  CLRWDT
0375:  MOVLW  81
0376:  MOVWF  04
0377:  MOVF   00,W
0378:  ANDLW  C0
0379:  IORWF  77,W
037A:  MOVWF  00
....................    setup_timer_1(T1_DISABLED); 
037B:  BCF    03.5
037C:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
037D:  MOVLW  00
037E:  MOVWF  78
037F:  MOVWF  12
0380:  MOVLW  00
0381:  BSF    03.5
0382:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
0383:  MOVLW  07
0384:  MOVWF  1C
0385:  MOVF   05,W
0386:  MOVLW  10
0387:  MOVWF  77
0388:  DECFSZ 77,F
0389:  GOTO   388
038A:  NOP
038B:  MOVF   1C,W
038C:  BCF    03.5
038D:  BCF    0D.6
....................    setup_vref(FALSE); 
038E:  BSF    03.5
038F:  CLRF   1D
....................    enable_interrupts(INT_RTCC); 
0390:  BCF    03.5
0391:  BSF    0B.5
....................    enable_interrupts(INT_EXT); 
0392:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
0393:  MOVLW  C0
0394:  IORWF  0B,F
....................  
....................    EXT_INT_EDGE(L_TO_H); 
0395:  BSF    03.5
0396:  BSF    01.6
....................  
....................    OUTPUT_B(0); 
0397:  CLRF   06
0398:  BCF    03.5
0399:  CLRF   06
....................    OUTPUT_C(0); 
039A:  MOVLW  00
039B:  MOVWF  38
039C:  BSF    03.5
039D:  CLRF   07
039E:  BCF    03.5
039F:  CLRF   07
....................  
....................    SET_TRIS_B(0b01000111);   //pins B0, B1 and B2 are set to give inputs. b0 is the external interuupt pin 
03A0:  MOVLW  47
03A1:  BSF    03.5
03A2:  MOVWF  06
....................    SET_TRIS_C(0b00000000); 
03A3:  MOVLW  00
03A4:  MOVWF  07
03A5:  BCF    03.5
03A6:  MOVWF  38
....................    SET_TRIS_D(0b00000000); 
03A7:  BSF    03.5
03A8:  MOVWF  08
....................  
....................    set_adc_channel(0);            //the next read_adc call will read channel 0 
03A9:  MOVWF  78
03AA:  BCF    03.5
03AB:  MOVF   1F,W
03AC:  ANDLW  C7
03AD:  IORWF  78,W
03AE:  MOVWF  1F
03AF:  CLRF   28
03B0:  BTFSC  0B.7
03B1:  BSF    28.7
03B2:  BCF    0B.7
.................... } 
....................  
.................... void phaseControl() 
.................... { 
....................     if(noOfPeople<1) 
*
056F:  MOVF   29,F
0570:  BTFSS  03.2
0571:  GOTO   57A
0572:  MOVF   2A,F
0573:  BTFSS  03.2
0574:  GOTO   57A
....................    { 
....................       OUTPUT_HIGH(PIN_B7); 
0575:  BSF    03.5
0576:  BCF    06.7
0577:  BCF    03.5
0578:  BSF    06.7
....................    } 
....................    else 
0579:  GOTO   614
....................    { 
....................       if(INPUT(PIN_B6) && pin_changed == 1) 
057A:  BSF    03.5
057B:  BSF    06.6
057C:  BCF    03.5
057D:  BTFSS  06.6
057E:  GOTO   60E
057F:  BTFSS  2F.2
0580:  GOTO   60E
....................       { 
....................          if(0<=temperature && temperature<20) 
0581:  MOVF   35,F
0582:  BTFSS  03.2
0583:  GOTO   58D
0584:  MOVF   34,W
0585:  SUBLW  13
0586:  BTFSS  03.0
0587:  GOTO   58D
....................          { 
....................             OUTPUT_HIGH(PIN_B7); 
0588:  BSF    03.5
0589:  BCF    06.7
058A:  BCF    03.5
058B:  BSF    06.7
....................          } 
....................        else if(temperature>=20&& temperature<25) 
058C:  GOTO   60D
058D:  MOVF   35,F
058E:  BTFSS  03.2
058F:  GOTO   594
0590:  MOVF   34,W
0591:  SUBLW  13
0592:  BTFSC  03.0
0593:  GOTO   5B4
0594:  MOVF   35,F
0595:  BTFSS  03.2
0596:  GOTO   5B4
0597:  MOVF   34,W
0598:  SUBLW  18
0599:  BTFSS  03.0
059A:  GOTO   5B4
059B:  CLRF   28
059C:  BTFSC  0B.7
059D:  BSF    28.7
059E:  BCF    0B.7
....................        { 
....................             delay_us(6000); 
059F:  MOVLW  06
05A0:  MOVWF  50
05A1:  CALL   1D0
05A2:  BTFSC  28.7
05A3:  BSF    0B.7
....................             OUTPUT_LOW(PIN_B7); 
05A4:  BSF    03.5
05A5:  BCF    06.7
05A6:  BCF    03.5
05A7:  BCF    06.7
....................             delay_us(500); 
05A8:  MOVLW  02
05A9:  MOVWF  39
05AA:  MOVLW  F9
05AB:  MOVWF  3A
05AC:  CALL   30F
05AD:  DECFSZ 39,F
05AE:  GOTO   5AA
....................             OUTPUT_HIGH(PIN_B7); 
05AF:  BSF    03.5
05B0:  BCF    06.7
05B1:  BCF    03.5
05B2:  BSF    06.7
....................        } 
....................        else if(temperature>=25&& temperature<27) 
05B3:  GOTO   60D
05B4:  MOVF   35,F
05B5:  BTFSS  03.2
05B6:  GOTO   5BB
05B7:  MOVF   34,W
05B8:  SUBLW  18
05B9:  BTFSC  03.0
05BA:  GOTO   5DB
05BB:  MOVF   35,F
05BC:  BTFSS  03.2
05BD:  GOTO   5DB
05BE:  MOVF   34,W
05BF:  SUBLW  1A
05C0:  BTFSS  03.0
05C1:  GOTO   5DB
05C2:  CLRF   28
05C3:  BTFSC  0B.7
05C4:  BSF    28.7
05C5:  BCF    0B.7
....................        { 
....................            delay_us(5000); 
05C6:  MOVLW  05
05C7:  MOVWF  50
05C8:  CALL   1D0
05C9:  BTFSC  28.7
05CA:  BSF    0B.7
....................             OUTPUT_LOW(PIN_B7); 
05CB:  BSF    03.5
05CC:  BCF    06.7
05CD:  BCF    03.5
05CE:  BCF    06.7
....................             delay_us(500); 
05CF:  MOVLW  02
05D0:  MOVWF  39
05D1:  MOVLW  F9
05D2:  MOVWF  3A
05D3:  CALL   30F
05D4:  DECFSZ 39,F
05D5:  GOTO   5D1
....................             OUTPUT_HIGH(PIN_B7); 
05D6:  BSF    03.5
05D7:  BCF    06.7
05D8:  BCF    03.5
05D9:  BSF    06.7
....................        } 
....................       else if(temperature>=27&& temperature<31) 
05DA:  GOTO   60D
05DB:  MOVF   35,F
05DC:  BTFSS  03.2
05DD:  GOTO   5E2
05DE:  MOVF   34,W
05DF:  SUBLW  1A
05E0:  BTFSC  03.0
05E1:  GOTO   602
05E2:  MOVF   35,F
05E3:  BTFSS  03.2
05E4:  GOTO   602
05E5:  MOVF   34,W
05E6:  SUBLW  1E
05E7:  BTFSS  03.0
05E8:  GOTO   602
05E9:  CLRF   28
05EA:  BTFSC  0B.7
05EB:  BSF    28.7
05EC:  BCF    0B.7
....................        { 
....................            delay_us(4000); 
05ED:  MOVLW  04
05EE:  MOVWF  50
05EF:  CALL   1D0
05F0:  BTFSC  28.7
05F1:  BSF    0B.7
....................             OUTPUT_LOW(PIN_B7); 
05F2:  BSF    03.5
05F3:  BCF    06.7
05F4:  BCF    03.5
05F5:  BCF    06.7
....................             delay_us(500); 
05F6:  MOVLW  02
05F7:  MOVWF  39
05F8:  MOVLW  F9
05F9:  MOVWF  3A
05FA:  CALL   30F
05FB:  DECFSZ 39,F
05FC:  GOTO   5F8
....................             OUTPUT_HIGH(PIN_B7); 
05FD:  BSF    03.5
05FE:  BCF    06.7
05FF:  BCF    03.5
0600:  BSF    06.7
....................        } 
....................        else if(temperature>=31) 
0601:  GOTO   60D
0602:  MOVF   35,F
0603:  BTFSS  03.2
0604:  GOTO   609
0605:  MOVF   34,W
0606:  SUBLW  1E
0607:  BTFSC  03.0
0608:  GOTO   60D
....................        { 
....................             OUTPUT_LOW(PIN_B7); 
0609:  BSF    03.5
060A:  BCF    06.7
060B:  BCF    03.5
060C:  BCF    06.7
....................        } 
....................         pin_changed = 0; 
060D:  BCF    2F.2
....................       } 
....................     
....................    if(!INPUT(PIN_B6)) 
060E:  BSF    03.5
060F:  BSF    06.6
0610:  BCF    03.5
0611:  BTFSC  06.6
0612:  GOTO   614
....................    { 
....................       pin_changed = 1; 
0613:  BSF    2F.2
....................    } 
....................  
....................    } 
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
